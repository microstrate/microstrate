{
  "openapi": "3.0.3",
  "info": {
    "title": "Microstrate Gateway",
    "description": "A comprehensive interface for managing key-value stores, object stores, streams, and search indexing",
    "contact": {
      "name": "Microstrate Support",
      "url": "https://microstrate.io/support"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.staging.microstrate.io",
      "description": "Staging API server"
    },
    {
      "url": "https://api.microstrate.io",
      "description": "Production API server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Api-Key"
      }
    },
    "parameters": {
      "bucketName": {
        "name": "bucket",
        "in": "path",
        "description": "Name of the bucket",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "entryKey": {
        "name": "key",
        "in": "path",
        "description": "Key of the entry",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "streamName": {
        "name": "name",
        "in": "path",
        "description": "Name of the stream",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "StorageType": {
        "type": "integer",
        "enum": [
          0,
          1
        ],
        "description": "Storage type: 0 = FileStorage (disk), 1 = MemoryStorage (RAM)",
        "default": 0
      },
      "IndexMapping": {
        "type": "object",
        "required": [
          "field",
          "field_type"
        ],
        "properties": {
          "field": {
            "type": "string",
            "description": "Field name to be indexed"
          },
          "field_type": {
            "type": "string",
            "description": "Type of the field",
            "enum": [
              "text",
              "number",
              "date",
              "boolean",
              "keyword"
            ]
          }
        }
      },
      "IndexRequest": {
        "type": "object",
        "required": [
          "mappings",
          "partitions",
          "replicas",
          "storage_type"
        ],
        "properties": {
          "mappings": {
            "type": "array",
            "description": "Field mappings for indexing",
            "items": {
              "$ref": "#/components/schemas/IndexMapping"
            }
          },
          "partitions": {
            "type": "integer",
            "description": "Number of partitions for the index",
            "minimum": 1
          },
          "replicas": {
            "type": "integer",
            "description": "Number of replicas for the index",
            "minimum": 1
          },
          "storage_type": {
            "$ref": "#/components/schemas/StorageType"
          },
          "stream": {
            "type": "string",
            "description": "Optional stream name for the index"
          }
        }
      },
      "CreateKVBucketRequest": {
        "type": "object",
        "required": [
          "bucket"
        ],
        "properties": {
          "bucket": {
            "type": "string",
            "description": "Name of the bucket to create"
          },
          "compression": {
            "type": "boolean",
            "description": "Whether to enable compression",
            "default": false
          },
          "description": {
            "type": "string",
            "description": "Description of the bucket"
          },
          "history": {
            "type": "integer",
            "description": "Number of historical versions to keep",
            "minimum": 1,
            "default": 1
          },
          "indexing": {
            "$ref": "#/components/schemas/IndexRequest"
          },
          "max_bytes": {
            "type": "integer",
            "description": "Maximum size of the bucket in bytes",
            "minimum": 1
          },
          "max_value_size": {
            "type": "integer",
            "description": "Maximum size of individual values in bytes",
            "minimum": 1
          },
          "replicas": {
            "type": "integer",
            "description": "Number of replicas",
            "minimum": 1,
            "default": 1
          },
          "storage": {
            "$ref": "#/components/schemas/StorageType"
          }
        }
      },
      "UpdateKVBucketRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Updated description of the bucket"
          },
          "max_bytes": {
            "type": "integer",
            "description": "Updated maximum size of the bucket in bytes",
            "minimum": 1
          },
          "max_value_size": {
            "type": "integer",
            "description": "Updated maximum size of individual values in bytes",
            "minimum": 1
          },
          "indexing": {
            "$ref": "#/components/schemas/IndexRequest"
          }
        }
      },
      "CreateObjectBucketRequest": {
        "type": "object",
        "required": [
          "bucket"
        ],
        "properties": {
          "bucket": {
            "type": "string",
            "description": "Name of the bucket to create"
          },
          "description": {
            "type": "string",
            "description": "Description of the bucket"
          },
          "max_bytes": {
            "type": "integer",
            "description": "Maximum size of the bucket in bytes",
            "minimum": 1
          },
          "replicas": {
            "type": "integer",
            "description": "Number of replicas",
            "minimum": 1,
            "default": 1
          },
          "storage": {
            "$ref": "#/components/schemas/StorageType"
          }
        }
      },
      "UpdateObjectBucketRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Updated description of the bucket"
          },
          "max_bytes": {
            "type": "integer",
            "description": "Updated maximum size of the bucket in bytes",
            "minimum": 1
          }
        }
      },
      "StreamSource": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the source stream"
          },
          "opt_start_seq": {
            "type": "integer",
            "description": "Optional starting sequence number"
          },
          "opt_start_time": {
            "type": "string",
            "format": "date-time",
            "description": "Optional starting time"
          },
          "filter_subject": {
            "type": "string",
            "description": "Optional subject filter"
          },
          "domain": {
            "type": "string",
            "description": "Optional domain"
          }
        }
      },
      "CreateStreamRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the stream to create"
          },
          "description": {
            "type": "string",
            "description": "Description of the stream"
          },
          "subjects": {
            "type": "array",
            "description": "Subject patterns to capture",
            "items": {
              "type": "string"
            }
          },
          "max_consumers": {
            "type": "integer",
            "description": "Maximum number of consumers",
            "minimum": 1
          },
          "max_msgs": {
            "type": "integer",
            "description": "Maximum number of messages",
            "minimum": 1
          },
          "max_bytes": {
            "type": "integer",
            "description": "Maximum size in bytes",
            "minimum": 1
          },
          "discard": {
            "type": "integer",
            "description": "Discard policy (0 = old, 1 = new)",
            "enum": [
              0,
              1
            ],
            "default": 0
          },
          "max_msgs_per_subject": {
            "type": "integer",
            "description": "Maximum messages per subject",
            "minimum": 1
          },
          "max_msg_size": {
            "type": "integer",
            "description": "Maximum message size in bytes",
            "minimum": 1
          },
          "storage": {
            "$ref": "#/components/schemas/StorageType"
          },
          "num_replicas": {
            "type": "integer",
            "description": "Number of replicas",
            "minimum": 1,
            "default": 1
          },
          "mirror": {
            "$ref": "#/components/schemas/StreamSource"
          },
          "sources": {
            "type": "array",
            "description": "Optional sources configuration",
            "items": {
              "$ref": "#/components/schemas/StreamSource"
            }
          },
          "sealed": {
            "type": "boolean",
            "description": "Whether the stream is sealed",
            "default": false
          },
          "deny_delete": {
            "type": "boolean",
            "description": "Whether deletes are denied",
            "default": false
          },
          "deny_purge": {
            "type": "boolean",
            "description": "Whether purges are denied",
            "default": false
          }
        }
      },
      "UpdateStreamRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Updated description of the stream"
          },
          "max_msgs": {
            "type": "integer",
            "description": "Updated maximum number of messages",
            "minimum": 1
          },
          "max_bytes": {
            "type": "integer",
            "description": "Updated maximum size in bytes",
            "minimum": 1
          },
          "max_msg_size": {
            "type": "integer",
            "description": "Updated maximum message size in bytes",
            "minimum": 1
          }
        }
      },
      "PurgeStreamRequest": {
        "type": "object",
        "properties": {
          "keep": {
            "type": "integer",
            "description": "Number of messages to keep",
            "minimum": 0
          },
          "up_to_sequence": {
            "type": "integer",
            "description": "Purge up to this sequence number",
            "minimum": 1
          },
          "subject": {
            "type": "string",
            "description": "Subject filter for purging"
          }
        }
      },
      "KVEntryValue": {
        "type": "object",
        "description": "Value to store in KV entry",
        "additionalProperties": true
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "bucket": {
            "type": "string",
            "description": "Bucket name"
          },
          "duration": {
            "type": "string",
            "description": "Operation duration"
          },
          "field": {
            "type": "string",
            "description": "Search field"
          },
          "hits": {
            "type": "integer",
            "description": "Number of hits"
          },
          "index_duration": {
            "type": "string",
            "description": "Index search duration"
          },
          "index_hits": {
            "type": "integer",
            "description": "Number of index hits"
          },
          "index_name": {
            "type": "string",
            "description": "Index name"
          },
          "index_partitions": {
            "type": "integer",
            "description": "Number of index partitions"
          },
          "key": {
            "type": "string",
            "description": "Entry key"
          },
          "limit": {
            "type": "integer",
            "description": "Query limit"
          },
          "partitions": {
            "type": "integer",
            "description": "Number of partitions"
          },
          "search": {
            "type": "string",
            "description": "Search term"
          },
          "stream": {
            "type": "string",
            "description": "Stream name"
          },
          "subject": {
            "type": "string",
            "description": "Subject pattern"
          }
        }
      },
      "BucketListItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "entry_total": {
            "type": "integer"
          },
          "metadata": {
            "type": "object"
          },
          "placement": {
            "type": "object",
            "properties": {
              "cluster": {
                "type": "string"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "created": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BucketListResponse": {
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "description": "List of kv buckets",
                "items": {
                  "$ref": "#/components/schemas/BucketListItem"
                }
              },
              "results_total": {
                "type": "integer",
                "description": "Total number of kv buckets returned",
                "example": 2
              }
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "KVBucketResponse": {
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "additionalProperties": true
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "ObjectBucketResponse": {
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "additionalProperties": true
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "KVEntriesItem": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "KVEntriesResponse": {
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/KVEntriesItem"
                }
              },
              "results_total": {
                "type": "integer"
              }
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "KVEntryResponse": {
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "ObjectEntriesItem": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          }
        }
      },
      "ObjectEntriesResponse": {
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectEntriesItem"
                }
              },
              "results_total": {
                "type": "integer"
              }
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "StreamListItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "subjects": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "messages_total": {
            "type": "integer"
          },
          "placement": {
            "type": "object",
            "properties": {
              "cluster": {
                "type": "string"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": {
            "type": "string"
          }
        }
      },
      "StreamListResponse": {
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StreamListItem"
                }
              },
              "results_total": {
                "type": "integer"
              }
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "StreamResponse": {
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "PublishMessageRequest": {
        "type": "object",
        "required": [
          "stream",
          "subject",
          "body"
        ],
        "properties": {
          "stream": {
            "type": "string",
            "description": "Stream name"
          },
          "subject": {
            "type": "string",
            "description": "Message subject"
          },
          "body": {
            "type": "object",
            "description": "Message payload",
            "additionalProperties": true
          }
        }
      },
      "SearchKVItem": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "SearchResponse": {
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SearchKVItem"
                }
              },
              "results_total": {
                "type": "integer"
              }
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "SearchByKeyResponse": {
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SearchKVItem"
                }
              },
              "results_total": {
                "type": "integer"
              }
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "SearchStreamItem": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "StreamSearchResponse": {
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SearchStreamItem"
                }
              },
              "results_total": {
                "type": "integer"
              }
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "IndexSearchItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the result"
          },
          "stream": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "fields": {
            "type": "object",
            "description": "Indexed fields and their values",
            "additionalProperties": true
          },
          "score": {
            "type": "number",
            "description": "Relevance score of the result"
          },
          "partition": {
            "type": "integer"
          },
          "sequence": {
            "type": "integer"
          },
          "timestamp": {
            "type": "integer"
          }
        }
      },
      "IndexSearchResponse": {
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IndexSearchItem"
                }
              },
              "results_total": {
                "type": "integer"
              }
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "IndexerListItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "subjects": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "index_config": {
            "type": "object",
            "properties": {
              "mappings": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IndexMapping"
                }
              },
              "engine": {
                "type": "string"
              },
              "idBy": {
                "type": "string"
              },
              "partitions": {
                "type": "integer"
              },
              "version": {
                "type": "integer"
              }
            }
          }
        }
      },
      "IndexerListResponse": {
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IndexerListItem"
                }
              },
              "results_total": {
                "type": "integer"
              }
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "SuccessMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "success"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        }
      }
    },
    "responses": {
      "SuccessResponse": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SuccessMessage"
            },
            "example": {
              "message": "success"
            }
          }
        }
      },
      "BadRequestError": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": "validation_error"
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": "unauthorized"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": "not_found"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": "internal_error"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    },
    {
      "apiKeyAuth": []
    }
  ],
  "paths": {
    "/storage/kv": {
      "get": {
        "tags": [
          "KV Buckets"
        ],
        "summary": "List all KV buckets",
        "description": "Retrieves a list of all key-value buckets in the system",
        "operationId": "getKVBucketList",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.get.kv-list",
        "responses": {
          "200": {
            "description": "Successfully retrieved KV bucket list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketListResponse"
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "created": "2025-05-08T12:49:45.02903891Z",
                        "name": "bucket1",
                        "description": "First bucket",
                        "entry_total": 0
                      },
                      {
                        "created": "2025-05-08T12:49:45.02903891Z",
                        "name": "bucket2",
                        "description": "Second bucket",
                        "entry_total": 12
                      }
                    ],
                    "results_total": 2
                  },
                  "metadata": {
                    "duration": "5ms"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "KV Buckets"
        ],
        "summary": "Create a new KV bucket",
        "description": "Creates a new key-value bucket with optional indexing configuration",
        "operationId": "createKVBucket",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.post.kv",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKVBucketRequest"
              },
              "example": {
                "bucket": "my-bucket",
                "description": "My test bucket",
                "compression": true,
                "history": 5,
                "max_bytes": 1048576,
                "max_value_size": 8192,
                "replicas": 3,
                "storage": 0,
                "indexing": {
                  "mappings": [
                    {
                      "field": "name",
                      "field_type": "text"
                    },
                    {
                      "field": "age",
                      "field_type": "number"
                    }
                  ],
                  "partitions": 3,
                  "replicas": 2,
                  "storage_type": 0
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/kv/{bucket}": {
      "get": {
        "tags": [
          "KV Buckets"
        ],
        "summary": "Get KV bucket details",
        "description": "Retrieves information about a specific KV bucket",
        "operationId": "getKVBucket",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.get.kv",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved bucket information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KVBucketResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "KV Buckets"
        ],
        "summary": "Create or update a KV bucket",
        "description": "Creates a new key-value bucket with optional indexing or updates it if one does not exist",
        "operationId": "createOrUpdateKVBucket",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.put.kv",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateKVBucketRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "KV Buckets"
        ],
        "summary": "Delete KV bucket",
        "description": "Deletes a key-value bucket and all its contents",
        "operationId": "deleteKVBucket",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.delete.kv",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/kv/{bucket}/purge": {
      "delete": {
        "tags": [
          "KV Buckets"
        ],
        "summary": "Purge KV bucket",
        "description": "Purges all data from a key-value bucket while keeping the bucket configuration",
        "operationId": "purgeKVBucket",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.delete.kv-purge",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/kv/{bucket}/entries": {
      "get": {
        "tags": [
          "KV Entries"
        ],
        "summary": "Get latest KV entries",
        "description": "Retrieves the latest entries from a key-value bucket",
        "operationId": "getKVLatestEntries",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.get.kv-entries",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of entries to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved entries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KVEntriesResponse"
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "key": "key1",
                        "value": {
                          "name": "John Doe",
                          "age": 30
                        }
                      },
                      {
                        "key": "key2",
                        "value": {
                          "name": "Jane Smith",
                          "age": 28
                        }
                      }
                    ],
                    "results_total": 2
                  },
                  "metadata": {
                    "bucket": "my-bucket",
                    "limit": 10
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/kv/{bucket}/entries/{key}": {
      "get": {
        "tags": [
          "KV Entries"
        ],
        "summary": "Get KV entry",
        "description": "Retrieves a specific entry from a key-value bucket",
        "operationId": "getKVEntry",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.get.kv-entry",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          },
          {
            "$ref": "#/components/parameters/entryKey"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KVEntryResponse"
                },
                "example": {
                  "body": {
                    "key": "my-key",
                    "value": {
                      "name": "John Doe",
                      "age": 30
                    }
                  },
                  "metadata": {
                    "bucket": "my-bucket",
                    "key": "my-key"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "KV Entries"
        ],
        "summary": "Create or update KV entry",
        "description": "Creates or updates a key-value entry in the specified bucket",
        "operationId": "putKVEntry",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.put.kv-entry",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          },
          {
            "$ref": "#/components/parameters/entryKey"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KVEntryValue"
              },
              "example": {
                "name": "John Doe",
                "email": "john@example.com",
                "age": 30
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "KV Entries"
        ],
        "summary": "Delete KV entry",
        "description": "Deletes a specific entry from a key-value bucket",
        "operationId": "deleteKVEntry",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.delete.kv-entry",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          },
          {
            "$ref": "#/components/parameters/entryKey"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/kv/{bucket}/search": {
      "get": {
        "tags": [
          "KV Search"
        ],
        "summary": "Search KV entries",
        "description": "Searches for entries in a KV bucket based on indexed fields",
        "operationId": "searchKVEntries",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.get.search-kv",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          },
          {
            "name": "field",
            "in": "query",
            "description": "Field to search in",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_type",
            "in": "query",
            "description": "Type of search to perform",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "exact",
                "fuzzy",
                "prefix",
                "range"
              ]
            }
          },
          {
            "name": "min",
            "in": "query",
            "description": "Minimum value for range searches",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Maximum value for range searches",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "key": "user123",
                        "value": {
                          "name": "John Doe",
                          "age": 30
                        }
                      }
                    ],
                    "results_total": 1
                  },
                  "metadata": {
                    "bucket": "my-bucket",
                    "field": "name",
                    "search": "John",
                    "index_duration": "3ms",
                    "index_hits": 1
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/kv/{bucket}/search-by-key": {
      "get": {
        "tags": [
          "KV Search"
        ],
        "summary": "Search KV entries by key pattern",
        "description": "Searches for KV entries by key pattern (e.g., 'user*')",
        "operationId": "searchKVByKey",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.get.search-kv-by-key",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Key pattern to search for (supports wildcards)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchByKeyResponse"
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "key": "user123",
                        "value": {
                          "name": "John Doe",
                          "email": "john@example.com"
                        }
                      },
                      {
                        "key": "user456",
                        "value": {
                          "name": "Jane Smith",
                          "email": "jane@example.com"
                        }
                      }
                    ],
                    "results_total": 2
                  },
                  "metadata": {
                    "bucket": "my-bucket",
                    "search": "user*",
                    "hits": 2
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/obj": {
      "get": {
        "tags": [
          "Object Store"
        ],
        "summary": "List all object store buckets",
        "description": "Retrieves a list of all object store buckets",
        "operationId": "getObjectStoreBucketList",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.get.obj-list",
        "responses": {
          "200": {
            "description": "Successfully retrieved object bucket list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketListResponse"
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "name": "obj-bucket1",
                        "description": "First object bucket"
                      },
                      {
                        "name": "obj-bucket2",
                        "description": "Second object bucket"
                      }
                    ],
                    "results_total": 2
                  },
                  "metadata": {
                    "duration": "5ms"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Object Store"
        ],
        "summary": "Create object store bucket",
        "description": "Creates a new object store bucket",
        "operationId": "createObjectStoreBucket",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.post.obj",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateObjectBucketRequest"
              },
              "example": {
                "bucket": "my-obj-bucket",
                "description": "My object store bucket",
                "max_bytes": 104857600,
                "replicas": 3,
                "storage": 0
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/obj/{bucket}": {
      "get": {
        "tags": [
          "Object Store"
        ],
        "summary": "Get an object store bucket",
        "description": "Retrieves detailed information about a specific object store, including its configuration and current state.",
        "operationId": "getObjectStoreBucket",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.get.obj",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved bucket information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectBucketResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Object Store"
        ],
        "summary": "Create or update object store",
        "description": "Creates a new object store bucket if one does not exist or updates it otherwise",
        "operationId": "createOrUpdateObjectStoreBucket",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.put.obj",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateObjectBucketRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Object Store"
        ],
        "summary": "Delete an object store bucket",
        "description": "Deletes an object store bucket and all its contents",
        "operationId": "deleteObjectStoreBucket",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.delete.obj",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/obj/{bucket}/purge": {
      "delete": {
        "tags": [
          "Object Store"
        ],
        "summary": "Purge object store bucket",
        "description": "Purges all data from an object store bucket while keeping the bucket configuration",
        "operationId": "purgeObjectStoreBucket",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.delete.obj-purge",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/obj/{bucket}/entries": {
      "get": {
        "tags": [
          "Object Store"
        ],
        "summary": "List object store entries",
        "description": "Retrieves entries from an object store bucket",
        "operationId": "getObjectStoreEntries",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.get.obj-entries",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of entries to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved entries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectEntriesResponse"
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "key": "object1",
                        "size": 1024
                      },
                      {
                        "key": "object2",
                        "size": 2048
                      }
                    ],
                    "results_total": 2
                  },
                  "metadata": {
                    "bucket": "my-obj-bucket",
                    "limit": 10
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/obj/{bucket}/entries/{key}": {
      "delete": {
        "tags": [
          "Object Store"
        ],
        "summary": "Delete an object store entry",
        "description": "Deletes a specific entry from an object store bucket",
        "operationId": "deleteObjectStoreEntry",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.delete.obj-entry",
        "parameters": [
          {
            "$ref": "#/components/parameters/bucketName"
          },
          {
            "$ref": "#/components/parameters/entryKey"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/streams": {
      "get": {
        "tags": [
          "Streams"
        ],
        "summary": "List all streams",
        "description": "Retrieves a list of all streams",
        "operationId": "getStreamList",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.get.stream-list",
        "responses": {
          "200": {
            "description": "Successfully retrieved stream list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamListResponse"
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "name": "stream1",
                        "subjects": [
                          "events.*"
                        ]
                      },
                      {
                        "name": "stream2",
                        "subjects": [
                          "logs.*"
                        ]
                      }
                    ],
                    "results_total": 2
                  },
                  "metadata": {
                    "duration": "5ms"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Streams"
        ],
        "summary": "Create a new stream",
        "description": "Creates a new stream for message publishing",
        "operationId": "createStream",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.post.stream",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStreamRequest"
              },
              "example": {
                "name": "my-stream",
                "description": "My event stream",
                "subjects": [
                  "events.*",
                  "logs.*"
                ],
                "max_consumers": 5,
                "max_msgs": 1000000,
                "max_bytes": 104857600,
                "discard": 0,
                "max_msgs_per_subject": 1000,
                "max_msg_size": 8192,
                "storage": 0,
                "num_replicas": 3
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/streams/{name}": {
      "get": {
        "tags": [
          "Streams"
        ],
        "summary": "Get information about a stream",
        "description": "Retrieves detailed information about a specific stream, including its configuration and current state. This endpoint provides metrics such as the number of messages, bytes used, first and last sequence numbers, and more.",
        "operationId": "getStream",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.get.stream",
        "parameters": [
          {
            "$ref": "#/components/parameters/streamName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved stream information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Streams"
        ],
        "summary": "Create or update a stream",
        "description": "Creates a new stream or updates an existing stream with the provided configuration. If the stream does not exist, it will be created. If it exists, it will be updated with the new configuration.\n\nNote that some properties cannot be changed after a stream is created, such as the storage type. If you attempt to change these properties, the request will fail with a 400 error.",
        "operationId": "createOrUpdateStream",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.put.stream",
        "parameters": [
          {
            "$ref": "#/components/parameters/streamName"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStreamRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Streams"
        ],
        "summary": "Delete a stream",
        "description": "Deletes a stream with all the messages and consumers attached to it.",
        "operationId": "deleteStream",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.delete.stream",
        "parameters": [
          {
            "$ref": "#/components/parameters/streamName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/stream/{name}/purge": {
      "delete": {
        "tags": [
          "Streams"
        ],
        "summary": "Purge stream messages",
        "description": "Purges messages from a stream with optional filters",
        "operationId": "purgeStream",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.delete.stream-purge",
        "parameters": [
          {
            "$ref": "#/components/parameters/streamName"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurgeStreamRequest"
              },
              "example": {
                "keep": 100,
                "subject": "events.user.*"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/streams/{name}/messages": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Publish message to stream",
        "description": "Publishes a message to a stream",
        "operationId": "publishMessage",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.post.message",
        "parameters": [
          {
            "$ref": "#/components/parameters/streamName"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishMessageRequest"
              },
              "example": {
                "stream": "users_stream",
                "subject": "users.accounting.123",
                "body": {
                  "user_id": "123",
                  "name": "John Doe",
                  "timestamp": "2024-01-20T10:30:00Z"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Messages"
        ],
        "summary": "Deletes stream messages",
        "description": "Deletes messages from a stream by sequence(seq).",
        "operationId": "deleteStreamMessages",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.delete.messages",
        "parameters": [
          {
            "$ref": "#/components/parameters/streamName"
          },
          {
            "name": "sequences",
            "in": "query",
            "description": "Comma-separated list of sequence numbers to delete",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/streams/{name}/search-by-subject": {
      "get": {
        "tags": [
          "Stream Search"
        ],
        "summary": "Search stream messages by subject pattern",
        "description": "Searches for stream messages by subject pattern",
        "operationId": "searchStreamBySubject",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.get.search-stream-by-subject",
        "parameters": [
          {
            "$ref": "#/components/parameters/streamName"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Subject pattern to search for (supports wildcards)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamSearchResponse"
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "subject": "events.created",
                        "data": "..."
                      },
                      {
                        "subject": "events.updated",
                        "data": "..."
                      }
                    ],
                    "results_total": 2
                  },
                  "metadata": {
                    "stream": "my-stream",
                    "search": "events.*",
                    "hits": 2
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/search/{index}": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search an index",
        "description": "Performs a search on an index",
        "operationId": "searchIndex",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.get.search-index",
        "parameters": [
          {
            "name": "index",
            "in": "path",
            "description": "Name of the index to search",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "Field to search in",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_type",
            "in": "query",
            "description": "Type of search to perform",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "exact",
                "fuzzy",
                "prefix",
                "range"
              ]
            }
          },
          {
            "name": "min",
            "in": "query",
            "description": "Minimum value for range searches",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Maximum value for range searches",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort results by",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexSearchResponse"
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "id": "1",
                        "fields": {
                          "name": "John Doe",
                          "age": 30
                        },
                        "score": 0.95
                      }
                    ],
                    "results_total": 1
                  },
                  "metadata": {
                    "field": "name",
                    "search": "John",
                    "index_duration": "3ms",
                    "index_hits": 1
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/storage/indexers": {
      "get": {
        "tags": [
          "Indexers"
        ],
        "summary": "List all indexers",
        "description": "Retrieves a list of all indexers",
        "operationId": "getIndexerList",
        "x-resource-type": "service",
        "x-resource": "microstrate.storage.get.indexer-list",
        "responses": {
          "200": {
            "description": "Successfully retrieved indexer list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexerListResponse"
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "name": "index1",
                        "mappings": [
                          {
                            "field": "name",
                            "field_type": "text"
                          },
                          {
                            "field": "age",
                            "field_type": "number"
                          }
                        ]
                      },
                      {
                        "name": "index2",
                        "mappings": [
                          {
                            "field": "title",
                            "field_type": "text"
                          }
                        ]
                      }
                    ],
                    "results_total": 2
                  },
                  "metadata": {
                    "duration": "10ms"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  }
}