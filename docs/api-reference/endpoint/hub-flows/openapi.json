{
  "openapi": "3.0.0",
  "info": {
    "title": "Microstrate Gateway",
    "description": "API for managing collections, nodes, and workflows in Microstrate Hub",
    "version": "0.1.0",
    "contact": {
      "name": "Microstrate Support"
    }
  },
  "servers": [
    {
      "url": "https://api.staging.microstrate.io",
      "description": "Staging API server"
    },
    {
      "url": "https://api.microstrate.io",
      "description": "Production API server"
    }
  ],
  "paths": {
    "/hub/collections": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Create a new collection",
        "description": "Creates a new collection for organizing nodes or workflows",
        "operationId": "createCollection",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.post.collection",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCollectionRequest"
              },
              "example": {
                "name": "MyNewCollection",
                "collection_type": "node",
                "description": "Collection for storing node templates"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Collection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCollectionResponse"
                },
                "example": {
                  "subject": "ms.hub.config.collection.node.1234567890",
                  "name": "MyNewCollection",
                  "collection_type": "node",
                  "topic": "1234567890",
                  "description": "Collection for storing node templates",
                  "modified": 1651395678
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "NameRequired": {
                    "value": {
                      "error": "a name is required"
                    }
                  },
                  "InvalidType": {
                    "value": {
                      "error": "invalid collection type. Valid types are: node, workflow"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Collection already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "collection exists:ms.hub.config.collection.node.1234567890"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "List collections",
        "description": "Retrieves a list of collections",
        "operationId": "getCollection",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.get.list-collections",
        "parameters": [
          {
            "name": "collection_type",
            "in": "query",
            "description": "List only 'node' or only 'workflow' collections. If this parameter is omitted, both will be listed",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "node",
                "workflow"
              ]
            },
            "example": "node"
          }
        ],
        "responses": {
          "200": {
            "description": "Collection retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "results",
                    "results_total"
                  ],
                  "properties": {
                    "results": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "description": "Array of results",
                          "items": {
                            "$ref": "#/components/schemas/GetCollectionResponse"
                          }
                        },
                        "results_total": {
                          "type": "integer",
                          "description": "Number of results"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "results_total": 2,
                  "results": [
                    {
                      "collection_type": "node",
                      "description": "test",
                      "modified": 1746655609,
                      "name": "Test",
                      "sequence": 16,
                      "subject": "ms.hub.config.collection.node.805092869",
                      "topic": "805092869",
                      "type": "created"
                    },
                    {
                      "collection_type": "node",
                      "description": "",
                      "modified": 1747731829,
                      "name": "Business Flow Nodes",
                      "sequence": 31,
                      "subject": "ms.hub.config.collection.node.1025086208",
                      "topic": "1025086208",
                      "type": "created"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InvalidSubject": {
                    "value": {
                      "error": "invalid subject"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hub/collections/{collection_type}/{collection_topic}": {
      "parameters": [
        {
          "name": "collection_type",
          "in": "query",
          "description": "List only 'node' or only 'workflow' collections. If this parameter is omitted, both will be listed",
          "required": false,
          "schema": {
            "type": "string",
            "enum": [
              "node",
              "workflow"
            ]
          },
          "example": "node"
        },
        {
          "name": "collection_topic",
          "in": "path",
          "description": "The topic is a hash of the name that was used when a collection was created",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "1234567890"
        }
      ],
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Get a collection",
        "description": "Retrieves a specific collection",
        "operationId": "getCollection",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.get.collection",
        "responses": {
          "200": {
            "description": "Collection retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCollectionResponse"
                },
                "example": {
                  "collection_type": "workflow",
                  "description": "",
                  "modified": 1747956678,
                  "name": "Business Flows",
                  "sequence": 124,
                  "subject": "ms.hub.config.collection.workflow.1508781670",
                  "topic": "1508781670",
                  "type": "created"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InvalidSubject": {
                    "value": {
                      "error": "invalid subject"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Collections"
        ],
        "summary": "Update a Workflow or Node collection",
        "description": "Updates an existing collection's properties",
        "operationId": "updateFlowOrNodeCollection",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.patch.collection",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCollectionRequest"
              },
              "example": {
                "subject": "ms.hub.config.collection.node.1234567890",
                "description": "Updated collection description"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Collection updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "message": "success"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "SubjectRequired": {
                    "value": {
                      "error": "a subject is required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Collection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "collection does not exists"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Collections"
        ],
        "summary": "Delete a collection",
        "description": "Deletes a specific collection by subject",
        "operationId": "deleteCollection",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.delete.collection",
        "parameters": [
          {
            "name": "move_resources_to_collection",
            "in": "query",
            "description": "A topic of another collection where resources can be moved",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "993267890"
          }
        ],
        "responses": {
          "200": {
            "description": "Collection deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "message": "success"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InvalidSubject": {
                    "value": {
                      "error": "invalid subject"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "CollectionNotFount": {
                    "value": {
                      "error": "collection not found"
                    }
                  },
                  "NewResourceCollectionNotFount": {
                    "value": {
                      "error": "the new resource collection is not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hub/nodes": {
      "post": {
        "tags": [
          "Nodes"
        ],
        "summary": "Create a new node",
        "description": "Creates a new node template within a collection",
        "operationId": "createNode",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.post.node",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNodeRequest"
              },
              "example": {
                "collection": "ms.hub.config.collection.node.1234567890",
                "data": {
                  "name": "MyNode",
                  "node_type": "function",
                  "subject": "microstrate-function.some-function",
                  "payload": {
                    "param1": "value1",
                    "param2": "value2"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Node created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateNodeResponse"
                },
                "example": {
                  "subject": "ms.hub.config.node.1234567890.98765432",
                  "collection": "ms.hub.config.collection.node.1234567890",
                  "data": {
                    "id": "some-id",
                    "name": "MyNode",
                    "node_type": "function",
                    "subject": "microstrate-function.some-function",
                    "payload": {
                      "param1": "value1",
                      "param2": "value2"
                    }
                  },
                  "type": "created",
                  "modified": 1651395678
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "NameRequired": {
                    "value": {
                      "error": "data.name is required"
                    }
                  },
                  "CollectionRequired": {
                    "value": {
                      "error": "a collection subject is required"
                    }
                  },
                  "InvalidCollection": {
                    "value": {
                      "error": "invalid collection subject"
                    }
                  },
                  "PayloadRequired": {
                    "value": {
                      "error": "payload is required"
                    }
                  },
                  "FunctionSubjectRequired": {
                    "value": {
                      "error": "a function subject is required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "CollectionNotFound": {
                    "value": {
                      "error": "collection not found"
                    }
                  },
                  "FunctionNotFound": {
                    "value": {
                      "error": "function not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Node already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "node exists:ms.hub.config.node.1234567890.98765432"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Nodes"
        ],
        "summary": "List node templates",
        "description": "Retrieves a list of node templates, optionally filtered by collection and type",
        "operationId": "listNodeTemplates",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.get.list-nodes",
        "parameters": [
          {
            "name": "collection_topic",
            "in": "query",
            "description": "Collection topic",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "1234567890"
          }
        ],
        "responses": {
          "200": {
            "description": "Nodes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNodesResponse"
                },
                "example": {
                  "results_total": 1,
                  "results": [
                    {
                      "subject": "ms.hub.config.node.1234567890.98765432",
                      "collection": "ms.hub.config.collection.node.1234567890",
                      "data": {
                        "id": "some-id",
                        "name": "MyNode",
                        "node_type": "function",
                        "subject": "microstrate-function.some-function",
                        "payload": {
                          "param1": "value1",
                          "param2": "value2"
                        }
                      },
                      "type": "created",
                      "modified": 1651395678
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "invalid request"
                }
              }
            }
          }
        }
      }
    },
    "/hub/nodes/{collection_topic}/{node_topic}": {
      "parameters": [
        {
          "name": "collection_topic",
          "in": "path",
          "description": "Collection topic",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "1234567890"
        },
        {
          "name": "node_topic",
          "in": "path",
          "description": "Node topic - hash of the names the node was created with",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "98765432"
        }
      ],
      "get": {
        "tags": [
          "Nodes"
        ],
        "summary": "Get a node",
        "description": "Retrieves a specific node by subject",
        "operationId": "getNode",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.get.node",
        "responses": {
          "200": {
            "description": "Node retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNodeResponse"
                },
                "example": {
                  "subject": "ms.hub.config.node.1234567890.98765432",
                  "data": {
                    "id": "node-id",
                    "name": "MyNode",
                    "description": "Node description",
                    "node_type": "function",
                    "subject": "microstrate-function.some-function",
                    "payload": {
                      "param1": "value1",
                      "param2": "value2"
                    }
                  },
                  "modified": 1651395678
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InvalidSubject": {
                    "value": {
                      "error": "invalid subject"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Nodes"
        ],
        "summary": "Update a node",
        "description": "Updates an existing node's properties",
        "operationId": "updateNode",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.patch.node",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNodeRequest"
              },
              "example": {
                "subject": "ms.hub.config.node.1234567890.98765432",
                "data": {
                  "name": "UpdatedNode",
                  "description": "Updated node description",
                  "node_type": "function",
                  "payload": {
                    "param1": "updated-value1",
                    "param2": "updated-value2"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Node updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "message": "success"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "SubjectRequired": {
                    "value": {
                      "error": "a subject is required"
                    }
                  },
                  "FunctionNotFound": {
                    "value": {
                      "error": "function not found"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "FlowNotFound": {
                    "value": {
                      "error": "flow not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Nodes"
        ],
        "summary": "Delete a node",
        "description": "Deletes a specific node by subject",
        "operationId": "deleteNode",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.delete.node",
        "responses": {
          "200": {
            "description": "Node deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "message": "success"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InvalidSubject": {
                    "value": {
                      "error": "invalid subject"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hub/nodes/batch": {
      "patch": {
        "tags": [
          "Nodes"
        ],
        "summary": "Update multiple nodes",
        "description": "Updates multiple existing nodes in a single request",
        "operationId": "updateMultipleNodes",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.patch.nodes",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMultiNodeRequest"
              },
              "example": [
                {
                  "subject": "ms.hub.config.node.1234567890.98765432",
                  "data": {
                    "name": "UpdatedNode1",
                    "node_type": "function",
                    "subject": "microstrate-function.function1",
                    "payload": {
                      "param1": "value1"
                    }
                  }
                },
                {
                  "subject": "ms.hub.config.node.1234567890.12345678",
                  "data": {
                    "name": "UpdatedNode2",
                    "node_type": "map",
                    "payload": {
                      "param2": "value2"
                    }
                  }
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "All nodes updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMultiNodeResponse"
                },
                "example": [
                  {
                    "node": {
                      "subject": "ms.hub.config.node.1234567890.98765432",
                      "data": {
                        "name": "UpdatedNode1",
                        "node_type": "function",
                        "subject": "microstrate-function.function1",
                        "payload": {
                          "param1": "value1"
                        }
                      }
                    },
                    "result": "succes"
                  },
                  {
                    "node": {
                      "subject": "ms.hub.config.node.1234567890.12345678",
                      "data": {
                        "name": "UpdatedNode2",
                        "node_type": "map",
                        "payload": {
                          "param2": "value2"
                        }
                      }
                    },
                    "result": "succes"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Some nodes failed to update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMultiNodeErrorResponse"
                },
                "example": {
                  "body": [
                    {
                      "node": {
                        "subject": "ms.hub.config.node.1234567890.98765432",
                        "data": {
                          "name": "UpdatedNode1",
                          "node_type": "function",
                          "subject": "microstrate-function.function1",
                          "payload": {
                            "param1": "value1"
                          }
                        }
                      },
                      "result": "succes"
                    },
                    {
                      "node": {
                        "subject": "ms.hub.config.node.1234567890.12345678",
                        "data": {
                          "name": "UpdatedNode2",
                          "node_type": "function",
                          "subject": "microstrate-function.non-existing-function",
                          "payload": {
                            "param2": "value2"
                          }
                        }
                      },
                      "result": "error: function not found"
                    }
                  ],
                  "error": "some nodes failed to upsert"
                }
              }
            }
          }
        }
      }
    },
    "/hub/workflows": {
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Create a new workflow",
        "description": "Creates a new workflow for defining node sequences",
        "operationId": "createWorkflow",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.post.workflow",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkflowRequest"
              },
              "example": {
                "name": "MyWorkflow",
                "collection": "ms.hub.config.collection.workflow.1234567890",
                "description": "A workflow that processes data",
                "config": {
                  "nodes": [
                    {
                      "data": {
                        "id": "start",
                        "name": "Start",
                        "node_type": "map",
                        "payload": {
                          "message": "Start of workflow"
                        }
                      }
                    },
                    {
                      "data": {
                        "id": "process",
                        "name": "Process",
                        "node_type": "function",
                        "subject": "microstrate-function.process-function",
                        "payload": {
                          "input": "{start}"
                        }
                      }
                    }
                  ],
                  "edges": [
                    {
                      "source": "start",
                      "target": "process",
                      "id": "edge1"
                    }
                  ],
                  "result": "process"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Workflow created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWorkflowResponse"
                },
                "example": {
                  "subject": "ms.hub.config.workflow.draft.1234567890.98765432",
                  "name": "MyWorkflow",
                  "collection": "ms.hub.config.collection.workflow.1234567890",
                  "description": "A workflow that processes data",
                  "config": {
                    "nodes": [
                      {
                        "data": {
                          "id": "start",
                          "name": "Start",
                          "node_type": "map",
                          "payload": {
                            "message": "Start of workflow"
                          }
                        }
                      },
                      {
                        "data": {
                          "id": "process",
                          "name": "Process",
                          "node_type": "function",
                          "subject": "microstrate-function.process-function",
                          "payload": {
                            "input": "{start}"
                          }
                        }
                      }
                    ],
                    "edges": [
                      {
                        "source": "start",
                        "target": "process",
                        "id": "edge1"
                      }
                    ],
                    "result": "process"
                  },
                  "modified": 1651395678
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "NameRequired": {
                    "value": {
                      "error": "a name is required"
                    }
                  },
                  "CollectionRequired": {
                    "value": {
                      "error": "a collection subject is required"
                    }
                  },
                  "InvalidCollection": {
                    "value": {
                      "error": "invalid collection subject"
                    }
                  },
                  "InvalidNodeId": {
                    "value": {
                      "error": "invalid ID. An ID must start with a letter or underscore and must contain only alphanumeric characters, hyphens and underscores"
                    }
                  },
                  "ReservedWord": {
                    "value": {
                      "error": "cannot use a reserved word as a node id:trigger"
                    }
                  },
                  "PayloadRequired": {
                    "value": {
                      "error": "payload is required:nodeId"
                    }
                  },
                  "FunctionSubjectRequired": {
                    "value": {
                      "error": "a subject is required for the function:nodeId"
                    }
                  },
                  "FlowSubjectRequired": {
                    "value": {
                      "error": "a subject is required for the flow:nodeId"
                    }
                  },
                  "DuplicateNodeId": {
                    "value": {
                      "error": "duplicate node id found:nodeId"
                    }
                  },
                  "EdgeSourceTargetRequired": {
                    "value": {
                      "error": "source and target required on edge: source->target"
                    }
                  },
                  "SourceNodeNotFound": {
                    "value": {
                      "error": "source node not found:source->target"
                    }
                  },
                  "TargetNodeNotFound": {
                    "value": {
                      "error": "target node not found:source->target"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "CollectionNotFound": {
                    "value": {
                      "error": "collection not found"
                    }
                  },
                  "FunctionNotFound": {
                    "value": {
                      "error": "function not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Workflow already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "workflow exists:ms.hub.config.workflow.draft.1234567890.98765432"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "List workflows",
        "description": "Retrieves a list of workflows, optionally filtered by collection and type",
        "operationId": "listWorkflows",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.get.list-workflows",
        "parameters": [
          {
            "name": "collection_topic",
            "in": "query",
            "description": "Collection topic",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "1234567890"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter workflows by type. If not specified, all types will be listed",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "published"
              ]
            },
            "example": "draft"
          }
        ],
        "responses": {
          "200": {
            "description": "Workflows retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWorkflowsResponse"
                },
                "example": {
                  "results": [
                    {
                      "subject": "ms.hub.config.workflow.draft.1234567890.98765432",
                      "name": "Workflow1",
                      "description": "First workflow",
                      "config": {
                        "nodes": [],
                        "edges": []
                      },
                      "modified": 1651395678
                    },
                    {
                      "subject": "ms.hub.config.workflow.draft.1234567890.12345678",
                      "name": "Workflow2",
                      "description": "Second workflow",
                      "config": {
                        "nodes": [],
                        "edges": []
                      },
                      "modified": 1651395679
                    }
                  ],
                  "results_total": 2
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "invalid request"
                }
              }
            }
          }
        }
      }
    },
    "/hub/workflows/{collection_topic}/{flow_topic}": {
      "parameters": [
        {
          "name": "collection_topic",
          "in": "path",
          "description": "Collection topic",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "234234234"
        },
        {
          "name": "flow_topic",
          "in": "path",
          "description": "Flow topic - hash of the names the node was created with",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "21312322"
        }
      ],
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get a workflow",
        "description": "Retrieves a specific workflow by subject",
        "operationId": "getWorkflow",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.get.workflow",
        "responses": {
          "200": {
            "description": "Workflow retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkflowResponse"
                },
                "example": {
                  "subject": "ms.hub.config.workflow.1234567890.98765432",
                  "name": "MyWorkflow",
                  "description": "Workflow description",
                  "config": {
                    "nodes": [
                      {
                        "data": {
                          "id": "start",
                          "name": "Start",
                          "node_type": "map",
                          "payload": {
                            "message": "Start of workflow"
                          }
                        }
                      },
                      {
                        "data": {
                          "id": "process",
                          "name": "Process",
                          "node_type": "function",
                          "subject": "microstrate-function.process-function",
                          "payload": {
                            "input": "{start}"
                          }
                        }
                      }
                    ],
                    "edges": [
                      {
                        "source": "start",
                        "target": "process",
                        "id": "edge1"
                      }
                    ],
                    "result": "process"
                  },
                  "modified": 1651395678
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InvalidSubject": {
                    "value": {
                      "error": "invalid subject"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Workflows"
        ],
        "summary": "Update a workflow",
        "description": "Updates an existing draft workflow's properties",
        "operationId": "updateWorkflow",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.patch.workflow",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkflowRequest"
              },
              "example": {
                "name": "UpdatedWorkflow",
                "description": "Updated workflow description",
                "config": {
                  "nodes": [
                    {
                      "data": {
                        "id": "start",
                        "name": "Start",
                        "node_type": "map",
                        "payload": {
                          "message": "Updated start of workflow"
                        }
                      }
                    },
                    {
                      "data": {
                        "id": "process",
                        "name": "Process",
                        "node_type": "function",
                        "subject": "microstrate-function.updated-process-function",
                        "payload": {
                          "input": "{start}"
                        }
                      }
                    }
                  ],
                  "edges": [
                    {
                      "source": "start",
                      "target": "process",
                      "id": "edge1"
                    }
                  ],
                  "result": "process"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateWorkflowResponse"
                },
                "example": {
                  "subject": "ms.hub.config.workflow.draft.1234567890.98765432",
                  "name": "UpdatedWorkflow",
                  "description": "Updated workflow description",
                  "config": {
                    "nodes": [
                      {
                        "data": {
                          "id": "start",
                          "name": "Start",
                          "node_type": "map",
                          "payload": {
                            "message": "Updated start of workflow"
                          }
                        }
                      },
                      {
                        "data": {
                          "id": "process",
                          "name": "Process",
                          "node_type": "function",
                          "subject": "microstrate-function.updated-process-function",
                          "payload": {
                            "input": "{start}"
                          }
                        }
                      }
                    ],
                    "edges": [
                      {
                        "source": "start",
                        "target": "process",
                        "id": "edge1"
                      }
                    ],
                    "result": "process"
                  },
                  "modified": 1651395678
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "SubjectRequired": {
                    "value": {
                      "error": "subject is required"
                    }
                  },
                  "InvalidDraftSubject": {
                    "value": {
                      "error": "a valid draft subject is required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Workflow not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": "workflow not found"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Workflows"
        ],
        "summary": "Delete a workflow",
        "description": "Deletes a specific workflow by subject",
        "operationId": "deleteWorkflow",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.delete.workflow",
        "responses": {
          "200": {
            "description": "Workflow deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "message": "success"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InvalidSubject": {
                    "value": {
                      "error": "invalid subject"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hub/workflows/{collection_topic}/{flow_topic}/run": {
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Run a workflow",
        "description": "Executes a workflow with the specified trigger data",
        "operationId": "runWorkflow",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.post.workflow-run",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunWorkflowRequest"
              },
              "examples": {
                "SingleTrigger": {
                  "value": {
                    "subject": "ms.hub.config.workflow.1234567890.98765432",
                    "trigger": {
                      "data": "some input data",
                      "timestamp": 1651395678
                    },
                    "enable_log": true,
                    "await": true
                  }
                },
                "MultipleTriggers": {
                  "value": {
                    "subject": "ms.hub.config.workflow.1234567890.98765432",
                    "triggers": [
                      {
                        "data": "input data 1",
                        "timestamp": 1651395678
                      },
                      {
                        "data": "input data 2",
                        "timestamp": 1651395679
                      }
                    ],
                    "enable_log": true,
                    "await": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunWorkflowResponse"
                },
                "examples": {
                  "Awaited": {
                    "value": {
                      "trackingId": "ms.hub.run.abcdef-1234-5678-90ab-cdef12345678.ms.hub.config.workflow.1234567890.98765432",
                      "result": {
                        "outputData": "processed result"
                      }
                    }
                  },
                  "NotAwaited": {
                    "value": {
                      "trackingId": "ms.hub.run.abcdef-1234-5678-90ab-cdef12345678.ms.hub.config.workflow.1234567890.98765432"
                    }
                  },
                  "Debounced": {
                    "value": {
                      "body": "debounced run: key-value"
                    }
                  },
                  "Ordered": {
                    "value": "ordered run: key-value"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "NoTrigger": {
                    "value": {
                      "error": "no trigger specified"
                    }
                  },
                  "ArchivedFlow": {
                    "value": {
                      "error": "cannot run an archived flow"
                    }
                  },
                  "MissingConfig": {
                    "value": {
                      "error": "missing configuration"
                    }
                  },
                  "NodesRequired": {
                    "value": {
                      "error": "nodes are required"
                    }
                  },
                  "DebounceError": {
                    "value": {
                      "error": "failed to resolve debounceOn"
                    }
                  },
                  "OrderOnError": {
                    "value": {
                      "error": "failed to resolve orderOn"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hub/workflows/publish": {
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Publish a workflow",
        "description": "Publishes a draft workflow to make it available for execution",
        "operationId": "publishWorkflow",
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.post.workflow-publish",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishWorkflowRequest"
              },
              "example": {
                "subject": "ms.hub.config.workflow.draft.1234567890.98765432"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow published successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "message": "success"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InvalidSubject": {
                    "value": {
                      "error": "a valid draft subject is required"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/integrations/oauth-config": {
      "get": {
        "summary": "List OAuth configurations",
        "description": "Get list of all OAuth configurations",
        "tags": [
          "Oauth"
        ],
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.get.integrations.oauth-config",
        "responses": {
          "200": {
            "description": "List of OAuth configurations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthConfigList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/integrations/{integration_id}/oauth-config": {
      "get": {
        "summary": "Get OAuth configuration",
        "description": "Get OAuth configuration for a specific integration",
        "tags": [
          "Oauth"
        ],
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.get.integrations.{integration_id}.oauth-config",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Integration identifier",
            "example": "slack"
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthConfigBasicData"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/integrations/oauth-connections": {
      "get": {
        "summary": "List OAuth connections",
        "description": "Get list of OAuth connections for the authenticated user",
        "tags": [
          "Oauth"
        ],
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.get.integrations.oauth-connections",
        "responses": {
          "200": {
            "description": "List of OAuth connections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthConnectionsList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/integrations/{integration_id}/oauth-token/{connection_id}": {
      "get": {
        "summary": "Get OAuth connection",
        "description": "Get OAuth connection details for a specific integration and connection",
        "tags": [
          "Oauth"
        ],
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.get.integrations.{integration_id}.oauth-token.{connection_id}",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Integration identifier",
            "example": "xero"
          },
          {
            "name": "connection_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Connection identifier",
            "example": "demo"
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth connection details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthConnection"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/integrations/{integration_id}/oauth-connections/{connection_id}": {
      "delete": {
        "summary": "Delete OAuth connection",
        "description": "Delete an OAuth connection for a specific integration",
        "tags": [
          "Oauth"
        ],
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.delete.integrations.{integration_id}.oauth-connections.{connection_id}",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Integration identifier",
            "example": "xero"
          },
          {
            "name": "connection_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Connection identifier",
            "example": "demo"
          }
        ],
        "responses": {
          "200": {
            "description": "Connection deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthConnection"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/integrations/{integration_id}/oauth-login/{connection_id}": {
      "get": {
        "summary": "Initiate OAuth login",
        "description": "Get OAuth authorization URL to initiate login flow",
        "tags": [
          "Oauth"
        ],
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.get.integrations.{integration_id}.oauth-login.{connection_id}",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Integration identifier",
            "example": "slack"
          },
          {
            "name": "connection_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Connection identifier",
            "example": "team-workspace"
          },
          {
            "name": "scopes",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A list of comma-separated scopes - url-encoded",
            "example": "write%2Cadmin.apps%3Aread"
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth authorization URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/integrations/oauth-callback": {
      "get": {
        "summary": "OAuth callback",
        "description": "Handle OAuth callback after user authorization",
        "tags": [
          "Oauth"
        ],
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.get.integrations.oauth-callback",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "OAuth authorization code",
            "example": "4/0AX4XfWgq1P2fJdK8V9L3m..."
          },
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "OAuth state parameter",
            "example": "abc123xyz789def456ghi"
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth token received and saved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthConnection"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/integrations/{integration_id}/oauth-refresh-token/{connection_id}": {
      "get": {
        "summary": "Refresh OAuth token",
        "description": "Refresh an OAuth access token using the refresh token",
        "tags": [
          "Oauth"
        ],
        "x-resource-type": "service",
        "x-resource": "microstrate.hub.get.integrations.{integration_id}.oauth-refresh-token.{connection_id}",
        "parameters": [
          {
            "name": "integration_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Integration identifier",
            "example": "xero"
          },
          {
            "name": "connection_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Connection identifier",
            "example": "maria"
          },
          {
            "name": "refresh_token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Refresh token",
            "example": "pSn5h..."
          }
        ],
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthConnection"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateCollectionRequest": {
        "type": "object",
        "required": [
          "name",
          "collection_type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the collection"
          },
          "collection_type": {
            "type": "string",
            "enum": [
              "node",
              "workflow"
            ],
            "description": "Type of the collection (node or workflow)"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the collection"
          }
        }
      },
      "CreateCollectionResponse": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Subject identifier for the collection"
          },
          "name": {
            "type": "string",
            "description": "Name of the collection"
          },
          "collection_type": {
            "type": "string",
            "description": "Type of the collection (node or workflow)"
          },
          "topic": {
            "type": "string",
            "description": "Hash of the collection name"
          },
          "description": {
            "type": "string",
            "description": "Description of the collection"
          },
          "modified": {
            "$ref": "#/components/schemas/Modified"
          }
        }
      },
      "CreateNodeRequest": {
        "type": "object",
        "required": [
          "collection",
          "data"
        ],
        "properties": {
          "collection": {
            "type": "string",
            "description": "Subject of the collection this node belongs to"
          },
          "data": {
            "$ref": "#/components/schemas/NodeData"
          }
        }
      },
      "CreateNodeResponse": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Subject identifier for the node"
          },
          "collection": {
            "type": "string",
            "description": "Subject of the collection this node belongs to"
          },
          "data": {
            "type": "object",
            "description": "Node data"
          },
          "type": {
            "type": "string",
            "description": "Action type (created)"
          },
          "modified": {
            "$ref": "#/components/schemas/Modified"
          }
        }
      },
      "NodeData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the node"
          },
          "name": {
            "type": "string",
            "description": "Name of the node"
          },
          "description": {
            "type": "string",
            "description": "Description of the node"
          },
          "node_type": {
            "type": "string",
            "enum": [
              "function",
              "flow",
              "condition",
              "map",
              "eval",
              "integration"
            ],
            "description": "## Node Types\n\n### 1. `function`\n**Definition**:  \nA **Hydra function node** used to provide a *subject* or perform a custom computation. It encapsulates reusable logic defined within the Hydra platform.\n\n### 2. `flow`\n**Definition**:  \nA node that **invokes another flow**, either **synchronously** or **asynchronously**, enabling flow modularization and reuse.\n\n### 3. `condition`\n**Definition**:  \nA **branching node** that evaluates a condition to determine the **flow of execution**, similar to `if`/`else` logic in programming.\n\n### 4. `map`\n**Definition**:  \nA **data transformation node** used to **reshape or remap the payload**, allowing the flow to adapt the structure of data as it progresses.\n\n### 5. `eval`\n**Definition**:  \nExecutes **simple JavaScript code** to dynamically **evaluate expressions**, perform calculations, or manipulate data inline within the flow.\n\n### 6. `integration`\n**Definition**:  \nSimilar to a `function` node, but specifically tied to **predefined APIs**. It uses an HTTP-like interface and references **a known set of external services** managed by the platform."
          },
          "subject": {
            "type": "string",
            "description": "Subject identifier for function or flow node types"
          },
          "payload": {
            "type": "object",
            "description": "Payload data for the node"
          },
          "response_map": {
            "type": "object",
            "description": "Mapping for response transformation"
          },
          "options": {
            "type": "object",
            "description": "Node execution options"
          },
          "await": {
            "type": "boolean",
            "description": "Whether to wait for completion"
          }
        }
      },
      "Edge": {
        "type": "object",
        "required": [
          "source",
          "target"
        ],
        "properties": {
          "source": {
            "type": "string",
            "description": "ID of the source node"
          },
          "target": {
            "type": "string",
            "description": "ID of the target node"
          },
          "id": {
            "type": "string",
            "description": "Optional unique identifier for the edge"
          },
          "sourceHandle": {
            "type": "string",
            "description": "Optional source handle identifier"
          },
          "targetHandle": {
            "type": "string",
            "description": "Optional target handle identifier"
          }
        }
      },
      "WorkflowConfig": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/NodeData"
                },
                "position": {
                  "type": "object",
                  "description": "Visual position of the node in the workflow editor"
                },
                "style": {
                  "type": "object",
                  "description": "Visual styling of the node"
                }
              }
            },
            "description": "Array of nodes in the workflow"
          },
          "edges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Edge"
            },
            "description": "Array of edges connecting nodes in the workflow"
          },
          "static": {
            "type": "object",
            "description": "Static data available to all nodes in the workflow"
          },
          "result": {
            "type": "string",
            "description": "Expression to determine the final result of the workflow"
          },
          "options": {
            "type": "object",
            "properties": {
              "run_type": {
                "type": "string",
                "enum": [
                  "debounced",
                  "ordered"
                ],
                "description": "Execution mode for the workflow"
              },
              "order_on": {
                "type": "string",
                "description": "Field to order workflow executions by"
              },
              "debounce_on": {
                "type": "string",
                "description": "Field to debounce workflow executions on"
              },
              "debounce_time": {
                "type": "integer",
                "description": "Debounce time in milliseconds"
              },
              "debounce_max": {
                "type": "integer",
                "description": "Maximum debounce time in milliseconds"
              }
            }
          }
        }
      },
      "CreateWorkflowRequest": {
        "type": "object",
        "required": [
          "name",
          "collection"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the workflow"
          },
          "collection": {
            "type": "string",
            "description": "Subject of the collection this workflow belongs to"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the workflow"
          },
          "config": {
            "$ref": "#/components/schemas/WorkflowConfig"
          }
        }
      },
      "CreateWorkflowResponse": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Subject identifier for the workflow"
          },
          "name": {
            "type": "string",
            "description": "Name of the workflow"
          },
          "collection": {
            "type": "string",
            "description": "Subject of the collection this workflow belongs to"
          },
          "description": {
            "type": "string",
            "description": "Description of the workflow"
          },
          "config": {
            "$ref": "#/components/schemas/WorkflowConfig"
          },
          "modified": {
            "$ref": "#/components/schemas/Modified"
          }
        }
      },
      "RunWorkflowRequest": {
        "type": "object",
        "required": [
          "subject"
        ],
        "properties": {
          "subject": {
            "type": "string",
            "description": "Subject of the workflow to run",
            "example": "ms.hub.config.workflow.draft.1234567890.98765432"
          },
          "trigger": {
            "type": "object",
            "description": "Trigger data for workflow execution (use either trigger or triggers)"
          },
          "triggers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Multiple trigger data sets for parallel workflow execution"
          },
          "enable_log": {
            "type": "boolean",
            "description": "Whether to enable logging of workflow execution",
            "default": false
          },
          "await": {
            "type": "boolean",
            "description": "Whether to wait for workflow completion",
            "default": false
          }
        }
      },
      "RunWorkflowResponse": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "trackingId": {
                "type": "string",
                "description": "ID for tracking the workflow execution"
              },
              "result": {
                "type": "object",
                "description": "Result of the workflow execution"
              }
            }
          },
          {
            "type": "string",
            "description": "Status message for debounced or ordered executions"
          }
        ]
      },
      "PublishWorkflowRequest": {
        "type": "object",
        "required": [
          "subject"
        ],
        "properties": {
          "subject": {
            "type": "string",
            "description": "Subject of the draft workflow to publish"
          }
        }
      },
      "UpdateCollectionRequest": {
        "type": "object",
        "required": [
          "subject"
        ],
        "properties": {
          "subject": {
            "type": "string",
            "description": "Subject of the collection to update"
          },
          "description": {
            "type": "string",
            "description": "Updated description of the collection"
          }
        }
      },
      "UpdateNodeRequest": {
        "type": "object",
        "required": [
          "subject",
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NodeData"
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the node is archived"
          }
        }
      },
      "UpdateMultiNodeRequest": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/UpdateNodeRequest"
        }
      },
      "UpdateMultiNodeResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "node": {
              "$ref": "#/components/schemas/UpdateNodeRequest"
            },
            "result": {
              "type": "string",
              "description": "Result of the update operation"
            }
          }
        }
      },
      "UpdateMultiNodeErrorResponse": {
        "type": "object",
        "properties": {
          "body": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "node": {
                  "$ref": "#/components/schemas/UpdateNodeRequest"
                },
                "result": {
                  "type": "string",
                  "description": "Result of the update operation with error messages"
                }
              }
            }
          },
          "error": {
            "type": "string",
            "description": "General error message"
          }
        }
      },
      "UpdateWorkflowRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the workflow"
          },
          "description": {
            "type": "string",
            "description": "Updated description of the workflow"
          },
          "config": {
            "$ref": "#/components/schemas/WorkflowConfig"
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the workflow is archived"
          }
        }
      },
      "UpdateWorkflowResponse": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Subject identifier for the workflow"
          },
          "name": {
            "type": "string",
            "description": "Name of the workflow"
          },
          "description": {
            "type": "string",
            "description": "Description of the workflow"
          },
          "config": {
            "$ref": "#/components/schemas/WorkflowConfig"
          },
          "modified": {
            "$ref": "#/components/schemas/Modified"
          }
        }
      },
      "GetCollectionResponse": {
        "type": "object",
        "required": [
          "name",
          "topic",
          "subject",
          "sequence",
          "type",
          "modified"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the collection"
          },
          "collection_type": {
            "type": "string",
            "description": "Type of the collection (node or workflow)"
          },
          "topic": {
            "type": "string",
            "description": "Hash of the collection name"
          },
          "description": {
            "type": "string",
            "description": "Description of the collection"
          },
          "subject": {
            "type": "string",
            "description": "Subject identifier for the collection"
          },
          "sequence": {
            "type": "integer",
            "description": "The sequence number of the last message for this collection on the stream"
          },
          "modified": {
            "$ref": "#/components/schemas/Modified"
          },
          "type": {
            "type": "string",
            "description": "Last event type - created or updated",
            "enum": [
              "created",
              "updated"
            ]
          }
        }
      },
      "Modified": {
        "type": "integer",
        "description": "Timestamp of last modification"
      },
      "GetNodeResponse": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Subject identifier for the node"
          },
          "data": {
            "$ref": "#/components/schemas/NodeData"
          },
          "modified": {
            "$ref": "#/components/schemas/Modified"
          }
        }
      },
      "GetWorkflowResponse": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Subject identifier for the workflow"
          },
          "name": {
            "type": "string",
            "description": "Name of the workflow"
          },
          "description": {
            "type": "string",
            "description": "Description of the workflow"
          },
          "config": {
            "$ref": "#/components/schemas/WorkflowConfig"
          },
          "modified": {
            "$ref": "#/components/schemas/Modified"
          }
        }
      },
      "ListNodesResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "subject": {
                  "type": "string",
                  "description": "Subject identifier for the node"
                },
                "data": {
                  "$ref": "#/components/schemas/NodeData"
                },
                "modified": {
                  "$ref": "#/components/schemas/Modified"
                }
              }
            }
          },
          "results_total": {
            "type": "integer",
            "description": "Total number of results"
          }
        }
      },
      "ListWorkflowsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "subject": {
                  "type": "string",
                  "description": "Subject identifier for the workflow"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the workflow"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the workflow"
                },
                "config": {
                  "$ref": "#/components/schemas/WorkflowConfig"
                },
                "modified": {
                  "$ref": "#/components/schemas/Modified"
                }
              }
            }
          },
          "results_total": {
            "type": "integer",
            "description": "Total number of results"
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "IntegrationOauthConfig": {
        "type": "object",
        "required": [
          "subject",
          "integration_id",
          "name",
          "scopes"
        ],
        "properties": {
          "subject": {
            "type": "string",
            "description": "Subject",
            "example": "ms.integration.oauth.config.slack"
          },
          "integration_id": {
            "type": "string",
            "description": "Unique identifier for the integration",
            "example": "slack"
          },
          "name": {
            "type": "string",
            "description": "Display name for the integration",
            "example": "Slack API"
          },
          "scopes": {
            "type": "string",
            "description": "Comma-separated list of OAuth scopes",
            "example": "channels:read,users:read"
          }
        },
        "example": {
          "subject": "ms.integration.oauth.config.slack",
          "integration_id": "slack",
          "name": "Slack API",
          "scopes": "channels:read,users:read"
        }
      },
      "OauthConfigBasicData": {
        "type": "object",
        "properties": {
          "integration_id": {
            "type": "string",
            "example": "slack"
          },
          "name": {
            "type": "string",
            "example": "Slack API"
          },
          "scopes": {
            "type": "string",
            "example": "channels:read"
          },
          "subject": {
            "type": "string",
            "example": "ms.integration.oauth.config.slack"
          }
        },
        "example": {
          "integration_id": "slack",
          "name": "Slack API",
          "scopes": "channels:read",
          "subject": "ms.integration.oauth.config.slack"
        }
      },
      "OauthConfigList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OauthConfigBasicData"
            }
          },
          "results_total": {
            "type": "integer",
            "example": 2
          }
        },
        "example": {
          "results": [
            {
              "integration_id": "slack",
              "name": "Slack API",
              "scopes": "channels:read",
              "subject": "ms.integration.oauth.config.slack"
            },
            {
              "integration_id": "xero",
              "name": "Xero API's",
              "scopes": "email,openid,profile,assets,assets.read,files,files.read,projects,projects.read",
              "subject": "ms.integration.oauth.config.xero"
            }
          ],
          "results_total": 2
        }
      },
      "OauthConnection": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "OAuth access token",
            "example": "eyJhbGciOiJSUzI1Ni..."
          },
          "token_type": {
            "type": "string",
            "description": "Token type (usually Bearer)",
            "example": "Bearer"
          },
          "refresh_token": {
            "type": "string",
            "description": "OAuth refresh token",
            "example": "ulpL_..."
          },
          "expiry": {
            "type": "string",
            "format": "date-time",
            "description": "Token expiration time",
            "example": "2025-05-29T17:09:39.816102+01:00"
          },
          "expires_in": {
            "type": "integer",
            "description": "Token expires in seconds",
            "example": 1800
          },
          "sequence": {
            "type": "integer",
            "description": "Message sequence number",
            "example": 85
          },
          "subject": {
            "type": "string",
            "description": "Message subject",
            "example": "ms.integration.oauth.AC75JGNMJHTRQNXCBDMIAJCJ57HAEWP2RGWXJCIFFGW2K64OKG267A2D.xero.demo"
          },
          "modified": {
            "type": "integer",
            "description": "Last modified timestamp",
            "example": 1748533179
          }
        },
        "example": {
          "access_token": "eyJhbGciOiJSUzI1Ni...",
          "expires_in": 1800,
          "expiry": "2025-05-29T17:09:39.816102+01:00",
          "modified": 1748533179,
          "refresh_token": "ulpL_...",
          "sequence": 85,
          "subject": "ms.integration.oauth.AC75JGNMJHTRQNXCBDMIAJCJ57HAEWP2RGWXJCIFFGW2K64OKG267A2D.xero.demo",
          "token_type": "Bearer"
        }
      },
      "OauthConnectionsList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OauthConnection"
            }
          },
          "results_total": {
            "type": "integer",
            "example": 2
          }
        },
        "example": {
          "results": [
            {
              "access_token": "eyJhbGciOiJSUzI1Ni...",
              "expires_in": 1800,
              "expiry": "2025-05-29T17:09:39.816102+01:00",
              "modified": 1748533179,
              "refresh_token": "ulpL_...",
              "sequence": 85,
              "subject": "ms.integration.oauth.AC75JGNMJHTRQNXCBDMIAJCJ57HAEWP2RGWXJCIFFGW2K64OKG267A2D.xero.demo",
              "token_type": "Bearer"
            },
            {
              "access_token": "eyJhbGciOiJSUzI1NiIs...",
              "expires_in": 1800,
              "expiry": "2025-05-29T17:11:54.397804+01:00",
              "modified": 1748533314,
              "refresh_token": "pSn5h...",
              "sequence": 86,
              "subject": "ms.integration.oauth.AC75JGNMJHTRQNXCBDMIAJCJ57HAEWP2RGWXJCIFFGW2K64OKG267A2D.xero.maria",
              "token_type": "Bearer"
            }
          ],
          "results_total": 2
        }
      },
      "OauthLoginResponse": {
        "type": "object",
        "properties": {
          "oauth_url": {
            "type": "string",
            "description": "OAuth authorization URL to redirect user to",
            "example": "https://slack.com/oauth/v2/authorize?client_id=123456789.987654321&scope=channels:read&state=abc123xyz&redirect_uri=https://api.example.com/hub/integrations/oauth-callback"
          }
        },
        "example": {
          "oauth_url": "https://slack.com/oauth/v2/authorize?client_id=123456789.987654321&scope=channels:read&state=abc123xyz&redirect_uri=https://api.example.com/hub/integrations/oauth-callback"
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme"
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Api-Key"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    },
    {
      "apiKeyAuth": []
    }
  ],
  "tags": [
    {
      "name": "Collections",
      "description": "Operations related to collections"
    },
    {
      "name": "Nodes",
      "description": "Operations related to nodes"
    },
    {
      "name": "Workflows",
      "description": "Operations related to workflows"
    },
    {
      "name": "Oauth",
      "description": "Oauth configurations and connections"
    }
  ]
}