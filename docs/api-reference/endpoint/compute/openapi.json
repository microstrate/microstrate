{
  "openapi": "3.0.3",
  "info": {
    "title": "Microstrate Gateway",
    "description": "API service for managing compute resources including collections, functions, and containers",
    "contact": {
      "email": "support@microstrate.io"
    },
    "license": {
      "name": "Proprietary"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.microstrate.io",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Collections",
      "description": "Operations related to compute collections"
    },
    {
      "name": "Functions",
      "description": "Operations related to serverless functions"
    },
    {
      "name": "Containers",
      "description": "Operations related to containers"
    },
    {
      "name": "Assets",
      "description": "Operations related to compute assets"
    },
    {
      "name": "Runtimes",
      "description": "Operations related to compute runtimes"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    },
    {
      "apiKeyAuth": []
    }
  ],
  "paths": {
    "/compute/collections": {
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Get all compute collections",
        "description": "Retrieves a list of all compute collections",
        "operationId": "getCollections",
        "x-resource-type": "service",
        "x-resource": "ms.compute.get.collections",
        "responses": {
          "200": {
            "description": "A list of collections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Collection"
                          }
                        },
                        "results_total": {
                          "type": "integer",
                          "description": "Total number of collections"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "subject": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "collection_type": "function",
                        "description": "A collection for my compute resources",
                        "name": "my-collection",
                        "subject": "ms.compute.123456789.collection",
                        "type": "created",
                        "modified": 1714378974
                      }
                    ],
                    "results_total": 1
                  },
                  "metadata": {
                    "subject": "ms.compute.*.collection"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Create a compute collection",
        "description": "Creates a new compute collection",
        "operationId": "createCollection",
        "x-resource-type": "service",
        "x-resource": "ms.compute.post.collection",
        "requestBody": {
          "description": "Collection to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionCreate"
              },
              "example": {
                "name": "my-collection",
                "description": "A collection for my compute resources",
                "collection_type": "function"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Collection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/Collection"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "subject": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "body": {
                    "collection_type": "function",
                    "description": "A collection for my compute resources",
                    "name": "my-collection",
                    "subject": "compute.123456789.collection",
                    "type": "created",
                    "modified": 1714378974
                  },
                  "metadata": {
                    "subject": "compute.123456789.collection"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/compute/collections/{subject}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CollectionSubject"
        }
      ],
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Get a compute collection",
        "description": "Retrieves a specific collection by subject",
        "operationId": "getCollection",
        "x-resource-type": "service",
        "x-resource": "ms.compute.get.collection",
        "responses": {
          "200": {
            "description": "Collection details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/Collection"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "subject": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "body": {
                    "collection_type": "function",
                    "description": "A collection for my compute resources",
                    "name": "my-collection",
                    "subject": "compute.123456789.collection",
                    "type": "created",
                    "modified": 1714378974
                  },
                  "metadata": {
                    "subject": "compute.123456789.collection"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "Collections"
        ],
        "summary": "Update a compute collection",
        "description": "Updates an existing collection",
        "operationId": "updateCollection",
        "x-resource-type": "service",
        "x-resource": "microstrate.compute.patch.collection",
        "requestBody": {
          "description": "Collection properties to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionUpdate"
              },
              "example": {
                "description": "Updated collection description",
                "collection_type": "function"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Collection patched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "message": "success"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/compute/functions": {
      "get": {
        "tags": [
          "Functions"
        ],
        "summary": "Get all functions",
        "description": "Retrieves a list of all functions",
        "operationId": "getFunctions",
        "x-resource-type": "service",
        "x-resource": "ms.compute.get.functions",
        "responses": {
          "200": {
            "description": "A list of functions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Compute"
                          }
                        },
                        "results_total": {
                          "type": "integer",
                          "description": "Total number of functions"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "subject": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "description": "A serverless function",
                        "name": "my-function",
                        "runtime": "nodejs",
                        "subject": "ms.compute.my-namespace.function.123456789",
                        "type": "created",
                        "modified": 1714378974
                      }
                    ],
                    "results_total": 1
                  },
                  "metadata": {
                    "subject": "ms.compute.*.function.>"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Functions"
        ],
        "summary": "Create a function",
        "description": "Creates a new serverless function",
        "operationId": "createFunction",
        "x-resource-type": "service",
        "x-resource": "ms.compute.post.function",
        "requestBody": {
          "description": "Function to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionCreate"
              },
              "example": {
                "name": "my-function",
                "description": "A serverless function",
                "compute_asset": {
                  "namespace": "my-namespace",
                  "handler": "index.handler",
                  "assets": [
                    {
                      "asset_name": "index.js",
                      "asset_type": "file",
                      "asset_value": "Y29uc29sZS5sb2coIkhlbGxvLCBXb3JsZCEiKTsK",
                      "link": false
                    }
                  ],
                  "timeout": 30000,
                  "read_only_fs": true
                },
                "monitor_config": {
                  "ttl": 604800000,
                  "store_payload": true
                },
                "schema": {
                  "input": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Function created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/Compute"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "subject": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "body": {
                    "description": "A serverless function",
                    "name": "my-function",
                    "runtime": "nodejs",
                    "subject": "ms.compute.my-namespace.function.123456789",
                    "type": "created",
                    "modified": 1714378974,
                    "compute_asset": {
                      "namespace": "my-namespace",
                      "service": "123456789",
                      "runtime": "nodejs",
                      "handler": "index.handler",
                      "timeout": 30000,
                      "read_only_fs": true
                    },
                    "monitor_config": {
                      "ttl": 604800000,
                      "store_payload": true
                    },
                    "schema": {
                      "input": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        }
                      },
                      "output": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "metadata": {
                    "subject": "compute.my-namespace.function.123456789"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/compute/collections/{subject}/functions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CollectionSubject"
        }
      ],
      "get": {
        "tags": [
          "Functions",
          "Collections"
        ],
        "summary": "Get functions by collection",
        "description": "Retrieves all functions belonging to a specific collection",
        "operationId": "getFunctionsByCollection",
        "x-resource-type": "service",
        "x-resource": "ms.compute.get.functions-by-collection",
        "responses": {
          "200": {
            "description": "A list of functions in the collection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Compute"
                          }
                        },
                        "results_total": {
                          "type": "integer",
                          "description": "Total number of functions"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "subject": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "description": "A serverless function",
                        "name": "my-function",
                        "runtime": "nodejs",
                        "subject": "compute.my-namespace.function.123456789",
                        "type": "created",
                        "modified": 1714378974
                      }
                    ],
                    "results_total": 1
                  },
                  "metadata": {
                    "subject": "ms.compute.123456789.function.>"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/compute/functions/{subject}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ComputeSubject"
        }
      ],
      "get": {
        "tags": [
          "Functions"
        ],
        "summary": "Get a function",
        "description": "Retrieves a specific function by subject",
        "operationId": "getFunction",
        "x-resource-type": "service",
        "x-resource": "ms.compute.get.compute-item",
        "responses": {
          "200": {
            "description": "Function details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/ComputeWithAsset"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "subject": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "body": {
                    "description": "A serverless function",
                    "name": "my-function",
                    "runtime": "nodejs",
                    "subject": "compute.my-namespace.function.123456789",
                    "type": "created",
                    "modified": 1714378974,
                    "compute_asset": {
                      "namespace": "my-namespace",
                      "service": "123456789",
                      "runtime": "nodejs",
                      "handler": "index.handler",
                      "assets": [
                        {
                          "asset_name": "index.js",
                          "asset_type": "file",
                          "asset_value": "Y29uc29sZS5sb2coIkhlbGxvLCBXb3JsZCEiKTsK",
                          "link": false
                        }
                      ],
                      "timeout": 30000,
                      "read_only_fs": true
                    }
                  },
                  "metadata": {
                    "subject": "compute.my-namespace.function.123456789"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "Functions"
        ],
        "summary": "Update a function",
        "description": "Updates an existing function",
        "operationId": "updateFunction",
        "x-resource-type": "service",
        "x-resource": "microstrate.compute.patch.function",
        "requestBody": {
          "description": "Function properties to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionUpdate"
              },
              "example": {
                "description": "Updated function description",
                "monitor_config": {
                  "ttl": 1209600000,
                  "store_payload": false
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Function patched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "message": "success"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/compute/functions/{subject}/invoke": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ComputeSubject"
        }
      ],
      "post": {
        "tags": [
          "Functions"
        ],
        "summary": "Invoke a function",
        "description": "Invokes a function with the provided payload",
        "operationId": "invokeFunction",
        "x-resource-type": "service",
        "x-resource": "ms.compute.invoke.function",
        "requestBody": {
          "description": "Function invocation parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionInvoke"
              },
              "example": {
                "payload": "{\"name\":\"World\"}",
                "invocation_type": "RequestResponse"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Function invoked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "string",
                      "description": "Response from function invocation"
                    }
                  }
                },
                "example": {
                  "body": "{\"message\":\"Hello, World!\"}"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/compute/containers": {
      "get": {
        "tags": [
          "Containers"
        ],
        "summary": "Get all containers",
        "description": "Retrieves a list of all containers",
        "operationId": "getContainers",
        "x-resource-type": "service",
        "x-resource": "ms.compute.get.containers",
        "responses": {
          "200": {
            "description": "A list of containers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Compute"
                          }
                        },
                        "results_total": {
                          "type": "integer",
                          "description": "Total number of containers"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "subject": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "description": "A container for my application",
                        "name": "my-container",
                        "runtime": "docker",
                        "subject": "ms.compute.my-namespace.container.123456789",
                        "type": "created",
                        "modified": 1714378974
                      }
                    ],
                    "results_total": 1
                  },
                  "metadata": {
                    "subject": "ms.compute.*.container.>"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Containers"
        ],
        "summary": "Create a container",
        "description": "Creates a new container",
        "operationId": "createContainer",
        "x-resource-type": "service",
        "x-resource": "ms.compute.post.container",
        "requestBody": {
          "description": "Container to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContainerCreate"
              },
              "example": {
                "name": "my-container",
                "description": "A container for my application",
                "compute_asset": {
                  "namespace": "my-namespace",
                  "runtime": "docker",
                  "assets": [
                    {
                      "asset_name": "Dockerfile",
                      "asset_type": "file",
                      "asset_value": "RlJPTSBub2RlOjE4CldPUktESVIgL2FwcApDT1BZIC4gLgpSVU4gbnBtIGluc3RhbGwKRVhQT1NFIDgwODAKQ01EIFsibm9kZSIsICJpbmRleC5qcyJdCg==",
                      "link": false
                    }
                  ],
                  "read_only_fs": false
                },
                "monitor_config": {
                  "ttl": 604800000,
                  "store_payload": true
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Container created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/Compute"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "subject": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "body": {
                    "description": "A container for my application",
                    "name": "my-container",
                    "runtime": "docker",
                    "subject": "compute.my-namespace.container.123456789",
                    "type": "created",
                    "modified": 1714378974,
                    "compute_asset": {
                      "namespace": "my-namespace",
                      "service": "123456789",
                      "runtime": "docker",
                      "read_only_fs": false
                    },
                    "monitor_config": {
                      "ttl": 604800000,
                      "store_payload": true
                    }
                  },
                  "metadata": {
                    "subject": "compute.my-namespace.container.123456789"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/compute/collections/{subject}/containers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CollectionSubject"
        }
      ],
      "get": {
        "tags": [
          "Containers",
          "Collections"
        ],
        "summary": "Get containers by collection",
        "description": "Retrieves all containers belonging to a specific collection",
        "operationId": "getContainersByCollection",
        "x-resource-type": "service",
        "x-resource": "ms.compute.get.containers-by-collection",
        "responses": {
          "200": {
            "description": "A list of containers in the collection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Compute"
                          }
                        },
                        "results_total": {
                          "type": "integer",
                          "description": "Total number of containers"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "subject": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "description": "A container for my application",
                        "name": "my-container",
                        "runtime": "docker",
                        "subject": "compute.my-namespace.container.123456789",
                        "type": "created",
                        "modified": 1714378974
                      }
                    ],
                    "results_total": 1
                  },
                  "metadata": {
                    "subject": "ms.compute.123456789.container.>"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/compute/containers/{subject}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ComputeSubject"
        }
      ],
      "get": {
        "tags": [
          "Containers"
        ],
        "summary": "Get a container",
        "description": "Retrieves a specific container by subject",
        "operationId": "getContainer",
        "x-resource-type": "service",
        "x-resource": "microstrate.compute.get.compute-item",
        "responses": {
          "200": {
            "description": "Container details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "$ref": "#/components/schemas/ComputeWithAsset"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "subject": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "body": {
                    "description": "A container for my application",
                    "name": "my-container",
                    "runtime": "docker",
                    "subject": "compute.my-namespace.container.123456789",
                    "type": "created",
                    "modified": 1714378974,
                    "compute_asset": {
                      "namespace": "my-namespace",
                      "service": "123456789",
                      "runtime": "docker",
                      "assets": [
                        {
                          "asset_name": "Dockerfile",
                          "asset_type": "file",
                          "asset_value": "RlJPTSBub2RlOjE4CldPUktESVIgL2FwcApDT1BZIC4gLgpSVU4gbnBtIGluc3RhbGwKRVhQT1NFIDgwODAKQ01EIFsibm9kZSIsICJpbmRleC5qcyJdCg==",
                          "link": false
                        }
                      ],
                      "read_only_fs": false
                    }
                  },
                  "metadata": {
                    "subject": "compute.my-namespace.container.123456789"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "Containers"
        ],
        "summary": "Update a container",
        "description": "Updates an existing container",
        "operationId": "updateContainer",
        "x-resource-type": "service",
        "x-resource": "microstrate.compute.patch.container",
        "requestBody": {
          "description": "Container properties to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContainerUpdate"
              },
              "example": {
                "description": "Updated container description",
                "monitor_config": {
                  "ttl": 1209600000,
                  "store_payload": false
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Container patched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "message": "success"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/compute/assets/{subject}/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ComputeSubject"
        }
      ],
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get compute asset history",
        "description": "Retrieves the history of a compute asset",
        "operationId": "getComputeAssetHistory",
        "x-resource-type": "service",
        "x-resource": "ms.compute.get.compute-asset-history",
        "responses": {
          "200": {
            "description": "Asset history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ComputeAsset"
                          }
                        },
                        "results_total": {
                          "type": "integer",
                          "description": "Total number of history entries"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "subject": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "namespace": "my-namespace",
                        "service": "123456789",
                        "runtime": "nodejs",
                        "handler": "index.handler",
                        "assets": [
                          {
                            "asset_name": "index.js",
                            "asset_type": "file",
                            "asset_value": "Y29uc29sZS5sb2coIkhlbGxvLCBXb3JsZCEiKTsK",
                            "link": false
                          }
                        ],
                        "timeout": 30000,
                        "read_only_fs": true,
                        "modified": 1714378974
                      },
                      {
                        "namespace": "my-namespace",
                        "service": "123456789",
                        "runtime": "nodejs",
                        "handler": "index.newHandler",
                        "assets": [
                          {
                            "asset_name": "index.js",
                            "asset_type": "file",
                            "asset_value": "Y29uc29sZS5sb2coIkhlbGxvLCBVcGRhdGVkIFdvcmxkISIpOwo=",
                            "link": false
                          }
                        ],
                        "timeout": 60000,
                        "read_only_fs": true,
                        "modified": 1714380000
                      }
                    ],
                    "results_total": 2
                  },
                  "metadata": {
                    "subject": "ms.compute.my-namespace.function.123456789.asset.>"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/compute/assets/{subject}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ComputeSubject"
        }
      ],
      "patch": {
        "tags": [
          "Assets"
        ],
        "summary": "Update a compute asset",
        "description": "Updates a compute asset",
        "operationId": "updateComputeAsset",
        "x-resource-type": "service",
        "x-resource": "ms.compute.patch.compute-asset",
        "requestBody": {
          "description": "Asset properties to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputeAssetUpdate"
              },
              "example": {
                "namespace": "my-namespace",
                "service": "123456789",
                "handler": "index.newHandler",
                "assets": [
                  {
                    "asset_name": "index.js",
                    "asset_type": "file",
                    "asset_value": "Y29uc29sZS5sb2coIkhlbGxvLCBVcGRhdGVkIFdvcmxkISIpOwo=",
                    "link": false
                  }
                ],
                "timeout": 60000,
                "env_vars": [
                  "ENV=production"
                ],
                "read_only_fs": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset patched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "message": "success"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/compute/runtimes": {
      "get": {
        "tags": [
          "Runtimes"
        ],
        "summary": "Get runtimes",
        "description": "Retrieves all available runtimes",
        "operationId": "getRuntimes",
        "x-resource-type": "service",
        "x-resource": "ms.compute.get.runtimes",
        "responses": {
          "200": {
            "description": "A list of available runtimes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "results_total": {
                          "type": "integer",
                          "description": "Total number of runtimes"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "subject": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "body": {
                    "results": [
                      {
                        "name": "nodejs",
                        "version": "18.x",
                        "description": "Node.js Runtime"
                      },
                      {
                        "name": "python",
                        "version": 3.1,
                        "description": "Python Runtime"
                      },
                      {
                        "name": "docker",
                        "version": "latest",
                        "description": "Docker Runtime"
                      }
                    ],
                    "results_total": 3
                  },
                  "metadata": {
                    "subject": "ms.compute.runtimes"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Api-Key"
      }
    },
    "parameters": {
      "CollectionSubject": {
        "name": "subject",
        "in": "path",
        "description": "Collection subject identifier",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "ms.compute.123456789.collection"
      },
      "ComputeSubject": {
        "name": "subject",
        "in": "path",
        "description": "Compute item subject identifier",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "ms.compute.my-namespace.function.123456789"
      }
    },
    "schemas": {
      "Collection": {
        "type": "object",
        "properties": {
          "collection_type": {
            "type": "string",
            "description": "Collection type"
          },
          "description": {
            "type": "string",
            "description": "Collection description"
          },
          "name": {
            "type": "string",
            "description": "Collection name"
          },
          "subject": {
            "type": "string",
            "description": "Collection subject identifier"
          },
          "type": {
            "type": "string",
            "description": "Resource type"
          },
          "modified": {
            "type": "integer",
            "description": "Last modification timestamp"
          }
        }
      },
      "CollectionCreate": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Collection name"
          },
          "description": {
            "type": "string",
            "description": "Collection description"
          },
          "collection_type": {
            "type": "string",
            "description": "Collection type"
          }
        }
      },
      "CollectionUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Collection name"
          },
          "description": {
            "type": "string",
            "description": "Collection description"
          },
          "collection_type": {
            "type": "string",
            "description": "Collection type"
          }
        }
      },
      "ComputeAssetItem": {
        "type": "object",
        "properties": {
          "asset_name": {
            "type": "string",
            "description": "Asset name"
          },
          "asset_type": {
            "type": "string",
            "description": "Asset type"
          },
          "asset_value": {
            "type": "string",
            "description": "Base64 encoded content"
          },
          "link": {
            "type": "boolean",
            "description": "Whether asset is a link"
          }
        }
      },
      "ComputeAsset": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string",
            "description": "Asset namespace"
          },
          "service": {
            "type": "string",
            "description": "Service identifier"
          },
          "runtime": {
            "type": "string",
            "description": "Runtime environment"
          },
          "handler": {
            "type": "string",
            "description": "Function handler"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComputeAssetItem"
            },
            "description": "Asset items"
          },
          "timeout": {
            "type": "integer",
            "description": "Timeout in milliseconds"
          },
          "env_vars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Environment variables"
          },
          "read_only_fs": {
            "type": "boolean",
            "description": "Read-only filesystem flag"
          },
          "modified": {
            "type": "integer",
            "description": "Last modification timestamp"
          }
        }
      },
      "ComputeAssetUpdate": {
        "type": "object",
        "required": [
          "namespace",
          "service"
        ],
        "properties": {
          "namespace": {
            "type": "string",
            "description": "Asset namespace"
          },
          "service": {
            "type": "string",
            "description": "Service identifier"
          },
          "runtime": {
            "type": "string",
            "description": "Runtime environment"
          },
          "handler": {
            "type": "string",
            "description": "Function handler"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComputeAssetItem"
            },
            "description": "Asset items"
          },
          "timeout": {
            "type": "integer",
            "description": "Timeout in milliseconds"
          },
          "env_vars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Environment variables"
          },
          "read_only_fs": {
            "type": "boolean",
            "description": "Read-only filesystem flag"
          }
        }
      },
      "MonitorConfig": {
        "type": "object",
        "properties": {
          "ttl": {
            "type": "integer",
            "description": "Monitoring data TTL"
          },
          "store_payload": {
            "type": "boolean",
            "description": "Payload storage flag"
          }
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "input": {
            "type": "object",
            "description": "Input schema"
          },
          "output": {
            "type": "object",
            "description": "Output schema"
          }
        }
      },
      "Compute": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Compute item description"
          },
          "name": {
            "type": "string",
            "description": "Compute item name"
          },
          "runtime": {
            "type": "string",
            "description": "Runtime environment"
          },
          "subject": {
            "type": "string",
            "description": "Subject identifier"
          },
          "type": {
            "type": "string",
            "description": "Message type"
          },
          "modified": {
            "type": "integer",
            "description": "Last modification timestamp"
          },
          "monitor_config": {
            "$ref": "#/components/schemas/MonitorConfig"
          },
          "schema": {
            "$ref": "#/components/schemas/Schema"
          }
        }
      },
      "ComputeWithAsset": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Compute"
          },
          {
            "type": "object",
            "properties": {
              "compute_asset": {
                "$ref": "#/components/schemas/ComputeAsset"
              }
            }
          }
        ]
      },
      "FunctionCreate": {
        "type": "object",
        "required": [
          "name",
          "compute_asset",
          "monitor_config"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Function name"
          },
          "description": {
            "type": "string",
            "description": "Function description"
          },
          "compute_asset": {
            "type": "object",
            "required": [
              "namespace"
            ],
            "properties": {
              "namespace": {
                "type": "string",
                "description": "Function namespace"
              },
              "handler": {
                "type": "string",
                "description": "Function handler"
              },
              "runtime": {
                "type": "string",
                "description": "Runtime environment",
                "default": "nodejs"
              },
              "assets": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ComputeAssetItem"
                },
                "description": "Function assets"
              },
              "timeout": {
                "type": "integer",
                "description": "Function timeout"
              },
              "read_only_fs": {
                "type": "boolean",
                "description": "Read-only filesystem flag"
              }
            }
          },
          "monitor_config": {
            "$ref": "#/components/schemas/MonitorConfig"
          },
          "schema": {
            "$ref": "#/components/schemas/Schema"
          },
          "size": {
            "type": "string",
            "description": "Size configuration"
          }
        }
      },
      "FunctionUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Function name"
          },
          "description": {
            "type": "string",
            "description": "Function description"
          },
          "monitor_config": {
            "$ref": "#/components/schemas/MonitorConfig"
          },
          "schema": {
            "$ref": "#/components/schemas/Schema"
          },
          "size": {
            "type": "string",
            "description": "Size configuration"
          }
        }
      },
      "FunctionInvoke": {
        "type": "object",
        "required": [
          "payload",
          "invocation_type"
        ],
        "properties": {
          "payload": {
            "type": "string",
            "description": "Function invocation payload"
          },
          "invocation_type": {
            "type": "string",
            "enum": [
              "Async",
              "RequestResponse"
            ],
            "description": "Invocation type"
          }
        }
      },
      "ContainerCreate": {
        "type": "object",
        "required": [
          "name",
          "compute_asset",
          "monitor_config"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Container name"
          },
          "description": {
            "type": "string",
            "description": "Container description"
          },
          "compute_asset": {
            "type": "object",
            "required": [
              "namespace",
              "runtime"
            ],
            "properties": {
              "namespace": {
                "type": "string",
                "description": "Container namespace"
              },
              "runtime": {
                "type": "string",
                "description": "Runtime environment"
              },
              "assets": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ComputeAssetItem"
                },
                "description": "Container assets"
              },
              "read_only_fs": {
                "type": "boolean",
                "description": "Read-only filesystem flag"
              }
            }
          },
          "monitor_config": {
            "$ref": "#/components/schemas/MonitorConfig"
          },
          "size": {
            "type": "string",
            "description": "Size configuration"
          }
        }
      },
      "ContainerUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Container name"
          },
          "description": {
            "type": "string",
            "description": "Container description"
          },
          "monitor_config": {
            "$ref": "#/components/schemas/MonitorConfig"
          },
          "size": {
            "type": "string",
            "description": "Size configuration"
          }
        }
      }
    },
    "responses": {
      "SuccessResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SuccessResponse"
            },
            "example": {
              "message": "success"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message"
                }
              }
            },
            "example": {
              "error": "Invalid request parameters"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message"
                }
              }
            },
            "example": {
              "error": "The requested resource was not found"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message"
                }
              }
            },
            "example": {
              "error": "An unexpected error occurred"
            }
          }
        }
      }
    }
  }
}
