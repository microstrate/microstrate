{
  "name": "OpenAI API",
  "description": "The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.",
  "nodes": [
    {
      "id": "get_assistants",
      "operationId": "listAssistants",
      "name": "List Assistants",
      "description": "Returns a list of assistants.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_assistants/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/assistants"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                },
                "order": {
                  "type": "string",
                  "default": "desc",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                },
                "before": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_assistants/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "example": "list"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "Assistant",
                  "description": "Represents an `assistant` that can call the model and use tools.",
                  "properties": {
                    "id": {
                      "description": "The identifier, which can be referenced in API endpoints.",
                      "type": "string"
                    },
                    "object": {
                      "description": "The object type, which is always `assistant`.",
                      "type": "string",
                      "enum": [
                        "assistant"
                      ]
                    },
                    "created_at": {
                      "description": "The Unix timestamp (in seconds) for when the assistant was created.",
                      "type": "integer"
                    },
                    "name": {
                      "description": "The name of the assistant. The maximum length is 256 characters.\n",
                      "type": [
                        "string",
                        "null"
                      ],
                      "maxLength": 256
                    },
                    "description": {
                      "description": "The description of the assistant. The maximum length is 512 characters.\n",
                      "type": [
                        "string",
                        "null"
                      ],
                      "maxLength": 512
                    },
                    "model": {
                      "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n",
                      "type": "string"
                    },
                    "instructions": {
                      "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n",
                      "type": [
                        "string",
                        "null"
                      ],
                      "maxLength": 256000
                    },
                    "tools": {
                      "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n",
                      "default": [],
                      "type": "array",
                      "maxItems": 128,
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "Code interpreter tool",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of tool being defined: `code_interpreter`",
                                "enum": [
                                  "code_interpreter"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          },
                          {
                            "type": "object",
                            "title": "FileSearch tool",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of tool being defined: `file_search`",
                                "enum": [
                                  "file_search"
                                ]
                              },
                              "file_search": {
                                "type": "object",
                                "description": "Overrides for the file search tool.",
                                "properties": {
                                  "max_num_results": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 50,
                                    "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                                  },
                                  "ranking_options": {
                                    "title": "File search tool call ranking options",
                                    "type": "object",
                                    "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                                    "properties": {
                                      "ranker": {
                                        "type": "string",
                                        "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                        "enum": [
                                          "auto",
                                          "default_2024_08_21"
                                        ]
                                      },
                                      "score_threshold": {
                                        "type": "number",
                                        "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                        "minimum": 0,
                                        "maximum": 1
                                      }
                                    },
                                    "required": [
                                      "score_threshold"
                                    ]
                                  }
                                }
                              }
                            },
                            "required": [
                              "type"
                            ]
                          },
                          {
                            "type": "object",
                            "title": "Function tool",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of tool being defined: `function`",
                                "enum": [
                                  "function"
                                ]
                              },
                              "function": {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string",
                                    "description": "A description of what the function does, used by the model to choose when and how to call the function."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                                    "additionalProperties": true
                                  },
                                  "strict": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "default": false,
                                    "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "function"
                            ]
                          }
                        ]
                      }
                    },
                    "tool_resources": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                      "properties": {
                        "code_interpreter": {
                          "type": "object",
                          "properties": {
                            "file_ids": {
                              "type": "array",
                              "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.\n",
                              "default": [],
                              "maxItems": 20,
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "file_search": {
                          "type": "object",
                          "properties": {
                            "vector_store_ids": {
                              "type": "array",
                              "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                              "maxItems": 1,
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "metadata": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "temperature": {
                      "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
                      "type": [
                        "number",
                        "null"
                      ],
                      "minimum": 0,
                      "maximum": 2,
                      "default": 1,
                      "example": 1
                    },
                    "top_p": {
                      "type": [
                        "number",
                        "null"
                      ],
                      "minimum": 0,
                      "maximum": 1,
                      "default": 1,
                      "example": 1,
                      "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
                    },
                    "response_format": {
                      "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "`auto` is the default value\n",
                          "enum": [
                            "auto"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "Text",
                          "description": "Default response format. Used to generate text responses.\n",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of response format being defined. Always `text`.",
                              "enum": [
                                "text"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "JSON object",
                          "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of response format being defined. Always `json_object`.",
                              "enum": [
                                "json_object"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "JSON schema",
                          "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of response format being defined. Always `json_schema`.",
                              "enum": [
                                "json_schema"
                              ]
                            },
                            "json_schema": {
                              "type": "object",
                              "title": "JSON schema",
                              "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                                },
                                "schema": {
                                  "type": "object",
                                  "title": "JSON schema",
                                  "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                                  "additionalProperties": true
                                },
                                "strict": {
                                  "type": [
                                    "boolean",
                                    "null"
                                  ],
                                  "default": false,
                                  "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "json_schema"
                          ]
                        },
                        {
                          "type": "null"
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "object",
                    "created_at",
                    "name",
                    "description",
                    "model",
                    "instructions",
                    "tools",
                    "metadata"
                  ]
                }
              },
              "first_id": {
                "type": "string",
                "example": "asst_abc123"
              },
              "last_id": {
                "type": "string",
                "example": "asst_abc456"
              },
              "has_more": {
                "type": "boolean",
                "example": false
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "post_assistants",
      "operationId": "createAssistant",
      "name": "Create Assistant",
      "description": "Create an assistant with a model and instructions.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_assistants/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/assistants"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "model": {
                    "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n",
                    "example": "gpt-4o",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "o3-mini",
                          "o3-mini-2025-01-31",
                          "o1",
                          "o1-2024-12-17",
                          "gpt-4o",
                          "gpt-4o-2024-11-20",
                          "gpt-4o-2024-08-06",
                          "gpt-4o-2024-05-13",
                          "gpt-4o-mini",
                          "gpt-4o-mini-2024-07-18",
                          "gpt-4.5-preview",
                          "gpt-4.5-preview-2025-02-27",
                          "gpt-4-turbo",
                          "gpt-4-turbo-2024-04-09",
                          "gpt-4-0125-preview",
                          "gpt-4-turbo-preview",
                          "gpt-4-1106-preview",
                          "gpt-4-vision-preview",
                          "gpt-4",
                          "gpt-4-0314",
                          "gpt-4-0613",
                          "gpt-4-32k",
                          "gpt-4-32k-0314",
                          "gpt-4-32k-0613",
                          "gpt-3.5-turbo",
                          "gpt-3.5-turbo-16k",
                          "gpt-3.5-turbo-0613",
                          "gpt-3.5-turbo-1106",
                          "gpt-3.5-turbo-0125",
                          "gpt-3.5-turbo-16k-0613"
                        ]
                      }
                    ]
                  },
                  "name": {
                    "description": "The name of the assistant. The maximum length is 256 characters.\n",
                    "type": [
                      "string",
                      "null"
                    ],
                    "maxLength": 256
                  },
                  "description": {
                    "description": "The description of the assistant. The maximum length is 512 characters.\n",
                    "type": [
                      "string",
                      "null"
                    ],
                    "maxLength": 512
                  },
                  "instructions": {
                    "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n",
                    "type": [
                      "string",
                      "null"
                    ],
                    "maxLength": 256000
                  },
                  "reasoning_effort": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "low",
                      "medium",
                      "high"
                    ],
                    "default": "medium",
                    "description": "**o-series models only** \n\nConstrains effort on reasoning for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n"
                  },
                  "tools": {
                    "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n",
                    "default": [],
                    "type": "array",
                    "maxItems": 128,
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "title": "Code interpreter tool",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of tool being defined: `code_interpreter`",
                              "enum": [
                                "code_interpreter"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "FileSearch tool",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of tool being defined: `file_search`",
                              "enum": [
                                "file_search"
                              ]
                            },
                            "file_search": {
                              "type": "object",
                              "description": "Overrides for the file search tool.",
                              "properties": {
                                "max_num_results": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 50,
                                  "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                                },
                                "ranking_options": {
                                  "title": "File search tool call ranking options",
                                  "type": "object",
                                  "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                                  "properties": {
                                    "ranker": {
                                      "type": "string",
                                      "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                      "enum": [
                                        "auto",
                                        "default_2024_08_21"
                                      ]
                                    },
                                    "score_threshold": {
                                      "type": "number",
                                      "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                      "minimum": 0,
                                      "maximum": 1
                                    }
                                  },
                                  "required": [
                                    "score_threshold"
                                  ]
                                }
                              }
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "Function tool",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of tool being defined: `function`",
                              "enum": [
                                "function"
                              ]
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "description": "A description of what the function does, used by the model to choose when and how to call the function."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                                },
                                "parameters": {
                                  "type": "object",
                                  "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                                  "additionalProperties": true
                                },
                                "strict": {
                                  "type": [
                                    "boolean",
                                    "null"
                                  ],
                                  "default": false,
                                  "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "function"
                          ]
                        }
                      ]
                    }
                  },
                  "tool_resources": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                    "properties": {
                      "code_interpreter": {
                        "type": "object",
                        "properties": {
                          "file_ids": {
                            "type": "array",
                            "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                            "default": [],
                            "maxItems": 20,
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "file_search": {
                        "type": "object",
                        "properties": {
                          "vector_store_ids": {
                            "type": "array",
                            "description": "The [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                            "maxItems": 1,
                            "items": {
                              "type": "string"
                            }
                          },
                          "vector_stores": {
                            "type": "array",
                            "description": "A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                            "maxItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "file_ids": {
                                  "type": "array",
                                  "description": "A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n",
                                  "maxItems": 10000,
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "chunking_strategy": {
                                  "type": "object",
                                  "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "title": "Auto Chunking Strategy",
                                      "description": "The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.",
                                      "additionalProperties": false,
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "Always `auto`.",
                                          "enum": [
                                            "auto"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "title": "Static Chunking Strategy",
                                      "additionalProperties": false,
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "Always `static`.",
                                          "enum": [
                                            "static"
                                          ]
                                        },
                                        "static": {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "max_chunk_size_tokens": {
                                              "type": "integer",
                                              "minimum": 100,
                                              "maximum": 4096,
                                              "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                                            },
                                            "chunk_overlap_tokens": {
                                              "type": "integer",
                                              "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                                            }
                                          },
                                          "required": [
                                            "max_chunk_size_tokens",
                                            "chunk_overlap_tokens"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "static"
                                      ]
                                    }
                                  ]
                                },
                                "metadata": {
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "oneOf": [
                          {
                            "required": [
                              "vector_store_ids"
                            ]
                          },
                          {
                            "required": [
                              "vector_stores"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "metadata": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "temperature": {
                    "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
                    "type": [
                      "number",
                      "null"
                    ],
                    "minimum": 0,
                    "maximum": 2,
                    "default": 1,
                    "example": 1
                  },
                  "top_p": {
                    "type": [
                      "number",
                      "null"
                    ],
                    "minimum": 0,
                    "maximum": 1,
                    "default": 1,
                    "example": 1,
                    "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
                  },
                  "response_format": {
                    "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "`auto` is the default value\n",
                        "enum": [
                          "auto"
                        ]
                      },
                      {
                        "type": "object",
                        "title": "Text",
                        "description": "Default response format. Used to generate text responses.\n",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of response format being defined. Always `text`.",
                            "enum": [
                              "text"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "type": "object",
                        "title": "JSON object",
                        "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of response format being defined. Always `json_object`.",
                            "enum": [
                              "json_object"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "type": "object",
                        "title": "JSON schema",
                        "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of response format being defined. Always `json_schema`.",
                            "enum": [
                              "json_schema"
                            ]
                          },
                          "json_schema": {
                            "type": "object",
                            "title": "JSON schema",
                            "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                            "properties": {
                              "description": {
                                "type": "string",
                                "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                              },
                              "schema": {
                                "type": "object",
                                "title": "JSON schema",
                                "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                                "additionalProperties": true
                              },
                              "strict": {
                                "type": [
                                  "boolean",
                                  "null"
                                ],
                                "default": false,
                                "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "json_schema"
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "model"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_assistants/output-200.schema.json",
            "type": "object",
            "title": "Assistant",
            "description": "Represents an `assistant` that can call the model and use tools.",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `assistant`.",
                "type": "string",
                "enum": [
                  "assistant"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the assistant was created.",
                "type": "integer"
              },
              "name": {
                "description": "The name of the assistant. The maximum length is 256 characters.\n",
                "type": [
                  "string",
                  "null"
                ],
                "maxLength": 256
              },
              "description": {
                "description": "The description of the assistant. The maximum length is 512 characters.\n",
                "type": [
                  "string",
                  "null"
                ],
                "maxLength": 512
              },
              "model": {
                "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n",
                "type": "string"
              },
              "instructions": {
                "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n",
                "type": [
                  "string",
                  "null"
                ],
                "maxLength": 256000
              },
              "tools": {
                "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n",
                "default": [],
                "type": "array",
                "maxItems": 128,
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Code interpreter tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `code_interpreter`",
                          "enum": [
                            "code_interpreter"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "FileSearch tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `file_search`",
                          "enum": [
                            "file_search"
                          ]
                        },
                        "file_search": {
                          "type": "object",
                          "description": "Overrides for the file search tool.",
                          "properties": {
                            "max_num_results": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 50,
                              "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                            },
                            "ranking_options": {
                              "title": "File search tool call ranking options",
                              "type": "object",
                              "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                              "properties": {
                                "ranker": {
                                  "type": "string",
                                  "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                  "enum": [
                                    "auto",
                                    "default_2024_08_21"
                                  ]
                                },
                                "score_threshold": {
                                  "type": "number",
                                  "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                  "minimum": 0,
                                  "maximum": 1
                                }
                              },
                              "required": [
                                "score_threshold"
                              ]
                            }
                          }
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Function tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `function`",
                          "enum": [
                            "function"
                          ]
                        },
                        "function": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "description": "A description of what the function does, used by the model to choose when and how to call the function."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                            },
                            "parameters": {
                              "type": "object",
                              "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                              "additionalProperties": true
                            },
                            "strict": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "default": false,
                              "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "function"
                      ]
                    }
                  ]
                }
              },
              "tool_resources": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                "properties": {
                  "code_interpreter": {
                    "type": "object",
                    "properties": {
                      "file_ids": {
                        "type": "array",
                        "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.\n",
                        "default": [],
                        "maxItems": 20,
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "file_search": {
                    "type": "object",
                    "properties": {
                      "vector_store_ids": {
                        "type": "array",
                        "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                        "maxItems": 1,
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "temperature": {
                "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
                "type": [
                  "number",
                  "null"
                ],
                "minimum": 0,
                "maximum": 2,
                "default": 1,
                "example": 1
              },
              "top_p": {
                "type": [
                  "number",
                  "null"
                ],
                "minimum": 0,
                "maximum": 1,
                "default": 1,
                "example": 1,
                "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
              },
              "response_format": {
                "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                "oneOf": [
                  {
                    "type": "string",
                    "description": "`auto` is the default value\n",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "Text",
                    "description": "Default response format. Used to generate text responses.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `text`.",
                        "enum": [
                          "text"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON object",
                    "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_object`.",
                        "enum": [
                          "json_object"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON schema",
                    "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_schema`.",
                        "enum": [
                          "json_schema"
                        ]
                      },
                      "json_schema": {
                        "type": "object",
                        "title": "JSON schema",
                        "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                        "properties": {
                          "description": {
                            "type": "string",
                            "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                          },
                          "schema": {
                            "type": "object",
                            "title": "JSON schema",
                            "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                            "additionalProperties": true
                          },
                          "strict": {
                            "type": [
                              "boolean",
                              "null"
                            ],
                            "default": false,
                            "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "json_schema"
                    ]
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "name",
              "description",
              "model",
              "instructions",
              "tools",
              "metadata"
            ]
          }
        ]
      }
    },
    {
      "id": "get_assistants__assistant_id_",
      "operationId": "getAssistant",
      "name": "Get Assistant",
      "description": "Retrieves an assistant.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_assistants__assistant_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/assistants/{assistant_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "assistant_id"
              ],
              "properties": {
                "assistant_id": {
                  "type": "string",
                  "description": "The ID of the assistant to retrieve."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_assistants__assistant_id_/output-200.schema.json",
            "type": "object",
            "title": "Assistant",
            "description": "Represents an `assistant` that can call the model and use tools.",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `assistant`.",
                "type": "string",
                "enum": [
                  "assistant"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the assistant was created.",
                "type": "integer"
              },
              "name": {
                "description": "The name of the assistant. The maximum length is 256 characters.\n",
                "type": [
                  "string",
                  "null"
                ],
                "maxLength": 256
              },
              "description": {
                "description": "The description of the assistant. The maximum length is 512 characters.\n",
                "type": [
                  "string",
                  "null"
                ],
                "maxLength": 512
              },
              "model": {
                "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n",
                "type": "string"
              },
              "instructions": {
                "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n",
                "type": [
                  "string",
                  "null"
                ],
                "maxLength": 256000
              },
              "tools": {
                "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n",
                "default": [],
                "type": "array",
                "maxItems": 128,
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Code interpreter tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `code_interpreter`",
                          "enum": [
                            "code_interpreter"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "FileSearch tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `file_search`",
                          "enum": [
                            "file_search"
                          ]
                        },
                        "file_search": {
                          "type": "object",
                          "description": "Overrides for the file search tool.",
                          "properties": {
                            "max_num_results": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 50,
                              "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                            },
                            "ranking_options": {
                              "title": "File search tool call ranking options",
                              "type": "object",
                              "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                              "properties": {
                                "ranker": {
                                  "type": "string",
                                  "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                  "enum": [
                                    "auto",
                                    "default_2024_08_21"
                                  ]
                                },
                                "score_threshold": {
                                  "type": "number",
                                  "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                  "minimum": 0,
                                  "maximum": 1
                                }
                              },
                              "required": [
                                "score_threshold"
                              ]
                            }
                          }
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Function tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `function`",
                          "enum": [
                            "function"
                          ]
                        },
                        "function": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "description": "A description of what the function does, used by the model to choose when and how to call the function."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                            },
                            "parameters": {
                              "type": "object",
                              "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                              "additionalProperties": true
                            },
                            "strict": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "default": false,
                              "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "function"
                      ]
                    }
                  ]
                }
              },
              "tool_resources": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                "properties": {
                  "code_interpreter": {
                    "type": "object",
                    "properties": {
                      "file_ids": {
                        "type": "array",
                        "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.\n",
                        "default": [],
                        "maxItems": 20,
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "file_search": {
                    "type": "object",
                    "properties": {
                      "vector_store_ids": {
                        "type": "array",
                        "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                        "maxItems": 1,
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "temperature": {
                "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
                "type": [
                  "number",
                  "null"
                ],
                "minimum": 0,
                "maximum": 2,
                "default": 1,
                "example": 1
              },
              "top_p": {
                "type": [
                  "number",
                  "null"
                ],
                "minimum": 0,
                "maximum": 1,
                "default": 1,
                "example": 1,
                "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
              },
              "response_format": {
                "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                "oneOf": [
                  {
                    "type": "string",
                    "description": "`auto` is the default value\n",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "Text",
                    "description": "Default response format. Used to generate text responses.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `text`.",
                        "enum": [
                          "text"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON object",
                    "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_object`.",
                        "enum": [
                          "json_object"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON schema",
                    "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_schema`.",
                        "enum": [
                          "json_schema"
                        ]
                      },
                      "json_schema": {
                        "type": "object",
                        "title": "JSON schema",
                        "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                        "properties": {
                          "description": {
                            "type": "string",
                            "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                          },
                          "schema": {
                            "type": "object",
                            "title": "JSON schema",
                            "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                            "additionalProperties": true
                          },
                          "strict": {
                            "type": [
                              "boolean",
                              "null"
                            ],
                            "default": false,
                            "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "json_schema"
                    ]
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "name",
              "description",
              "model",
              "instructions",
              "tools",
              "metadata"
            ]
          }
        ]
      }
    },
    {
      "id": "post_assistants__assistant_id_",
      "operationId": "modifyAssistant",
      "name": "Modify Assistant",
      "description": "Modifies an assistant.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_assistants__assistant_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/assistants/{assistant_id}"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "assistant_id"
              ],
              "properties": {
                "assistant_id": {
                  "type": "string",
                  "description": "The ID of the assistant to modify."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "model": {
                    "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "o3-mini",
                          "o3-mini-2025-01-31",
                          "o1",
                          "o1-2024-12-17",
                          "gpt-4o",
                          "gpt-4o-2024-11-20",
                          "gpt-4o-2024-08-06",
                          "gpt-4o-2024-05-13",
                          "gpt-4o-mini",
                          "gpt-4o-mini-2024-07-18",
                          "gpt-4.5-preview",
                          "gpt-4.5-preview-2025-02-27",
                          "gpt-4-turbo",
                          "gpt-4-turbo-2024-04-09",
                          "gpt-4-0125-preview",
                          "gpt-4-turbo-preview",
                          "gpt-4-1106-preview",
                          "gpt-4-vision-preview",
                          "gpt-4",
                          "gpt-4-0314",
                          "gpt-4-0613",
                          "gpt-4-32k",
                          "gpt-4-32k-0314",
                          "gpt-4-32k-0613",
                          "gpt-3.5-turbo",
                          "gpt-3.5-turbo-16k",
                          "gpt-3.5-turbo-0613",
                          "gpt-3.5-turbo-1106",
                          "gpt-3.5-turbo-0125",
                          "gpt-3.5-turbo-16k-0613"
                        ]
                      }
                    ]
                  },
                  "reasoning_effort": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "low",
                      "medium",
                      "high"
                    ],
                    "default": "medium",
                    "description": "**o-series models only** \n\nConstrains effort on reasoning for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n"
                  },
                  "name": {
                    "description": "The name of the assistant. The maximum length is 256 characters.\n",
                    "type": [
                      "string",
                      "null"
                    ],
                    "maxLength": 256
                  },
                  "description": {
                    "description": "The description of the assistant. The maximum length is 512 characters.\n",
                    "type": [
                      "string",
                      "null"
                    ],
                    "maxLength": 512
                  },
                  "instructions": {
                    "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n",
                    "type": [
                      "string",
                      "null"
                    ],
                    "maxLength": 256000
                  },
                  "tools": {
                    "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n",
                    "default": [],
                    "type": "array",
                    "maxItems": 128,
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "title": "Code interpreter tool",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of tool being defined: `code_interpreter`",
                              "enum": [
                                "code_interpreter"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "FileSearch tool",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of tool being defined: `file_search`",
                              "enum": [
                                "file_search"
                              ]
                            },
                            "file_search": {
                              "type": "object",
                              "description": "Overrides for the file search tool.",
                              "properties": {
                                "max_num_results": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 50,
                                  "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                                },
                                "ranking_options": {
                                  "title": "File search tool call ranking options",
                                  "type": "object",
                                  "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                                  "properties": {
                                    "ranker": {
                                      "type": "string",
                                      "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                      "enum": [
                                        "auto",
                                        "default_2024_08_21"
                                      ]
                                    },
                                    "score_threshold": {
                                      "type": "number",
                                      "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                      "minimum": 0,
                                      "maximum": 1
                                    }
                                  },
                                  "required": [
                                    "score_threshold"
                                  ]
                                }
                              }
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "Function tool",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of tool being defined: `function`",
                              "enum": [
                                "function"
                              ]
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "description": "A description of what the function does, used by the model to choose when and how to call the function."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                                },
                                "parameters": {
                                  "type": "object",
                                  "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                                  "additionalProperties": true
                                },
                                "strict": {
                                  "type": [
                                    "boolean",
                                    "null"
                                  ],
                                  "default": false,
                                  "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "function"
                          ]
                        }
                      ]
                    }
                  },
                  "tool_resources": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                    "properties": {
                      "code_interpreter": {
                        "type": "object",
                        "properties": {
                          "file_ids": {
                            "type": "array",
                            "description": "Overrides the list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                            "default": [],
                            "maxItems": 20,
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "file_search": {
                        "type": "object",
                        "properties": {
                          "vector_store_ids": {
                            "type": "array",
                            "description": "Overrides the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                            "maxItems": 1,
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "metadata": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "temperature": {
                    "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
                    "type": [
                      "number",
                      "null"
                    ],
                    "minimum": 0,
                    "maximum": 2,
                    "default": 1,
                    "example": 1
                  },
                  "top_p": {
                    "type": [
                      "number",
                      "null"
                    ],
                    "minimum": 0,
                    "maximum": 1,
                    "default": 1,
                    "example": 1,
                    "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
                  },
                  "response_format": {
                    "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "`auto` is the default value\n",
                        "enum": [
                          "auto"
                        ]
                      },
                      {
                        "type": "object",
                        "title": "Text",
                        "description": "Default response format. Used to generate text responses.\n",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of response format being defined. Always `text`.",
                            "enum": [
                              "text"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "type": "object",
                        "title": "JSON object",
                        "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of response format being defined. Always `json_object`.",
                            "enum": [
                              "json_object"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "type": "object",
                        "title": "JSON schema",
                        "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of response format being defined. Always `json_schema`.",
                            "enum": [
                              "json_schema"
                            ]
                          },
                          "json_schema": {
                            "type": "object",
                            "title": "JSON schema",
                            "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                            "properties": {
                              "description": {
                                "type": "string",
                                "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                              },
                              "schema": {
                                "type": "object",
                                "title": "JSON schema",
                                "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                                "additionalProperties": true
                              },
                              "strict": {
                                "type": [
                                  "boolean",
                                  "null"
                                ],
                                "default": false,
                                "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "json_schema"
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                }
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_assistants__assistant_id_/output-200.schema.json",
            "type": "object",
            "title": "Assistant",
            "description": "Represents an `assistant` that can call the model and use tools.",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `assistant`.",
                "type": "string",
                "enum": [
                  "assistant"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the assistant was created.",
                "type": "integer"
              },
              "name": {
                "description": "The name of the assistant. The maximum length is 256 characters.\n",
                "type": [
                  "string",
                  "null"
                ],
                "maxLength": 256
              },
              "description": {
                "description": "The description of the assistant. The maximum length is 512 characters.\n",
                "type": [
                  "string",
                  "null"
                ],
                "maxLength": 512
              },
              "model": {
                "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n",
                "type": "string"
              },
              "instructions": {
                "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n",
                "type": [
                  "string",
                  "null"
                ],
                "maxLength": 256000
              },
              "tools": {
                "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n",
                "default": [],
                "type": "array",
                "maxItems": 128,
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Code interpreter tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `code_interpreter`",
                          "enum": [
                            "code_interpreter"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "FileSearch tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `file_search`",
                          "enum": [
                            "file_search"
                          ]
                        },
                        "file_search": {
                          "type": "object",
                          "description": "Overrides for the file search tool.",
                          "properties": {
                            "max_num_results": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 50,
                              "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                            },
                            "ranking_options": {
                              "title": "File search tool call ranking options",
                              "type": "object",
                              "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                              "properties": {
                                "ranker": {
                                  "type": "string",
                                  "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                  "enum": [
                                    "auto",
                                    "default_2024_08_21"
                                  ]
                                },
                                "score_threshold": {
                                  "type": "number",
                                  "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                  "minimum": 0,
                                  "maximum": 1
                                }
                              },
                              "required": [
                                "score_threshold"
                              ]
                            }
                          }
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Function tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `function`",
                          "enum": [
                            "function"
                          ]
                        },
                        "function": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "description": "A description of what the function does, used by the model to choose when and how to call the function."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                            },
                            "parameters": {
                              "type": "object",
                              "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                              "additionalProperties": true
                            },
                            "strict": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "default": false,
                              "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "function"
                      ]
                    }
                  ]
                }
              },
              "tool_resources": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                "properties": {
                  "code_interpreter": {
                    "type": "object",
                    "properties": {
                      "file_ids": {
                        "type": "array",
                        "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.\n",
                        "default": [],
                        "maxItems": 20,
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "file_search": {
                    "type": "object",
                    "properties": {
                      "vector_store_ids": {
                        "type": "array",
                        "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                        "maxItems": 1,
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "temperature": {
                "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
                "type": [
                  "number",
                  "null"
                ],
                "minimum": 0,
                "maximum": 2,
                "default": 1,
                "example": 1
              },
              "top_p": {
                "type": [
                  "number",
                  "null"
                ],
                "minimum": 0,
                "maximum": 1,
                "default": 1,
                "example": 1,
                "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
              },
              "response_format": {
                "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                "oneOf": [
                  {
                    "type": "string",
                    "description": "`auto` is the default value\n",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "Text",
                    "description": "Default response format. Used to generate text responses.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `text`.",
                        "enum": [
                          "text"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON object",
                    "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_object`.",
                        "enum": [
                          "json_object"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON schema",
                    "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_schema`.",
                        "enum": [
                          "json_schema"
                        ]
                      },
                      "json_schema": {
                        "type": "object",
                        "title": "JSON schema",
                        "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                        "properties": {
                          "description": {
                            "type": "string",
                            "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                          },
                          "schema": {
                            "type": "object",
                            "title": "JSON schema",
                            "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                            "additionalProperties": true
                          },
                          "strict": {
                            "type": [
                              "boolean",
                              "null"
                            ],
                            "default": false,
                            "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "json_schema"
                    ]
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "name",
              "description",
              "model",
              "instructions",
              "tools",
              "metadata"
            ]
          }
        ]
      }
    },
    {
      "id": "delete_assistants__assistant_id_",
      "operationId": "deleteAssistant",
      "name": "Delete Assistant",
      "description": "Delete an assistant.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_assistants__assistant_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/assistants/{assistant_id}"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "assistant_id"
              ],
              "properties": {
                "assistant_id": {
                  "type": "string",
                  "description": "The ID of the assistant to delete."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_assistants__assistant_id_/output-200.schema.json",
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              },
              "object": {
                "type": "string",
                "enum": [
                  "assistant.deleted"
                ]
              }
            },
            "required": [
              "id",
              "object",
              "deleted"
            ]
          }
        ]
      }
    },
    {
      "id": "post_audio_speech",
      "operationId": "createSpeech",
      "name": "Create Speech",
      "description": "Generates audio from the input text.",
      "schema": {
        "tags": [
          "Audio"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_audio_speech/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/audio/speech"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "model": {
                    "description": "One of the available [TTS models](/docs/models#tts): `tts-1`, `tts-1-hd` or `gpt-4o-mini-tts`.\n",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "tts-1",
                          "tts-1-hd",
                          "gpt-4o-mini-tts"
                        ]
                      }
                    ]
                  },
                  "input": {
                    "type": "string",
                    "description": "The text to generate audio for. The maximum length is 4096 characters.",
                    "maxLength": 4096
                  },
                  "instructions": {
                    "type": "string",
                    "description": "Control the voice of your generated audio with additional instructions. Does not work with `tts-1` or `tts-1-hd`.",
                    "maxLength": 4096
                  },
                  "voice": {
                    "description": "The voice to use when generating the audio. Supported voices are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`, `shimmer`, and `verse`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech#voice-options).",
                    "example": "ash",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "alloy",
                          "ash",
                          "ballad",
                          "coral",
                          "echo",
                          "fable",
                          "onyx",
                          "nova",
                          "sage",
                          "shimmer",
                          "verse"
                        ]
                      }
                    ]
                  },
                  "response_format": {
                    "description": "The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.",
                    "default": "mp3",
                    "type": "string",
                    "enum": [
                      "mp3",
                      "opus",
                      "aac",
                      "flac",
                      "wav",
                      "pcm"
                    ]
                  },
                  "speed": {
                    "description": "The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.",
                    "type": "number",
                    "default": 1,
                    "minimum": 0.25,
                    "maximum": 4
                  }
                },
                "required": [
                  "model",
                  "input",
                  "voice"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": []
      }
    },
    {
      "id": "post_audio_transcriptions",
      "operationId": "createTranscription",
      "name": "Create Transcription",
      "description": "Transcribes audio into the input language.",
      "schema": {
        "tags": [
          "Audio"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_audio_transcriptions/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/audio/transcriptions"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "multipart/form-data"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "file": {
                    "description": "The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n",
                    "type": "string",
                    "format": "binary"
                  },
                  "model": {
                    "description": "ID of the model to use. The options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1` (which is powered by our open source Whisper V2 model).\n",
                    "example": "gpt-4o-transcribe",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "whisper-1",
                          "gpt-4o-transcribe",
                          "gpt-4o-mini-transcribe"
                        ]
                      }
                    ]
                  },
                  "language": {
                    "description": "The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format will improve accuracy and latency.\n",
                    "type": "string"
                  },
                  "prompt": {
                    "description": "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should match the audio language.\n",
                    "type": "string"
                  },
                  "response_format": {
                    "description": "The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. For `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`, the only supported format is `json`.\n",
                    "type": "string",
                    "enum": [
                      "json",
                      "text",
                      "srt",
                      "verbose_json",
                      "vtt"
                    ],
                    "default": "json"
                  },
                  "temperature": {
                    "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n",
                    "type": "number",
                    "default": 0
                  },
                  "include[]": {
                    "description": "Additional information to include in the transcription response. \n`logprobs` will return the log probabilities of the tokens in the \nresponse to understand the model's confidence in the transcription. \n`logprobs` only works with response_format set to `json` and only with \nthe models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`.\n",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "logprobs"
                      ],
                      "default": []
                    }
                  },
                  "timestamp_granularities[]": {
                    "description": "The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.\n",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "word",
                        "segment"
                      ]
                    },
                    "default": [
                      "segment"
                    ]
                  },
                  "stream": {
                    "description": "If set to true, the model response data will be streamed to the client\nas it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format). \nSee the [Streaming section of the Speech-to-Text guide](/docs/guides/speech-to-text?lang=curl#streaming-transcriptions)\nfor more information.\n\nNote: Streaming is not supported for the `whisper-1` model and will be ignored.\n",
                    "type": [
                      "boolean",
                      "null"
                    ],
                    "default": false
                  }
                },
                "required": [
                  "file",
                  "model"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": []
      }
    },
    {
      "id": "post_audio_translations",
      "operationId": "createTranslation",
      "name": "Create Translation",
      "description": "Translates audio into English.",
      "schema": {
        "tags": [
          "Audio"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_audio_translations/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/audio/translations"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "multipart/form-data"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "file": {
                    "description": "The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n",
                    "type": "string",
                    "format": "binary"
                  },
                  "model": {
                    "description": "ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.\n",
                    "example": "whisper-1",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "whisper-1"
                        ]
                      }
                    ]
                  },
                  "prompt": {
                    "description": "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should be in English.\n",
                    "type": "string"
                  },
                  "response_format": {
                    "description": "The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.\n",
                    "type": "string",
                    "enum": [
                      "json",
                      "text",
                      "srt",
                      "verbose_json",
                      "vtt"
                    ],
                    "default": "json"
                  },
                  "temperature": {
                    "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n",
                    "type": "number",
                    "default": 0
                  }
                },
                "required": [
                  "file",
                  "model"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": []
      }
    },
    {
      "id": "get_batches",
      "operationId": "listBatches",
      "name": "List Batches",
      "description": "List your organization's batches.",
      "schema": {
        "tags": [
          "Batch"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_batches/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/batches"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                },
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_batches/output-200.schema.json",
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "object": {
                      "type": "string",
                      "enum": [
                        "batch"
                      ],
                      "description": "The object type, which is always `batch`."
                    },
                    "endpoint": {
                      "type": "string",
                      "description": "The OpenAI API endpoint used by the batch."
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "object": {
                          "type": "string",
                          "description": "The object type, which is always `list`."
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string",
                                "description": "An error code identifying the error type."
                              },
                              "message": {
                                "type": "string",
                                "description": "A human-readable message providing more details about the error."
                              },
                              "param": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "The name of the parameter that caused the error, if applicable."
                              },
                              "line": {
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "description": "The line number of the input file where the error occurred, if applicable."
                              }
                            }
                          }
                        }
                      }
                    },
                    "input_file_id": {
                      "type": "string",
                      "description": "The ID of the input file for the batch."
                    },
                    "completion_window": {
                      "type": "string",
                      "description": "The time frame within which the batch should be processed."
                    },
                    "status": {
                      "type": "string",
                      "description": "The current status of the batch.",
                      "enum": [
                        "validating",
                        "failed",
                        "in_progress",
                        "finalizing",
                        "completed",
                        "expired",
                        "cancelling",
                        "cancelled"
                      ]
                    },
                    "output_file_id": {
                      "type": "string",
                      "description": "The ID of the file containing the outputs of successfully executed requests."
                    },
                    "error_file_id": {
                      "type": "string",
                      "description": "The ID of the file containing the outputs of requests with errors."
                    },
                    "created_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the batch was created."
                    },
                    "in_progress_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the batch started processing."
                    },
                    "expires_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the batch will expire."
                    },
                    "finalizing_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the batch started finalizing."
                    },
                    "completed_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the batch was completed."
                    },
                    "failed_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the batch failed."
                    },
                    "expired_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the batch expired."
                    },
                    "cancelling_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the batch started cancelling."
                    },
                    "cancelled_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the batch was cancelled."
                    },
                    "request_counts": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of requests in the batch."
                        },
                        "completed": {
                          "type": "integer",
                          "description": "Number of requests that have been completed successfully."
                        },
                        "failed": {
                          "type": "integer",
                          "description": "Number of requests that have failed."
                        }
                      },
                      "required": [
                        "total",
                        "completed",
                        "failed"
                      ],
                      "description": "The request counts for different statuses within the batch."
                    },
                    "metadata": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "id",
                    "object",
                    "endpoint",
                    "input_file_id",
                    "completion_window",
                    "status",
                    "created_at"
                  ]
                }
              },
              "first_id": {
                "type": "string",
                "example": "batch_abc123"
              },
              "last_id": {
                "type": "string",
                "example": "batch_abc456"
              },
              "has_more": {
                "type": "boolean"
              },
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ]
              }
            },
            "required": [
              "object",
              "data",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "post_batches",
      "operationId": "createBatch",
      "name": "Create Batch",
      "description": "Creates and executes a batch from an uploaded file of requests",
      "schema": {
        "tags": [
          "Batch"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_batches/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/batches"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "required": [
                  "input_file_id",
                  "endpoint",
                  "completion_window"
                ],
                "properties": {
                  "input_file_id": {
                    "type": "string",
                    "description": "The ID of an uploaded file that contains requests for the new batch.\n\nSee [upload file](/docs/api-reference/files/create) for how to upload a file.\n\nYour input file must be formatted as a [JSONL file](/docs/api-reference/batch/request-input), and must be uploaded with the purpose `batch`. The file can contain up to 50,000 requests, and can be up to 200 MB in size.\n"
                  },
                  "endpoint": {
                    "type": "string",
                    "enum": [
                      "/v1/responses",
                      "/v1/chat/completions",
                      "/v1/embeddings",
                      "/v1/completions"
                    ],
                    "description": "The endpoint to be used for all requests in the batch. Currently `/v1/responses`, `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch."
                  },
                  "completion_window": {
                    "type": "string",
                    "enum": [
                      "24h"
                    ],
                    "description": "The time frame within which the batch should be processed. Currently only `24h` is supported."
                  },
                  "metadata": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_batches/output-200.schema.json",
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "object": {
                "type": "string",
                "enum": [
                  "batch"
                ],
                "description": "The object type, which is always `batch`."
              },
              "endpoint": {
                "type": "string",
                "description": "The OpenAI API endpoint used by the batch."
              },
              "errors": {
                "type": "object",
                "properties": {
                  "object": {
                    "type": "string",
                    "description": "The object type, which is always `list`."
                  },
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "An error code identifying the error type."
                        },
                        "message": {
                          "type": "string",
                          "description": "A human-readable message providing more details about the error."
                        },
                        "param": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The name of the parameter that caused the error, if applicable."
                        },
                        "line": {
                          "type": [
                            "integer",
                            "null"
                          ],
                          "description": "The line number of the input file where the error occurred, if applicable."
                        }
                      }
                    }
                  }
                }
              },
              "input_file_id": {
                "type": "string",
                "description": "The ID of the input file for the batch."
              },
              "completion_window": {
                "type": "string",
                "description": "The time frame within which the batch should be processed."
              },
              "status": {
                "type": "string",
                "description": "The current status of the batch.",
                "enum": [
                  "validating",
                  "failed",
                  "in_progress",
                  "finalizing",
                  "completed",
                  "expired",
                  "cancelling",
                  "cancelled"
                ]
              },
              "output_file_id": {
                "type": "string",
                "description": "The ID of the file containing the outputs of successfully executed requests."
              },
              "error_file_id": {
                "type": "string",
                "description": "The ID of the file containing the outputs of requests with errors."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch was created."
              },
              "in_progress_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch started processing."
              },
              "expires_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch will expire."
              },
              "finalizing_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch started finalizing."
              },
              "completed_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch was completed."
              },
              "failed_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch failed."
              },
              "expired_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch expired."
              },
              "cancelling_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch started cancelling."
              },
              "cancelled_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch was cancelled."
              },
              "request_counts": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "Total number of requests in the batch."
                  },
                  "completed": {
                    "type": "integer",
                    "description": "Number of requests that have been completed successfully."
                  },
                  "failed": {
                    "type": "integer",
                    "description": "Number of requests that have failed."
                  }
                },
                "required": [
                  "total",
                  "completed",
                  "failed"
                ],
                "description": "The request counts for different statuses within the batch."
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "id",
              "object",
              "endpoint",
              "input_file_id",
              "completion_window",
              "status",
              "created_at"
            ]
          }
        ]
      }
    },
    {
      "id": "get_batches__batch_id_",
      "operationId": "retrieveBatch",
      "name": "Retrieve Batch",
      "description": "Retrieves a batch.",
      "schema": {
        "tags": [
          "Batch"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_batches__batch_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/batches/{batch_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "batch_id"
              ],
              "properties": {
                "batch_id": {
                  "type": "string",
                  "description": "The ID of the batch to retrieve."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_batches__batch_id_/output-200.schema.json",
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "object": {
                "type": "string",
                "enum": [
                  "batch"
                ],
                "description": "The object type, which is always `batch`."
              },
              "endpoint": {
                "type": "string",
                "description": "The OpenAI API endpoint used by the batch."
              },
              "errors": {
                "type": "object",
                "properties": {
                  "object": {
                    "type": "string",
                    "description": "The object type, which is always `list`."
                  },
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "An error code identifying the error type."
                        },
                        "message": {
                          "type": "string",
                          "description": "A human-readable message providing more details about the error."
                        },
                        "param": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The name of the parameter that caused the error, if applicable."
                        },
                        "line": {
                          "type": [
                            "integer",
                            "null"
                          ],
                          "description": "The line number of the input file where the error occurred, if applicable."
                        }
                      }
                    }
                  }
                }
              },
              "input_file_id": {
                "type": "string",
                "description": "The ID of the input file for the batch."
              },
              "completion_window": {
                "type": "string",
                "description": "The time frame within which the batch should be processed."
              },
              "status": {
                "type": "string",
                "description": "The current status of the batch.",
                "enum": [
                  "validating",
                  "failed",
                  "in_progress",
                  "finalizing",
                  "completed",
                  "expired",
                  "cancelling",
                  "cancelled"
                ]
              },
              "output_file_id": {
                "type": "string",
                "description": "The ID of the file containing the outputs of successfully executed requests."
              },
              "error_file_id": {
                "type": "string",
                "description": "The ID of the file containing the outputs of requests with errors."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch was created."
              },
              "in_progress_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch started processing."
              },
              "expires_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch will expire."
              },
              "finalizing_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch started finalizing."
              },
              "completed_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch was completed."
              },
              "failed_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch failed."
              },
              "expired_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch expired."
              },
              "cancelling_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch started cancelling."
              },
              "cancelled_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch was cancelled."
              },
              "request_counts": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "Total number of requests in the batch."
                  },
                  "completed": {
                    "type": "integer",
                    "description": "Number of requests that have been completed successfully."
                  },
                  "failed": {
                    "type": "integer",
                    "description": "Number of requests that have failed."
                  }
                },
                "required": [
                  "total",
                  "completed",
                  "failed"
                ],
                "description": "The request counts for different statuses within the batch."
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "id",
              "object",
              "endpoint",
              "input_file_id",
              "completion_window",
              "status",
              "created_at"
            ]
          }
        ]
      }
    },
    {
      "id": "post_batches__batch_id__cancel",
      "operationId": "cancelBatch",
      "name": "Cancel Batch",
      "description": "Cancels an in-progress batch. The batch will be in status `cancelling` for up to 10 minutes, before changing to `cancelled`, where it will have partial results (if any) available in the output file.",
      "schema": {
        "tags": [
          "Batch"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_batches__batch_id__cancel/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/batches/{batch_id}/cancel"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "batch_id"
              ],
              "properties": {
                "batch_id": {
                  "type": "string",
                  "description": "The ID of the batch to cancel."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_batches__batch_id__cancel/output-200.schema.json",
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "object": {
                "type": "string",
                "enum": [
                  "batch"
                ],
                "description": "The object type, which is always `batch`."
              },
              "endpoint": {
                "type": "string",
                "description": "The OpenAI API endpoint used by the batch."
              },
              "errors": {
                "type": "object",
                "properties": {
                  "object": {
                    "type": "string",
                    "description": "The object type, which is always `list`."
                  },
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "An error code identifying the error type."
                        },
                        "message": {
                          "type": "string",
                          "description": "A human-readable message providing more details about the error."
                        },
                        "param": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The name of the parameter that caused the error, if applicable."
                        },
                        "line": {
                          "type": [
                            "integer",
                            "null"
                          ],
                          "description": "The line number of the input file where the error occurred, if applicable."
                        }
                      }
                    }
                  }
                }
              },
              "input_file_id": {
                "type": "string",
                "description": "The ID of the input file for the batch."
              },
              "completion_window": {
                "type": "string",
                "description": "The time frame within which the batch should be processed."
              },
              "status": {
                "type": "string",
                "description": "The current status of the batch.",
                "enum": [
                  "validating",
                  "failed",
                  "in_progress",
                  "finalizing",
                  "completed",
                  "expired",
                  "cancelling",
                  "cancelled"
                ]
              },
              "output_file_id": {
                "type": "string",
                "description": "The ID of the file containing the outputs of successfully executed requests."
              },
              "error_file_id": {
                "type": "string",
                "description": "The ID of the file containing the outputs of requests with errors."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch was created."
              },
              "in_progress_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch started processing."
              },
              "expires_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch will expire."
              },
              "finalizing_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch started finalizing."
              },
              "completed_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch was completed."
              },
              "failed_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch failed."
              },
              "expired_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch expired."
              },
              "cancelling_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch started cancelling."
              },
              "cancelled_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the batch was cancelled."
              },
              "request_counts": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "Total number of requests in the batch."
                  },
                  "completed": {
                    "type": "integer",
                    "description": "Number of requests that have been completed successfully."
                  },
                  "failed": {
                    "type": "integer",
                    "description": "Number of requests that have failed."
                  }
                },
                "required": [
                  "total",
                  "completed",
                  "failed"
                ],
                "description": "The request counts for different statuses within the batch."
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "id",
              "object",
              "endpoint",
              "input_file_id",
              "completion_window",
              "status",
              "created_at"
            ]
          }
        ]
      }
    },
    {
      "id": "get_chat_completions",
      "operationId": "listChatCompletions",
      "name": "List Chat Completions",
      "description": "List stored Chat Completions. Only Chat Completions that have been stored\nwith the `store` parameter set to `true` will be returned.\n",
      "schema": {
        "tags": [
          "Chat"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_chat_completions/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/chat/completions"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "model": {
                  "type": "string",
                  "description": "The model used to generate the Chat Completions."
                },
                "metadata": {
                  "type": "object",
                  "description": "A list of metadata keys to filter the Chat Completions by. Example:\n\n`metadata[key1]=value1&metadata[key2]=value2`\n",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "after": {
                  "type": "string",
                  "description": "Identifier for the last chat completion from the previous pagination request."
                },
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "Number of Chat Completions to retrieve."
                },
                "order": {
                  "type": "string",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "default": "asc",
                  "description": "Sort order for Chat Completions by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_chat_completions/output-200.schema.json",
            "type": "object",
            "title": "ChatCompletionList",
            "description": "An object representing a list of Chat Completions.\n",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ],
                "default": "list",
                "description": "The type of this object. It is always set to \"list\".\n"
              },
              "data": {
                "type": "array",
                "description": "An array of chat completion objects.\n",
                "items": {
                  "type": "object",
                  "description": "Represents a chat completion response returned by model, based on the provided input.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "A unique identifier for the chat completion."
                    },
                    "choices": {
                      "type": "array",
                      "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1.",
                      "items": {
                        "type": "object",
                        "required": [
                          "finish_reason",
                          "index",
                          "message",
                          "logprobs"
                        ],
                        "properties": {
                          "finish_reason": {
                            "type": "string",
                            "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n",
                            "enum": [
                              "stop",
                              "length",
                              "tool_calls",
                              "content_filter",
                              "function_call"
                            ]
                          },
                          "index": {
                            "type": "integer",
                            "description": "The index of the choice in the list of choices."
                          },
                          "message": {
                            "type": "object",
                            "description": "A chat completion message generated by the model.",
                            "properties": {
                              "content": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "The contents of the message."
                              },
                              "refusal": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "The refusal message generated by the model."
                              },
                              "tool_calls": {
                                "type": "array",
                                "description": "The tool calls generated by the model, such as function calls.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The ID of the tool call."
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "function"
                                      ],
                                      "description": "The type of the tool. Currently, only `function` is supported."
                                    },
                                    "function": {
                                      "type": "object",
                                      "description": "The function that the model called.",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "The name of the function to call."
                                        },
                                        "arguments": {
                                          "type": "string",
                                          "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                                        }
                                      },
                                      "required": [
                                        "name",
                                        "arguments"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type",
                                    "function"
                                  ]
                                }
                              },
                              "annotations": {
                                "type": "array",
                                "description": "Annotations for the message, when applicable, as when using the\n[web search tool](/docs/guides/tools-web-search?api-mode=chat).\n",
                                "items": {
                                  "type": "object",
                                  "description": "A URL citation when using web search.\n",
                                  "required": [
                                    "type",
                                    "url_citation"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "description": "The type of the URL citation. Always `url_citation`.",
                                      "enum": [
                                        "url_citation"
                                      ]
                                    },
                                    "url_citation": {
                                      "type": "object",
                                      "description": "A URL citation when using web search.",
                                      "required": [
                                        "end_index",
                                        "start_index",
                                        "url",
                                        "title"
                                      ],
                                      "properties": {
                                        "end_index": {
                                          "type": "integer",
                                          "description": "The index of the last character of the URL citation in the message."
                                        },
                                        "start_index": {
                                          "type": "integer",
                                          "description": "The index of the first character of the URL citation in the message."
                                        },
                                        "url": {
                                          "type": "string",
                                          "description": "The URL of the web resource."
                                        },
                                        "title": {
                                          "type": "string",
                                          "description": "The title of the web resource."
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "role": {
                                "type": "string",
                                "enum": [
                                  "assistant"
                                ],
                                "description": "The role of the author of this message."
                              },
                              "function_call": {
                                "type": "object",
                                "deprecated": true,
                                "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
                                "properties": {
                                  "arguments": {
                                    "type": "string",
                                    "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the function to call."
                                  }
                                },
                                "required": [
                                  "name",
                                  "arguments"
                                ]
                              },
                              "audio": {
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "description": "If the audio output modality is requested, this object contains data\nabout the audio response from the model. [Learn more](/docs/guides/audio).\n",
                                "required": [
                                  "id",
                                  "expires_at",
                                  "data",
                                  "transcript"
                                ],
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "Unique identifier for this audio response."
                                  },
                                  "expires_at": {
                                    "type": "integer",
                                    "description": "The Unix timestamp (in seconds) for when this audio response will\nno longer be accessible on the server for use in multi-turn\nconversations.\n"
                                  },
                                  "data": {
                                    "type": "string",
                                    "description": "Base64 encoded audio bytes generated by the model, in the format\nspecified in the request.\n"
                                  },
                                  "transcript": {
                                    "type": "string",
                                    "description": "Transcript of the audio generated by the model."
                                  }
                                }
                              }
                            },
                            "required": [
                              "role",
                              "content",
                              "refusal"
                            ]
                          },
                          "logprobs": {
                            "description": "Log probability information for the choice.",
                            "type": [
                              "object",
                              "null"
                            ],
                            "properties": {
                              "content": {
                                "description": "A list of message content tokens with log probability information.",
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "token": {
                                      "description": "The token.",
                                      "type": "string"
                                    },
                                    "logprob": {
                                      "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                      "type": "number"
                                    },
                                    "bytes": {
                                      "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": "integer"
                                      }
                                    },
                                    "top_logprobs": {
                                      "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.",
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "token": {
                                            "description": "The token.",
                                            "type": "string"
                                          },
                                          "logprob": {
                                            "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                            "type": "number"
                                          },
                                          "bytes": {
                                            "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                            "type": [
                                              "array",
                                              "null"
                                            ],
                                            "items": {
                                              "type": "integer"
                                            }
                                          }
                                        },
                                        "required": [
                                          "token",
                                          "logprob",
                                          "bytes"
                                        ]
                                      }
                                    }
                                  },
                                  "required": [
                                    "token",
                                    "logprob",
                                    "bytes",
                                    "top_logprobs"
                                  ]
                                }
                              },
                              "refusal": {
                                "description": "A list of message refusal tokens with log probability information.",
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "token": {
                                      "description": "The token.",
                                      "type": "string"
                                    },
                                    "logprob": {
                                      "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                      "type": "number"
                                    },
                                    "bytes": {
                                      "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": "integer"
                                      }
                                    },
                                    "top_logprobs": {
                                      "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.",
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "token": {
                                            "description": "The token.",
                                            "type": "string"
                                          },
                                          "logprob": {
                                            "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                            "type": "number"
                                          },
                                          "bytes": {
                                            "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                            "type": [
                                              "array",
                                              "null"
                                            ],
                                            "items": {
                                              "type": "integer"
                                            }
                                          }
                                        },
                                        "required": [
                                          "token",
                                          "logprob",
                                          "bytes"
                                        ]
                                      }
                                    }
                                  },
                                  "required": [
                                    "token",
                                    "logprob",
                                    "bytes",
                                    "top_logprobs"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "content",
                              "refusal"
                            ]
                          }
                        }
                      }
                    },
                    "created": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) of when the chat completion was created."
                    },
                    "model": {
                      "type": "string",
                      "description": "The model used for the chat completion."
                    },
                    "service_tier": {
                      "description": "The service tier used for processing the request.",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "scale",
                        "default"
                      ],
                      "example": "scale"
                    },
                    "system_fingerprint": {
                      "type": "string",
                      "description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
                    },
                    "object": {
                      "type": "string",
                      "description": "The object type, which is always `chat.completion`.",
                      "enum": [
                        "chat.completion"
                      ]
                    },
                    "usage": {
                      "type": "object",
                      "description": "Usage statistics for the completion request.",
                      "properties": {
                        "completion_tokens": {
                          "type": "integer",
                          "default": 0,
                          "description": "Number of tokens in the generated completion."
                        },
                        "prompt_tokens": {
                          "type": "integer",
                          "default": 0,
                          "description": "Number of tokens in the prompt."
                        },
                        "total_tokens": {
                          "type": "integer",
                          "default": 0,
                          "description": "Total number of tokens used in the request (prompt + completion)."
                        },
                        "completion_tokens_details": {
                          "type": "object",
                          "description": "Breakdown of tokens used in a completion.",
                          "properties": {
                            "accepted_prediction_tokens": {
                              "type": "integer",
                              "default": 0,
                              "description": "When using Predicted Outputs, the number of tokens in the\nprediction that appeared in the completion.\n"
                            },
                            "audio_tokens": {
                              "type": "integer",
                              "default": 0,
                              "description": "Audio input tokens generated by the model."
                            },
                            "reasoning_tokens": {
                              "type": "integer",
                              "default": 0,
                              "description": "Tokens generated by the model for reasoning."
                            },
                            "rejected_prediction_tokens": {
                              "type": "integer",
                              "default": 0,
                              "description": "When using Predicted Outputs, the number of tokens in the\nprediction that did not appear in the completion. However, like\nreasoning tokens, these tokens are still counted in the total\ncompletion tokens for purposes of billing, output, and context window\nlimits.\n"
                            }
                          }
                        },
                        "prompt_tokens_details": {
                          "type": "object",
                          "description": "Breakdown of tokens used in the prompt.",
                          "properties": {
                            "audio_tokens": {
                              "type": "integer",
                              "default": 0,
                              "description": "Audio input tokens present in the prompt."
                            },
                            "cached_tokens": {
                              "type": "integer",
                              "default": 0,
                              "description": "Cached tokens present in the prompt."
                            }
                          }
                        }
                      },
                      "required": [
                        "prompt_tokens",
                        "completion_tokens",
                        "total_tokens"
                      ]
                    }
                  },
                  "required": [
                    "choices",
                    "created",
                    "id",
                    "model",
                    "object"
                  ]
                }
              },
              "first_id": {
                "type": "string",
                "description": "The identifier of the first chat completion in the data array."
              },
              "last_id": {
                "type": "string",
                "description": "The identifier of the last chat completion in the data array."
              },
              "has_more": {
                "type": "boolean",
                "description": "Indicates whether there are more Chat Completions available."
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "post_chat_completions",
      "operationId": "createChatCompletion",
      "name": "Create Chat Completion",
      "description": "**Starting a new project?** We recommend trying [Responses](/docs/api-reference/responses) \nto take advantage of the latest OpenAI platform features. Compare\n[Chat Completions with Responses](/docs/guides/responses-vs-chat-completions?api-mode=responses).\n\n---\n\nCreates a model response for the given chat conversation. Learn more in the\n[text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),\nand [audio](/docs/guides/audio) guides.\n\nParameter support can differ depending on the model used to generate the\nresponse, particularly for newer reasoning models. Parameters that are only\nsupported for reasoning models are noted below. For the current state of \nunsupported parameters in reasoning models, \n[refer to the reasoning guide](/docs/guides/reasoning).\n",
      "schema": {
        "tags": [
          "Chat"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_chat_completions/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/chat/completions"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "allOf": [
                  {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "metadata": {
                            "type": [
                              "object",
                              "null"
                            ],
                            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "temperature": {
                            "type": [
                              "number",
                              "null"
                            ],
                            "minimum": 0,
                            "maximum": 2,
                            "default": 1,
                            "example": 1,
                            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.\n"
                          },
                          "top_p": {
                            "type": [
                              "number",
                              "null"
                            ],
                            "minimum": 0,
                            "maximum": 1,
                            "default": 1,
                            "example": 1,
                            "description": "An alternative to sampling with temperature, called nucleus sampling,\nwhere the model considers the results of the tokens with top_p probability\nmass. So 0.1 means only the tokens comprising the top 10% probability mass\nare considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
                          },
                          "user": {
                            "type": "string",
                            "example": "user-1234",
                            "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "messages": {
                        "description": "A list of messages comprising the conversation so far. Depending on the\n[model](/docs/models) you use, different message types (modalities) are\nsupported, like [text](/docs/guides/text-generation),\n[images](/docs/guides/vision), and [audio](/docs/guides/audio).\n",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "oneOf": [
                            {
                              "type": "object",
                              "title": "Developer message",
                              "description": "Developer-provided instructions that the model should follow, regardless of\nmessages sent by the user. With o1 models and newer, `developer` messages\nreplace the previous `system` messages.\n",
                              "properties": {
                                "content": {
                                  "description": "The contents of the developer message.",
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "description": "The contents of the developer message.",
                                      "title": "Text content"
                                    },
                                    {
                                      "type": "array",
                                      "description": "An array of content parts with a defined type. For developer messages, only type `text` is supported.",
                                      "title": "Array of content parts",
                                      "items": {
                                        "type": "object",
                                        "title": "Text content part",
                                        "description": "Learn about [text inputs](/docs/guides/text-generation).\n",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "text"
                                            ],
                                            "description": "The type of the content part."
                                          },
                                          "text": {
                                            "type": "string",
                                            "description": "The text content."
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "text"
                                        ]
                                      },
                                      "minItems": 1
                                    }
                                  ]
                                },
                                "role": {
                                  "type": "string",
                                  "enum": [
                                    "developer"
                                  ],
                                  "description": "The role of the messages author, in this case `developer`."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
                                }
                              },
                              "required": [
                                "content",
                                "role"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "System message",
                              "description": "Developer-provided instructions that the model should follow, regardless of\nmessages sent by the user. With o1 models and newer, use `developer` messages\nfor this purpose instead.\n",
                              "properties": {
                                "content": {
                                  "description": "The contents of the system message.",
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "description": "The contents of the system message.",
                                      "title": "Text content"
                                    },
                                    {
                                      "type": "array",
                                      "description": "An array of content parts with a defined type. For system messages, only type `text` is supported.",
                                      "title": "Array of content parts",
                                      "items": {
                                        "oneOf": [
                                          {
                                            "type": "object",
                                            "title": "Text content part",
                                            "description": "Learn about [text inputs](/docs/guides/text-generation).\n",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "text"
                                                ],
                                                "description": "The type of the content part."
                                              },
                                              "text": {
                                                "type": "string",
                                                "description": "The text content."
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "text"
                                            ]
                                          }
                                        ]
                                      },
                                      "minItems": 1
                                    }
                                  ]
                                },
                                "role": {
                                  "type": "string",
                                  "enum": [
                                    "system"
                                  ],
                                  "description": "The role of the messages author, in this case `system`."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
                                }
                              },
                              "required": [
                                "content",
                                "role"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "User message",
                              "description": "Messages sent by an end user, containing prompts or additional context\ninformation.\n",
                              "properties": {
                                "content": {
                                  "description": "The contents of the user message.\n",
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "description": "The text contents of the message.",
                                      "title": "Text content"
                                    },
                                    {
                                      "type": "array",
                                      "description": "An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text, image, or audio inputs.",
                                      "title": "Array of content parts",
                                      "items": {
                                        "oneOf": [
                                          {
                                            "type": "object",
                                            "title": "Text content part",
                                            "description": "Learn about [text inputs](/docs/guides/text-generation).\n",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "text"
                                                ],
                                                "description": "The type of the content part."
                                              },
                                              "text": {
                                                "type": "string",
                                                "description": "The text content."
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "text"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "title": "Image content part",
                                            "description": "Learn about [image inputs](/docs/guides/vision).\n",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "image_url"
                                                ],
                                                "description": "The type of the content part."
                                              },
                                              "image_url": {
                                                "type": "object",
                                                "properties": {
                                                  "url": {
                                                    "type": "string",
                                                    "description": "Either a URL of the image or the base64 encoded image data.",
                                                    "format": "uri"
                                                  },
                                                  "detail": {
                                                    "type": "string",
                                                    "description": "Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).",
                                                    "enum": [
                                                      "auto",
                                                      "low",
                                                      "high"
                                                    ],
                                                    "default": "auto"
                                                  }
                                                },
                                                "required": [
                                                  "url"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "image_url"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "title": "Audio content part",
                                            "description": "Learn about [audio inputs](/docs/guides/audio).\n",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "input_audio"
                                                ],
                                                "description": "The type of the content part. Always `input_audio`."
                                              },
                                              "input_audio": {
                                                "type": "object",
                                                "properties": {
                                                  "data": {
                                                    "type": "string",
                                                    "description": "Base64 encoded audio data."
                                                  },
                                                  "format": {
                                                    "type": "string",
                                                    "enum": [
                                                      "wav",
                                                      "mp3"
                                                    ],
                                                    "description": "The format of the encoded audio data. Currently supports \"wav\" and \"mp3\".\n"
                                                  }
                                                },
                                                "required": [
                                                  "data",
                                                  "format"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "input_audio"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "title": "File content part",
                                            "description": "Learn about [file inputs](/docs/guides/text) for text generation.\n",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "file"
                                                ],
                                                "description": "The type of the content part. Always `file`."
                                              },
                                              "file": {
                                                "type": "object",
                                                "properties": {
                                                  "filename": {
                                                    "type": "string",
                                                    "description": "The name of the file, used when passing the file to the model as a \nstring.\n"
                                                  },
                                                  "file_data": {
                                                    "type": "string",
                                                    "description": "The base64 encoded file data, used when passing the file to the model \nas a string.\n"
                                                  },
                                                  "file_id": {
                                                    "type": "string",
                                                    "description": "The ID of an uploaded file to use as input.\n"
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "file"
                                            ]
                                          }
                                        ]
                                      },
                                      "minItems": 1
                                    }
                                  ]
                                },
                                "role": {
                                  "type": "string",
                                  "enum": [
                                    "user"
                                  ],
                                  "description": "The role of the messages author, in this case `user`."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
                                }
                              },
                              "required": [
                                "content",
                                "role"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "Assistant message",
                              "description": "Messages sent by the model in response to user messages.\n",
                              "properties": {
                                "content": {
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "description": "The contents of the assistant message.",
                                      "title": "Text content"
                                    },
                                    {
                                      "type": "array",
                                      "description": "An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`.",
                                      "title": "Array of content parts",
                                      "items": {
                                        "oneOf": [
                                          {
                                            "type": "object",
                                            "title": "Text content part",
                                            "description": "Learn about [text inputs](/docs/guides/text-generation).\n",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "text"
                                                ],
                                                "description": "The type of the content part."
                                              },
                                              "text": {
                                                "type": "string",
                                                "description": "The text content."
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "text"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "title": "Refusal content part",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "refusal"
                                                ],
                                                "description": "The type of the content part."
                                              },
                                              "refusal": {
                                                "type": "string",
                                                "description": "The refusal message generated by the model."
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "refusal"
                                            ]
                                          }
                                        ]
                                      },
                                      "minItems": 1
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "description": "The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.\n"
                                },
                                "refusal": {
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "description": "The refusal message by the assistant."
                                },
                                "role": {
                                  "type": "string",
                                  "enum": [
                                    "assistant"
                                  ],
                                  "description": "The role of the messages author, in this case `assistant`."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
                                },
                                "audio": {
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "description": "Data about a previous audio response from the model. \n[Learn more](/docs/guides/audio).\n",
                                  "required": [
                                    "id"
                                  ],
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "Unique identifier for a previous audio response from the model.\n"
                                    }
                                  }
                                },
                                "tool_calls": {
                                  "type": "array",
                                  "description": "The tool calls generated by the model, such as function calls.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID of the tool call."
                                      },
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "function"
                                        ],
                                        "description": "The type of the tool. Currently, only `function` is supported."
                                      },
                                      "function": {
                                        "type": "object",
                                        "description": "The function that the model called.",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "The name of the function to call."
                                          },
                                          "arguments": {
                                            "type": "string",
                                            "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "arguments"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type",
                                      "function"
                                    ]
                                  }
                                },
                                "function_call": {
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "deprecated": true,
                                  "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
                                  "properties": {
                                    "arguments": {
                                      "type": "string",
                                      "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the function to call."
                                    }
                                  },
                                  "required": [
                                    "arguments",
                                    "name"
                                  ]
                                }
                              },
                              "required": [
                                "role"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "Tool message",
                              "properties": {
                                "role": {
                                  "type": "string",
                                  "enum": [
                                    "tool"
                                  ],
                                  "description": "The role of the messages author, in this case `tool`."
                                },
                                "content": {
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "description": "The contents of the tool message.",
                                      "title": "Text content"
                                    },
                                    {
                                      "type": "array",
                                      "description": "An array of content parts with a defined type. For tool messages, only type `text` is supported.",
                                      "title": "Array of content parts",
                                      "items": {
                                        "oneOf": [
                                          {
                                            "type": "object",
                                            "title": "Text content part",
                                            "description": "Learn about [text inputs](/docs/guides/text-generation).\n",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "text"
                                                ],
                                                "description": "The type of the content part."
                                              },
                                              "text": {
                                                "type": "string",
                                                "description": "The text content."
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "text"
                                            ]
                                          }
                                        ]
                                      },
                                      "minItems": 1
                                    }
                                  ],
                                  "description": "The contents of the tool message."
                                },
                                "tool_call_id": {
                                  "type": "string",
                                  "description": "Tool call that this message is responding to."
                                }
                              },
                              "required": [
                                "role",
                                "content",
                                "tool_call_id"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "Function message",
                              "deprecated": true,
                              "properties": {
                                "role": {
                                  "type": "string",
                                  "enum": [
                                    "function"
                                  ],
                                  "description": "The role of the messages author, in this case `function`."
                                },
                                "content": {
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "description": "The contents of the function message."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the function to call."
                                }
                              },
                              "required": [
                                "role",
                                "content",
                                "name"
                              ]
                            }
                          ]
                        }
                      },
                      "model": {
                        "description": "Model ID used to generate the response, like `gpt-4o` or `o1`. OpenAI\noffers a wide range of models with different capabilities, performance\ncharacteristics, and price points. Refer to the [model guide](/docs/models)\nto browse and compare available models.\n",
                        "example": "gpt-4o",
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "string",
                            "enum": [
                              "o3-mini",
                              "o3-mini-2025-01-31",
                              "o1",
                              "o1-2024-12-17",
                              "o1-preview",
                              "o1-preview-2024-09-12",
                              "o1-mini",
                              "o1-mini-2024-09-12",
                              "gpt-4o",
                              "gpt-4o-2024-11-20",
                              "gpt-4o-2024-08-06",
                              "gpt-4o-2024-05-13",
                              "gpt-4o-audio-preview",
                              "gpt-4o-audio-preview-2024-10-01",
                              "gpt-4o-audio-preview-2024-12-17",
                              "gpt-4o-mini-audio-preview",
                              "gpt-4o-mini-audio-preview-2024-12-17",
                              "gpt-4o-search-preview",
                              "gpt-4o-mini-search-preview",
                              "gpt-4o-search-preview-2025-03-11",
                              "gpt-4o-mini-search-preview-2025-03-11",
                              "chatgpt-4o-latest",
                              "gpt-4o-mini",
                              "gpt-4o-mini-2024-07-18",
                              "gpt-4-turbo",
                              "gpt-4-turbo-2024-04-09",
                              "gpt-4-0125-preview",
                              "gpt-4-turbo-preview",
                              "gpt-4-1106-preview",
                              "gpt-4-vision-preview",
                              "gpt-4",
                              "gpt-4-0314",
                              "gpt-4-0613",
                              "gpt-4-32k",
                              "gpt-4-32k-0314",
                              "gpt-4-32k-0613",
                              "gpt-3.5-turbo",
                              "gpt-3.5-turbo-16k",
                              "gpt-3.5-turbo-0301",
                              "gpt-3.5-turbo-0613",
                              "gpt-3.5-turbo-1106",
                              "gpt-3.5-turbo-0125",
                              "gpt-3.5-turbo-16k-0613"
                            ]
                          }
                        ]
                      },
                      "modalities": {
                        "type": [
                          "array",
                          "null"
                        ],
                        "description": "Output types that you would like the model to generate.\nMost models are capable of generating text, which is the default:\n\n`[\"text\"]`\n\nThe `gpt-4o-audio-preview` model can also be used to \n[generate audio](/docs/guides/audio). To request that this model generate \nboth text and audio responses, you can use:\n\n`[\"text\", \"audio\"]`\n",
                        "items": {
                          "type": "string",
                          "enum": [
                            "text",
                            "audio"
                          ]
                        }
                      },
                      "reasoning_effort": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "enum": [
                          "low",
                          "medium",
                          "high"
                        ],
                        "default": "medium",
                        "description": "**o-series models only** \n\nConstrains effort on reasoning for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n"
                      },
                      "max_completion_tokens": {
                        "description": "An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).\n",
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "frequency_penalty": {
                        "type": [
                          "number",
                          "null"
                        ],
                        "default": 0,
                        "minimum": -2,
                        "maximum": 2,
                        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on\ntheir existing frequency in the text so far, decreasing the model's\nlikelihood to repeat the same line verbatim.\n"
                      },
                      "presence_penalty": {
                        "type": [
                          "number",
                          "null"
                        ],
                        "default": 0,
                        "minimum": -2,
                        "maximum": 2,
                        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on\nwhether they appear in the text so far, increasing the model's likelihood\nto talk about new topics.\n"
                      },
                      "web_search_options": {
                        "type": "object",
                        "title": "Web search",
                        "description": "This tool searches the web for relevant results to use in a response.\nLearn more about the [web search tool](/docs/guides/tools-web-search?api-mode=chat).\n",
                        "properties": {
                          "user_location": {
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "type",
                              "approximate"
                            ],
                            "description": "Approximate location parameters for the search.\n",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of location approximation. Always `approximate`.\n",
                                "enum": [
                                  "approximate"
                                ]
                              },
                              "approximate": {
                                "type": "object",
                                "title": "Web search location",
                                "description": "Approximate location parameters for the search.",
                                "properties": {
                                  "country": {
                                    "type": "string",
                                    "description": "The two-letter \n[ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,\ne.g. `US`.\n"
                                  },
                                  "region": {
                                    "type": "string",
                                    "description": "Free text input for the region of the user, e.g. `California`.\n"
                                  },
                                  "city": {
                                    "type": "string",
                                    "description": "Free text input for the city of the user, e.g. `San Francisco`.\n"
                                  },
                                  "timezone": {
                                    "type": "string",
                                    "description": "The [IANA timezone](https://timeapi.io/documentation/iana-timezones) \nof the user, e.g. `America/Los_Angeles`.\n"
                                  }
                                }
                              }
                            }
                          },
                          "search_context_size": {
                            "type": "string",
                            "description": "High level guidance for the amount of context window space to use for the \nsearch. One of `low`, `medium`, or `high`. `medium` is the default.\n",
                            "enum": [
                              "low",
                              "medium",
                              "high"
                            ],
                            "default": "medium"
                          }
                        }
                      },
                      "top_logprobs": {
                        "description": "An integer between 0 and 20 specifying the number of most likely tokens to\nreturn at each token position, each with an associated log probability.\n`logprobs` must be set to `true` if this parameter is used.\n",
                        "type": [
                          "integer",
                          "null"
                        ],
                        "minimum": 0,
                        "maximum": 20
                      },
                      "response_format": {
                        "description": "An object specifying the format that the model must output.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables\nStructured Outputs which ensures the model will match your supplied JSON\nschema. Learn more in the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it.\n",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "Text",
                            "description": "Default response format. Used to generate text responses.\n",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of response format being defined. Always `text`.",
                                "enum": [
                                  "text"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          },
                          {
                            "type": "object",
                            "title": "JSON schema",
                            "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of response format being defined. Always `json_schema`.",
                                "enum": [
                                  "json_schema"
                                ]
                              },
                              "json_schema": {
                                "type": "object",
                                "title": "JSON schema",
                                "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                                "properties": {
                                  "description": {
                                    "type": "string",
                                    "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                                  },
                                  "schema": {
                                    "type": "object",
                                    "title": "JSON schema",
                                    "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                                    "additionalProperties": true
                                  },
                                  "strict": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "default": false,
                                    "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "json_schema"
                            ]
                          },
                          {
                            "type": "object",
                            "title": "JSON object",
                            "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of response format being defined. Always `json_object`.",
                                "enum": [
                                  "json_object"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          }
                        ]
                      },
                      "service_tier": {
                        "description": "Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:\n  - If set to 'auto', and the Project is Scale tier enabled, the system\n    will utilize scale tier credits until they are exhausted.\n  - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.\n  - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.\n  - When not set, the default behavior is 'auto'.\n\n  When this parameter is set, the response body will include the `service_tier` utilized.\n",
                        "type": [
                          "string",
                          "null"
                        ],
                        "enum": [
                          "auto",
                          "default"
                        ],
                        "default": "auto"
                      },
                      "audio": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "description": "Parameters for audio output. Required when audio output is requested with\n`modalities: [\"audio\"]`. [Learn more](/docs/guides/audio).\n",
                        "required": [
                          "voice",
                          "format"
                        ],
                        "properties": {
                          "voice": {
                            "example": "ash",
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "string",
                                "enum": [
                                  "alloy",
                                  "ash",
                                  "ballad",
                                  "coral",
                                  "echo",
                                  "fable",
                                  "onyx",
                                  "nova",
                                  "sage",
                                  "shimmer",
                                  "verse"
                                ]
                              }
                            ],
                            "description": "The voice the model uses to respond. Supported voices are \n`alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`, and `shimmer`.\n"
                          },
                          "format": {
                            "type": "string",
                            "enum": [
                              "wav",
                              "mp3",
                              "flac",
                              "opus",
                              "pcm16"
                            ],
                            "description": "Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,\n`opus`, or `pcm16`.\n"
                          }
                        }
                      },
                      "store": {
                        "type": [
                          "boolean",
                          "null"
                        ],
                        "default": false,
                        "description": "Whether or not to store the output of this chat completion request for \nuse in our [model distillation](/docs/guides/distillation) or\n[evals](/docs/guides/evals) products.\n"
                      },
                      "stream": {
                        "description": "If set to true, the model response data will be streamed to the client\nas it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\nSee the [Streaming section below](/docs/api-reference/chat/streaming)\nfor more information, along with the [streaming responses](/docs/guides/streaming-responses)\nguide for more information on how to handle the streaming events.\n",
                        "type": [
                          "boolean",
                          "null"
                        ],
                        "default": false
                      },
                      "stop": {
                        "description": "Up to 4 sequences where the API will stop generating further tokens. The\nreturned text will not contain the stop sequence.\n",
                        "default": null,
                        "oneOf": [
                          {
                            "type": [
                              "string",
                              "null"
                            ],
                            "default": "<|endoftext|>",
                            "example": "\n"
                          },
                          {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 4,
                            "items": {
                              "type": "string",
                              "example": "[\"\\n\"]"
                            }
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "logit_bias": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "default": null,
                        "additionalProperties": {
                          "type": "integer"
                        },
                        "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the\ntokenizer) to an associated bias value from -100 to 100. Mathematically,\nthe bias is added to the logits generated by the model prior to sampling.\nThe exact effect will vary per model, but values between -1 and 1 should\ndecrease or increase likelihood of selection; values like -100 or 100\nshould result in a ban or exclusive selection of the relevant token.\n"
                      },
                      "logprobs": {
                        "description": "Whether to return log probabilities of the output tokens or not. If true,\nreturns the log probabilities of each output token returned in the\n`content` of `message`.\n",
                        "type": [
                          "boolean",
                          "null"
                        ],
                        "default": false
                      },
                      "max_tokens": {
                        "description": "The maximum number of [tokens](/tokenizer) that can be generated in the\nchat completion. This value can be used to control\n[costs](https://openai.com/api/pricing/) for text generated via API.\n\nThis value is now deprecated in favor of `max_completion_tokens`, and is\nnot compatible with [o1 series models](/docs/guides/reasoning).\n",
                        "type": [
                          "integer",
                          "null"
                        ],
                        "deprecated": true
                      },
                      "n": {
                        "type": [
                          "integer",
                          "null"
                        ],
                        "minimum": 1,
                        "maximum": 128,
                        "default": 1,
                        "example": 1,
                        "description": "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs."
                      },
                      "prediction": {
                        "description": "Configuration for a [Predicted Output](/docs/guides/predicted-outputs),\nwhich can greatly improve response times when large parts of the model\nresponse are known ahead of time. This is most common when you are\nregenerating a file with only minor changes to most of the content.\n",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "Static Content",
                            "description": "Static predicted output content, such as the content of a text file that is\nbeing regenerated.\n",
                            "required": [
                              "type",
                              "content"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "content"
                                ],
                                "description": "The type of the predicted content you want to provide. This type is\ncurrently always `content`.\n"
                              },
                              "content": {
                                "description": "The content that should be matched when generating a model response.\nIf generated tokens would match this content, the entire model response\ncan be returned much more quickly.\n",
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "title": "Text content",
                                    "description": "The content used for a Predicted Output. This is often the\ntext of a file you are regenerating with minor changes.\n"
                                  },
                                  {
                                    "type": "array",
                                    "description": "An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text inputs.",
                                    "title": "Array of content parts",
                                    "items": {
                                      "type": "object",
                                      "title": "Text content part",
                                      "description": "Learn about [text inputs](/docs/guides/text-generation).\n",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "text"
                                          ],
                                          "description": "The type of the content part."
                                        },
                                        "text": {
                                          "type": "string",
                                          "description": "The text content."
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "text"
                                      ]
                                    },
                                    "minItems": 1
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "seed": {
                        "type": [
                          "integer",
                          "null"
                        ],
                        "format": "int64",
                        "description": "This feature is in Beta.\nIf specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n"
                      },
                      "stream_options": {
                        "description": "Options for streaming response. Only set this when you set `stream: true`.\n",
                        "type": [
                          "object",
                          "null"
                        ],
                        "default": null,
                        "properties": {
                          "include_usage": {
                            "type": "boolean",
                            "description": "If set, an additional chunk will be streamed before the `data: [DONE]`\nmessage. The `usage` field on this chunk shows the token usage statistics\nfor the entire request, and the `choices` field will always be an empty\narray. \n\nAll other chunks will also include a `usage` field, but with a null\nvalue. **NOTE:** If the stream is interrupted, you may not receive the\nfinal usage chunk which contains the total token usage for the request.\n"
                          }
                        }
                      },
                      "tools": {
                        "type": "array",
                        "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "function"
                              ],
                              "description": "The type of the tool. Currently, only `function` is supported."
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "description": "A description of what the function does, used by the model to choose when and how to call the function."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                                },
                                "parameters": {
                                  "type": "object",
                                  "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                                  "additionalProperties": true
                                },
                                "strict": {
                                  "type": [
                                    "boolean",
                                    "null"
                                  ],
                                  "default": false,
                                  "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "function"
                          ]
                        }
                      },
                      "tool_choice": {
                        "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tool and instead generates a message.\n`auto` means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools.\nSpecifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools are present.\n",
                        "oneOf": [
                          {
                            "type": "string",
                            "description": "`none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.\n",
                            "enum": [
                              "none",
                              "auto",
                              "required"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "Specifies a tool the model should use. Use to force the model to call a specific function.",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "function"
                                ],
                                "description": "The type of the tool. Currently, only `function` is supported."
                              },
                              "function": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the function to call."
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "function"
                            ]
                          }
                        ]
                      },
                      "parallel_tool_calls": {
                        "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
                        "type": "boolean",
                        "default": true
                      },
                      "function_call": {
                        "deprecated": true,
                        "description": "Deprecated in favor of `tool_choice`.\n\nControls which (if any) function is called by the model.\n\n`none` means the model will not call a function and instead generates a\nmessage.\n\n`auto` means the model can pick between generating a message or calling a\nfunction.\n\nSpecifying a particular function via `{\"name\": \"my_function\"}` forces the\nmodel to call that function.\n\n`none` is the default when no functions are present. `auto` is the default\nif functions are present.\n",
                        "oneOf": [
                          {
                            "type": "string",
                            "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.\n",
                            "enum": [
                              "none",
                              "auto"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the function to call."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        ]
                      },
                      "functions": {
                        "deprecated": true,
                        "description": "Deprecated in favor of `tools`.\n\nA list of functions the model may generate JSON inputs for.\n",
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 128,
                        "items": {
                          "type": "object",
                          "deprecated": true,
                          "properties": {
                            "description": {
                              "type": "string",
                              "description": "A description of what the function does, used by the model to choose when and how to call the function."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                            },
                            "parameters": {
                              "type": "object",
                              "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                              "additionalProperties": true
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      }
                    },
                    "required": [
                      "model",
                      "messages"
                    ]
                  }
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_chat_completions/output-200.schema.json",
            "type": "object",
            "description": "Represents a streamed chunk of a chat completion response returned\nby the model, based on the provided input. \n[Learn more](/docs/guides/streaming-responses).\n",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier for the chat completion. Each chunk has the same ID."
              },
              "choices": {
                "type": "array",
                "description": "A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the\nlast chunk if you set `stream_options: {\"include_usage\": true}`.\n",
                "items": {
                  "type": "object",
                  "required": [
                    "delta",
                    "finish_reason",
                    "index"
                  ],
                  "properties": {
                    "delta": {
                      "type": "object",
                      "description": "A chat completion delta generated by streamed model responses.",
                      "properties": {
                        "content": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The contents of the chunk message."
                        },
                        "function_call": {
                          "deprecated": true,
                          "type": "object",
                          "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
                          "properties": {
                            "arguments": {
                              "type": "string",
                              "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the function to call."
                            }
                          }
                        },
                        "tool_calls": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "index": {
                                "type": "integer"
                              },
                              "id": {
                                "type": "string",
                                "description": "The ID of the tool call."
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "function"
                                ],
                                "description": "The type of the tool. Currently, only `function` is supported."
                              },
                              "function": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the function to call."
                                  },
                                  "arguments": {
                                    "type": "string",
                                    "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                                  }
                                }
                              }
                            },
                            "required": [
                              "index"
                            ]
                          }
                        },
                        "role": {
                          "type": "string",
                          "enum": [
                            "developer",
                            "system",
                            "user",
                            "assistant",
                            "tool"
                          ],
                          "description": "The role of the author of this message."
                        },
                        "refusal": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The refusal message generated by the model."
                        }
                      }
                    },
                    "logprobs": {
                      "description": "Log probability information for the choice.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "content": {
                          "description": "A list of message content tokens with log probability information.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "token": {
                                "description": "The token.",
                                "type": "string"
                              },
                              "logprob": {
                                "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                "type": "number"
                              },
                              "bytes": {
                                "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "type": "integer"
                                }
                              },
                              "top_logprobs": {
                                "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "token": {
                                      "description": "The token.",
                                      "type": "string"
                                    },
                                    "logprob": {
                                      "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                      "type": "number"
                                    },
                                    "bytes": {
                                      "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": "integer"
                                      }
                                    }
                                  },
                                  "required": [
                                    "token",
                                    "logprob",
                                    "bytes"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "token",
                              "logprob",
                              "bytes",
                              "top_logprobs"
                            ]
                          }
                        },
                        "refusal": {
                          "description": "A list of message refusal tokens with log probability information.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "token": {
                                "description": "The token.",
                                "type": "string"
                              },
                              "logprob": {
                                "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                "type": "number"
                              },
                              "bytes": {
                                "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "type": "integer"
                                }
                              },
                              "top_logprobs": {
                                "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "token": {
                                      "description": "The token.",
                                      "type": "string"
                                    },
                                    "logprob": {
                                      "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                      "type": "number"
                                    },
                                    "bytes": {
                                      "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": "integer"
                                      }
                                    }
                                  },
                                  "required": [
                                    "token",
                                    "logprob",
                                    "bytes"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "token",
                              "logprob",
                              "bytes",
                              "top_logprobs"
                            ]
                          }
                        }
                      },
                      "required": [
                        "content",
                        "refusal"
                      ]
                    },
                    "finish_reason": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n",
                      "enum": [
                        "stop",
                        "length",
                        "tool_calls",
                        "content_filter",
                        "function_call"
                      ]
                    },
                    "index": {
                      "type": "integer",
                      "description": "The index of the choice in the list of choices."
                    }
                  }
                }
              },
              "created": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp."
              },
              "model": {
                "type": "string",
                "description": "The model to generate the completion."
              },
              "service_tier": {
                "description": "The service tier used for processing the request.",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "scale",
                  "default"
                ],
                "example": "scale"
              },
              "system_fingerprint": {
                "type": "string",
                "description": "This fingerprint represents the backend configuration that the model runs with.\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always `chat.completion.chunk`.",
                "enum": [
                  "chat.completion.chunk"
                ]
              },
              "usage": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "An optional field that will only be present when you set\n`stream_options: {\"include_usage\": true}` in your request. When present, it\ncontains a null value **except for the last chunk** which contains the\ntoken usage statistics for the entire request.\n\n**NOTE:** If the stream is interrupted or cancelled, you may not\nreceive the final usage chunk which contains the total token usage for\nthe request.\n",
                "properties": {
                  "completion_tokens": {
                    "type": "integer",
                    "default": 0,
                    "description": "Number of tokens in the generated completion."
                  },
                  "prompt_tokens": {
                    "type": "integer",
                    "default": 0,
                    "description": "Number of tokens in the prompt."
                  },
                  "total_tokens": {
                    "type": "integer",
                    "default": 0,
                    "description": "Total number of tokens used in the request (prompt + completion)."
                  },
                  "completion_tokens_details": {
                    "type": "object",
                    "description": "Breakdown of tokens used in a completion.",
                    "properties": {
                      "accepted_prediction_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "When using Predicted Outputs, the number of tokens in the\nprediction that appeared in the completion.\n"
                      },
                      "audio_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Audio input tokens generated by the model."
                      },
                      "reasoning_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Tokens generated by the model for reasoning."
                      },
                      "rejected_prediction_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "When using Predicted Outputs, the number of tokens in the\nprediction that did not appear in the completion. However, like\nreasoning tokens, these tokens are still counted in the total\ncompletion tokens for purposes of billing, output, and context window\nlimits.\n"
                      }
                    }
                  },
                  "prompt_tokens_details": {
                    "type": "object",
                    "description": "Breakdown of tokens used in the prompt.",
                    "properties": {
                      "audio_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Audio input tokens present in the prompt."
                      },
                      "cached_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Cached tokens present in the prompt."
                      }
                    }
                  }
                },
                "required": [
                  "prompt_tokens",
                  "completion_tokens",
                  "total_tokens"
                ]
              }
            },
            "required": [
              "choices",
              "created",
              "id",
              "model",
              "object"
            ]
          }
        ]
      }
    },
    {
      "id": "get_chat_completions__completion_id_",
      "operationId": "getChatCompletion",
      "name": "Get Chat Completion",
      "description": "Get a stored chat completion. Only Chat Completions that have been created\nwith the `store` parameter set to `true` will be returned.\n",
      "schema": {
        "tags": [
          "Chat"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_chat_completions__completion_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/chat/completions/{completion_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "completion_id"
              ],
              "properties": {
                "completion_id": {
                  "type": "string",
                  "description": "The ID of the chat completion to retrieve."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_chat_completions__completion_id_/output-200.schema.json",
            "type": "object",
            "description": "Represents a chat completion response returned by model, based on the provided input.",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier for the chat completion."
              },
              "choices": {
                "type": "array",
                "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1.",
                "items": {
                  "type": "object",
                  "required": [
                    "finish_reason",
                    "index",
                    "message",
                    "logprobs"
                  ],
                  "properties": {
                    "finish_reason": {
                      "type": "string",
                      "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n",
                      "enum": [
                        "stop",
                        "length",
                        "tool_calls",
                        "content_filter",
                        "function_call"
                      ]
                    },
                    "index": {
                      "type": "integer",
                      "description": "The index of the choice in the list of choices."
                    },
                    "message": {
                      "type": "object",
                      "description": "A chat completion message generated by the model.",
                      "properties": {
                        "content": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The contents of the message."
                        },
                        "refusal": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The refusal message generated by the model."
                        },
                        "tool_calls": {
                          "type": "array",
                          "description": "The tool calls generated by the model, such as function calls.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the tool call."
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "function"
                                ],
                                "description": "The type of the tool. Currently, only `function` is supported."
                              },
                              "function": {
                                "type": "object",
                                "description": "The function that the model called.",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the function to call."
                                  },
                                  "arguments": {
                                    "type": "string",
                                    "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                                  }
                                },
                                "required": [
                                  "name",
                                  "arguments"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "type",
                              "function"
                            ]
                          }
                        },
                        "annotations": {
                          "type": "array",
                          "description": "Annotations for the message, when applicable, as when using the\n[web search tool](/docs/guides/tools-web-search?api-mode=chat).\n",
                          "items": {
                            "type": "object",
                            "description": "A URL citation when using web search.\n",
                            "required": [
                              "type",
                              "url_citation"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of the URL citation. Always `url_citation`.",
                                "enum": [
                                  "url_citation"
                                ]
                              },
                              "url_citation": {
                                "type": "object",
                                "description": "A URL citation when using web search.",
                                "required": [
                                  "end_index",
                                  "start_index",
                                  "url",
                                  "title"
                                ],
                                "properties": {
                                  "end_index": {
                                    "type": "integer",
                                    "description": "The index of the last character of the URL citation in the message."
                                  },
                                  "start_index": {
                                    "type": "integer",
                                    "description": "The index of the first character of the URL citation in the message."
                                  },
                                  "url": {
                                    "type": "string",
                                    "description": "The URL of the web resource."
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "The title of the web resource."
                                  }
                                }
                              }
                            }
                          }
                        },
                        "role": {
                          "type": "string",
                          "enum": [
                            "assistant"
                          ],
                          "description": "The role of the author of this message."
                        },
                        "function_call": {
                          "type": "object",
                          "deprecated": true,
                          "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
                          "properties": {
                            "arguments": {
                              "type": "string",
                              "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the function to call."
                            }
                          },
                          "required": [
                            "name",
                            "arguments"
                          ]
                        },
                        "audio": {
                          "type": [
                            "object",
                            "null"
                          ],
                          "description": "If the audio output modality is requested, this object contains data\nabout the audio response from the model. [Learn more](/docs/guides/audio).\n",
                          "required": [
                            "id",
                            "expires_at",
                            "data",
                            "transcript"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Unique identifier for this audio response."
                            },
                            "expires_at": {
                              "type": "integer",
                              "description": "The Unix timestamp (in seconds) for when this audio response will\nno longer be accessible on the server for use in multi-turn\nconversations.\n"
                            },
                            "data": {
                              "type": "string",
                              "description": "Base64 encoded audio bytes generated by the model, in the format\nspecified in the request.\n"
                            },
                            "transcript": {
                              "type": "string",
                              "description": "Transcript of the audio generated by the model."
                            }
                          }
                        }
                      },
                      "required": [
                        "role",
                        "content",
                        "refusal"
                      ]
                    },
                    "logprobs": {
                      "description": "Log probability information for the choice.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "content": {
                          "description": "A list of message content tokens with log probability information.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "token": {
                                "description": "The token.",
                                "type": "string"
                              },
                              "logprob": {
                                "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                "type": "number"
                              },
                              "bytes": {
                                "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "type": "integer"
                                }
                              },
                              "top_logprobs": {
                                "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "token": {
                                      "description": "The token.",
                                      "type": "string"
                                    },
                                    "logprob": {
                                      "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                      "type": "number"
                                    },
                                    "bytes": {
                                      "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": "integer"
                                      }
                                    }
                                  },
                                  "required": [
                                    "token",
                                    "logprob",
                                    "bytes"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "token",
                              "logprob",
                              "bytes",
                              "top_logprobs"
                            ]
                          }
                        },
                        "refusal": {
                          "description": "A list of message refusal tokens with log probability information.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "token": {
                                "description": "The token.",
                                "type": "string"
                              },
                              "logprob": {
                                "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                "type": "number"
                              },
                              "bytes": {
                                "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "type": "integer"
                                }
                              },
                              "top_logprobs": {
                                "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "token": {
                                      "description": "The token.",
                                      "type": "string"
                                    },
                                    "logprob": {
                                      "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                      "type": "number"
                                    },
                                    "bytes": {
                                      "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": "integer"
                                      }
                                    }
                                  },
                                  "required": [
                                    "token",
                                    "logprob",
                                    "bytes"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "token",
                              "logprob",
                              "bytes",
                              "top_logprobs"
                            ]
                          }
                        }
                      },
                      "required": [
                        "content",
                        "refusal"
                      ]
                    }
                  }
                }
              },
              "created": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the chat completion was created."
              },
              "model": {
                "type": "string",
                "description": "The model used for the chat completion."
              },
              "service_tier": {
                "description": "The service tier used for processing the request.",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "scale",
                  "default"
                ],
                "example": "scale"
              },
              "system_fingerprint": {
                "type": "string",
                "description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always `chat.completion`.",
                "enum": [
                  "chat.completion"
                ]
              },
              "usage": {
                "type": "object",
                "description": "Usage statistics for the completion request.",
                "properties": {
                  "completion_tokens": {
                    "type": "integer",
                    "default": 0,
                    "description": "Number of tokens in the generated completion."
                  },
                  "prompt_tokens": {
                    "type": "integer",
                    "default": 0,
                    "description": "Number of tokens in the prompt."
                  },
                  "total_tokens": {
                    "type": "integer",
                    "default": 0,
                    "description": "Total number of tokens used in the request (prompt + completion)."
                  },
                  "completion_tokens_details": {
                    "type": "object",
                    "description": "Breakdown of tokens used in a completion.",
                    "properties": {
                      "accepted_prediction_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "When using Predicted Outputs, the number of tokens in the\nprediction that appeared in the completion.\n"
                      },
                      "audio_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Audio input tokens generated by the model."
                      },
                      "reasoning_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Tokens generated by the model for reasoning."
                      },
                      "rejected_prediction_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "When using Predicted Outputs, the number of tokens in the\nprediction that did not appear in the completion. However, like\nreasoning tokens, these tokens are still counted in the total\ncompletion tokens for purposes of billing, output, and context window\nlimits.\n"
                      }
                    }
                  },
                  "prompt_tokens_details": {
                    "type": "object",
                    "description": "Breakdown of tokens used in the prompt.",
                    "properties": {
                      "audio_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Audio input tokens present in the prompt."
                      },
                      "cached_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Cached tokens present in the prompt."
                      }
                    }
                  }
                },
                "required": [
                  "prompt_tokens",
                  "completion_tokens",
                  "total_tokens"
                ]
              }
            },
            "required": [
              "choices",
              "created",
              "id",
              "model",
              "object"
            ]
          }
        ]
      }
    },
    {
      "id": "post_chat_completions__completion_id_",
      "operationId": "updateChatCompletion",
      "name": "Update Chat Completion",
      "description": "Modify a stored chat completion. Only Chat Completions that have been\ncreated with the `store` parameter set to `true` can be modified. Currently,\nthe only supported modification is to update the `metadata` field.\n",
      "schema": {
        "tags": [
          "Chat"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_chat_completions__completion_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/chat/completions/{completion_id}"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "completion_id"
              ],
              "properties": {
                "completion_id": {
                  "type": "string",
                  "description": "The ID of the chat completion to update."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "required": [
                  "metadata"
                ],
                "properties": {
                  "metadata": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_chat_completions__completion_id_/output-200.schema.json",
            "type": "object",
            "description": "Represents a chat completion response returned by model, based on the provided input.",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier for the chat completion."
              },
              "choices": {
                "type": "array",
                "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1.",
                "items": {
                  "type": "object",
                  "required": [
                    "finish_reason",
                    "index",
                    "message",
                    "logprobs"
                  ],
                  "properties": {
                    "finish_reason": {
                      "type": "string",
                      "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n",
                      "enum": [
                        "stop",
                        "length",
                        "tool_calls",
                        "content_filter",
                        "function_call"
                      ]
                    },
                    "index": {
                      "type": "integer",
                      "description": "The index of the choice in the list of choices."
                    },
                    "message": {
                      "type": "object",
                      "description": "A chat completion message generated by the model.",
                      "properties": {
                        "content": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The contents of the message."
                        },
                        "refusal": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The refusal message generated by the model."
                        },
                        "tool_calls": {
                          "type": "array",
                          "description": "The tool calls generated by the model, such as function calls.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the tool call."
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "function"
                                ],
                                "description": "The type of the tool. Currently, only `function` is supported."
                              },
                              "function": {
                                "type": "object",
                                "description": "The function that the model called.",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the function to call."
                                  },
                                  "arguments": {
                                    "type": "string",
                                    "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                                  }
                                },
                                "required": [
                                  "name",
                                  "arguments"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "type",
                              "function"
                            ]
                          }
                        },
                        "annotations": {
                          "type": "array",
                          "description": "Annotations for the message, when applicable, as when using the\n[web search tool](/docs/guides/tools-web-search?api-mode=chat).\n",
                          "items": {
                            "type": "object",
                            "description": "A URL citation when using web search.\n",
                            "required": [
                              "type",
                              "url_citation"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of the URL citation. Always `url_citation`.",
                                "enum": [
                                  "url_citation"
                                ]
                              },
                              "url_citation": {
                                "type": "object",
                                "description": "A URL citation when using web search.",
                                "required": [
                                  "end_index",
                                  "start_index",
                                  "url",
                                  "title"
                                ],
                                "properties": {
                                  "end_index": {
                                    "type": "integer",
                                    "description": "The index of the last character of the URL citation in the message."
                                  },
                                  "start_index": {
                                    "type": "integer",
                                    "description": "The index of the first character of the URL citation in the message."
                                  },
                                  "url": {
                                    "type": "string",
                                    "description": "The URL of the web resource."
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "The title of the web resource."
                                  }
                                }
                              }
                            }
                          }
                        },
                        "role": {
                          "type": "string",
                          "enum": [
                            "assistant"
                          ],
                          "description": "The role of the author of this message."
                        },
                        "function_call": {
                          "type": "object",
                          "deprecated": true,
                          "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
                          "properties": {
                            "arguments": {
                              "type": "string",
                              "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the function to call."
                            }
                          },
                          "required": [
                            "name",
                            "arguments"
                          ]
                        },
                        "audio": {
                          "type": [
                            "object",
                            "null"
                          ],
                          "description": "If the audio output modality is requested, this object contains data\nabout the audio response from the model. [Learn more](/docs/guides/audio).\n",
                          "required": [
                            "id",
                            "expires_at",
                            "data",
                            "transcript"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Unique identifier for this audio response."
                            },
                            "expires_at": {
                              "type": "integer",
                              "description": "The Unix timestamp (in seconds) for when this audio response will\nno longer be accessible on the server for use in multi-turn\nconversations.\n"
                            },
                            "data": {
                              "type": "string",
                              "description": "Base64 encoded audio bytes generated by the model, in the format\nspecified in the request.\n"
                            },
                            "transcript": {
                              "type": "string",
                              "description": "Transcript of the audio generated by the model."
                            }
                          }
                        }
                      },
                      "required": [
                        "role",
                        "content",
                        "refusal"
                      ]
                    },
                    "logprobs": {
                      "description": "Log probability information for the choice.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "content": {
                          "description": "A list of message content tokens with log probability information.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "token": {
                                "description": "The token.",
                                "type": "string"
                              },
                              "logprob": {
                                "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                "type": "number"
                              },
                              "bytes": {
                                "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "type": "integer"
                                }
                              },
                              "top_logprobs": {
                                "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "token": {
                                      "description": "The token.",
                                      "type": "string"
                                    },
                                    "logprob": {
                                      "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                      "type": "number"
                                    },
                                    "bytes": {
                                      "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": "integer"
                                      }
                                    }
                                  },
                                  "required": [
                                    "token",
                                    "logprob",
                                    "bytes"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "token",
                              "logprob",
                              "bytes",
                              "top_logprobs"
                            ]
                          }
                        },
                        "refusal": {
                          "description": "A list of message refusal tokens with log probability information.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "token": {
                                "description": "The token.",
                                "type": "string"
                              },
                              "logprob": {
                                "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                "type": "number"
                              },
                              "bytes": {
                                "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "type": "integer"
                                }
                              },
                              "top_logprobs": {
                                "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "token": {
                                      "description": "The token.",
                                      "type": "string"
                                    },
                                    "logprob": {
                                      "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                                      "type": "number"
                                    },
                                    "bytes": {
                                      "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": "integer"
                                      }
                                    }
                                  },
                                  "required": [
                                    "token",
                                    "logprob",
                                    "bytes"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "token",
                              "logprob",
                              "bytes",
                              "top_logprobs"
                            ]
                          }
                        }
                      },
                      "required": [
                        "content",
                        "refusal"
                      ]
                    }
                  }
                }
              },
              "created": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the chat completion was created."
              },
              "model": {
                "type": "string",
                "description": "The model used for the chat completion."
              },
              "service_tier": {
                "description": "The service tier used for processing the request.",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "scale",
                  "default"
                ],
                "example": "scale"
              },
              "system_fingerprint": {
                "type": "string",
                "description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always `chat.completion`.",
                "enum": [
                  "chat.completion"
                ]
              },
              "usage": {
                "type": "object",
                "description": "Usage statistics for the completion request.",
                "properties": {
                  "completion_tokens": {
                    "type": "integer",
                    "default": 0,
                    "description": "Number of tokens in the generated completion."
                  },
                  "prompt_tokens": {
                    "type": "integer",
                    "default": 0,
                    "description": "Number of tokens in the prompt."
                  },
                  "total_tokens": {
                    "type": "integer",
                    "default": 0,
                    "description": "Total number of tokens used in the request (prompt + completion)."
                  },
                  "completion_tokens_details": {
                    "type": "object",
                    "description": "Breakdown of tokens used in a completion.",
                    "properties": {
                      "accepted_prediction_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "When using Predicted Outputs, the number of tokens in the\nprediction that appeared in the completion.\n"
                      },
                      "audio_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Audio input tokens generated by the model."
                      },
                      "reasoning_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Tokens generated by the model for reasoning."
                      },
                      "rejected_prediction_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "When using Predicted Outputs, the number of tokens in the\nprediction that did not appear in the completion. However, like\nreasoning tokens, these tokens are still counted in the total\ncompletion tokens for purposes of billing, output, and context window\nlimits.\n"
                      }
                    }
                  },
                  "prompt_tokens_details": {
                    "type": "object",
                    "description": "Breakdown of tokens used in the prompt.",
                    "properties": {
                      "audio_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Audio input tokens present in the prompt."
                      },
                      "cached_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Cached tokens present in the prompt."
                      }
                    }
                  }
                },
                "required": [
                  "prompt_tokens",
                  "completion_tokens",
                  "total_tokens"
                ]
              }
            },
            "required": [
              "choices",
              "created",
              "id",
              "model",
              "object"
            ]
          }
        ]
      }
    },
    {
      "id": "delete_chat_completions__completion_id_",
      "operationId": "deleteChatCompletion",
      "name": "Delete Chat Completion",
      "description": "Delete a stored chat completion. Only Chat Completions that have been\ncreated with the `store` parameter set to `true` can be deleted.\n",
      "schema": {
        "tags": [
          "Chat"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_chat_completions__completion_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/chat/completions/{completion_id}"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "completion_id"
              ],
              "properties": {
                "completion_id": {
                  "type": "string",
                  "description": "The ID of the chat completion to delete."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_chat_completions__completion_id_/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "description": "The type of object being deleted.",
                "enum": [
                  "chat.completion.deleted"
                ]
              },
              "id": {
                "type": "string",
                "description": "The ID of the chat completion that was deleted."
              },
              "deleted": {
                "type": "boolean",
                "description": "Whether the chat completion was deleted."
              }
            },
            "required": [
              "object",
              "id",
              "deleted"
            ]
          }
        ]
      }
    },
    {
      "id": "get_chat_completions__completion_id__messages",
      "operationId": "getChatCompletionMessages",
      "name": "Get Chat Completion Messages",
      "description": "Get the messages in a stored chat completion. Only Chat Completions that\nhave been created with the `store` parameter set to `true` will be\nreturned.\n",
      "schema": {
        "tags": [
          "Chat"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_chat_completions__completion_id__messages/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/chat/completions/{completion_id}/messages"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "after": {
                  "type": "string",
                  "description": "Identifier for the last message from the previous pagination request."
                },
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "Number of messages to retrieve."
                },
                "order": {
                  "type": "string",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "default": "asc",
                  "description": "Sort order for messages by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "completion_id"
              ],
              "properties": {
                "completion_id": {
                  "type": "string",
                  "description": "The ID of the chat completion to retrieve messages from."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_chat_completions__completion_id__messages/output-200.schema.json",
            "type": "object",
            "title": "ChatCompletionMessageList",
            "description": "An object representing a list of chat completion messages.\n",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ],
                "default": "list",
                "description": "The type of this object. It is always set to \"list\".\n"
              },
              "data": {
                "type": "array",
                "description": "An array of chat completion message objects.\n",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "A chat completion message generated by the model.",
                      "properties": {
                        "content": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The contents of the message."
                        },
                        "refusal": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The refusal message generated by the model."
                        },
                        "tool_calls": {
                          "type": "array",
                          "description": "The tool calls generated by the model, such as function calls.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the tool call."
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "function"
                                ],
                                "description": "The type of the tool. Currently, only `function` is supported."
                              },
                              "function": {
                                "type": "object",
                                "description": "The function that the model called.",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the function to call."
                                  },
                                  "arguments": {
                                    "type": "string",
                                    "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                                  }
                                },
                                "required": [
                                  "name",
                                  "arguments"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "type",
                              "function"
                            ]
                          }
                        },
                        "annotations": {
                          "type": "array",
                          "description": "Annotations for the message, when applicable, as when using the\n[web search tool](/docs/guides/tools-web-search?api-mode=chat).\n",
                          "items": {
                            "type": "object",
                            "description": "A URL citation when using web search.\n",
                            "required": [
                              "type",
                              "url_citation"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of the URL citation. Always `url_citation`.",
                                "enum": [
                                  "url_citation"
                                ]
                              },
                              "url_citation": {
                                "type": "object",
                                "description": "A URL citation when using web search.",
                                "required": [
                                  "end_index",
                                  "start_index",
                                  "url",
                                  "title"
                                ],
                                "properties": {
                                  "end_index": {
                                    "type": "integer",
                                    "description": "The index of the last character of the URL citation in the message."
                                  },
                                  "start_index": {
                                    "type": "integer",
                                    "description": "The index of the first character of the URL citation in the message."
                                  },
                                  "url": {
                                    "type": "string",
                                    "description": "The URL of the web resource."
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "The title of the web resource."
                                  }
                                }
                              }
                            }
                          }
                        },
                        "role": {
                          "type": "string",
                          "enum": [
                            "assistant"
                          ],
                          "description": "The role of the author of this message."
                        },
                        "function_call": {
                          "type": "object",
                          "deprecated": true,
                          "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
                          "properties": {
                            "arguments": {
                              "type": "string",
                              "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the function to call."
                            }
                          },
                          "required": [
                            "name",
                            "arguments"
                          ]
                        },
                        "audio": {
                          "type": [
                            "object",
                            "null"
                          ],
                          "description": "If the audio output modality is requested, this object contains data\nabout the audio response from the model. [Learn more](/docs/guides/audio).\n",
                          "required": [
                            "id",
                            "expires_at",
                            "data",
                            "transcript"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Unique identifier for this audio response."
                            },
                            "expires_at": {
                              "type": "integer",
                              "description": "The Unix timestamp (in seconds) for when this audio response will\nno longer be accessible on the server for use in multi-turn\nconversations.\n"
                            },
                            "data": {
                              "type": "string",
                              "description": "Base64 encoded audio bytes generated by the model, in the format\nspecified in the request.\n"
                            },
                            "transcript": {
                              "type": "string",
                              "description": "Transcript of the audio generated by the model."
                            }
                          }
                        }
                      },
                      "required": [
                        "role",
                        "content",
                        "refusal"
                      ]
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The identifier of the chat message."
                        }
                      }
                    }
                  ]
                }
              },
              "first_id": {
                "type": "string",
                "description": "The identifier of the first chat message in the data array."
              },
              "last_id": {
                "type": "string",
                "description": "The identifier of the last chat message in the data array."
              },
              "has_more": {
                "type": "boolean",
                "description": "Indicates whether there are more chat messages available."
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "post_completions",
      "operationId": "createCompletion",
      "name": "Create Completion",
      "description": "Creates a completion for the provided prompt and parameters.",
      "schema": {
        "tags": [
          "Completions"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_completions/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/completions"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "properties": {
                  "model": {
                    "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "gpt-3.5-turbo-instruct",
                          "davinci-002",
                          "babbage-002"
                        ]
                      }
                    ]
                  },
                  "prompt": {
                    "description": "The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.\n\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.\n",
                    "default": "<|endoftext|>",
                    "oneOf": [
                      {
                        "type": "string",
                        "default": "",
                        "example": "This is a test."
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "default": "",
                          "example": "This is a test."
                        }
                      },
                      {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "integer"
                        },
                        "example": "[1212, 318, 257, 1332, 13]"
                      },
                      {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "integer"
                          }
                        },
                        "example": "[[1212, 318, 257, 1332, 13]]"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "best_of": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "default": 1,
                    "minimum": 0,
                    "maximum": 20,
                    "description": "Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.\n\nWhen used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n"
                  },
                  "echo": {
                    "type": [
                      "boolean",
                      "null"
                    ],
                    "default": false,
                    "description": "Echo back the prompt in addition to the completion\n"
                  },
                  "frequency_penalty": {
                    "type": [
                      "number",
                      "null"
                    ],
                    "default": 0,
                    "minimum": -2,
                    "maximum": 2,
                    "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n\n[See more information about frequency and presence penalties.](/docs/guides/text-generation)\n"
                  },
                  "logit_bias": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "default": null,
                    "additionalProperties": {
                      "type": "integer"
                    },
                    "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.\n"
                  },
                  "logprobs": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "minimum": 0,
                    "maximum": 5,
                    "default": null,
                    "description": "Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.\n\nThe maximum value for `logprobs` is 5.\n"
                  },
                  "max_tokens": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "minimum": 0,
                    "default": 16,
                    "example": 16,
                    "description": "The maximum number of [tokens](/tokenizer) that can be generated in the completion.\n\nThe token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n"
                  },
                  "n": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "minimum": 1,
                    "maximum": 128,
                    "default": 1,
                    "example": 1,
                    "description": "How many completions to generate for each prompt.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n"
                  },
                  "presence_penalty": {
                    "type": [
                      "number",
                      "null"
                    ],
                    "default": 0,
                    "minimum": -2,
                    "maximum": 2,
                    "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n\n[See more information about frequency and presence penalties.](/docs/guides/text-generation)\n"
                  },
                  "seed": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "int64",
                    "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\n\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n"
                  },
                  "stop": {
                    "description": "Up to 4 sequences where the API will stop generating further tokens. The\nreturned text will not contain the stop sequence.\n",
                    "default": null,
                    "oneOf": [
                      {
                        "type": [
                          "string",
                          "null"
                        ],
                        "default": "<|endoftext|>",
                        "example": "\n"
                      },
                      {
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 4,
                        "items": {
                          "type": "string",
                          "example": "[\"\\n\"]"
                        }
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "stream": {
                    "description": "Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n",
                    "type": [
                      "boolean",
                      "null"
                    ],
                    "default": false
                  },
                  "stream_options": {
                    "description": "Options for streaming response. Only set this when you set `stream: true`.\n",
                    "type": [
                      "object",
                      "null"
                    ],
                    "default": null,
                    "properties": {
                      "include_usage": {
                        "type": "boolean",
                        "description": "If set, an additional chunk will be streamed before the `data: [DONE]`\nmessage. The `usage` field on this chunk shows the token usage statistics\nfor the entire request, and the `choices` field will always be an empty\narray. \n\nAll other chunks will also include a `usage` field, but with a null\nvalue. **NOTE:** If the stream is interrupted, you may not receive the\nfinal usage chunk which contains the total token usage for the request.\n"
                      }
                    }
                  },
                  "suffix": {
                    "description": "The suffix that comes after a completion of inserted text.\n\nThis parameter is only supported for `gpt-3.5-turbo-instruct`.\n",
                    "default": null,
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "test."
                  },
                  "temperature": {
                    "type": [
                      "number",
                      "null"
                    ],
                    "minimum": 0,
                    "maximum": 2,
                    "default": 1,
                    "example": 1,
                    "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n"
                  },
                  "top_p": {
                    "type": [
                      "number",
                      "null"
                    ],
                    "minimum": 0,
                    "maximum": 1,
                    "default": 1,
                    "example": 1,
                    "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
                  },
                  "user": {
                    "type": "string",
                    "example": "user-1234",
                    "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
                  }
                },
                "required": [
                  "model",
                  "prompt"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_completions/output-200.schema.json",
            "type": "object",
            "description": "Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).\n",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier for the completion."
              },
              "choices": {
                "type": "array",
                "description": "The list of completion choices the model generated for the input prompt.",
                "items": {
                  "type": "object",
                  "required": [
                    "finish_reason",
                    "index",
                    "logprobs",
                    "text"
                  ],
                  "properties": {
                    "finish_reason": {
                      "type": "string",
                      "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\nor `content_filter` if content was omitted due to a flag from our content filters.\n",
                      "enum": [
                        "stop",
                        "length",
                        "content_filter"
                      ]
                    },
                    "index": {
                      "type": "integer"
                    },
                    "logprobs": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "text_offset": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "token_logprobs": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "tokens": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "top_logprobs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    },
                    "text": {
                      "type": "string"
                    }
                  }
                }
              },
              "created": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the completion was created."
              },
              "model": {
                "type": "string",
                "description": "The model used for completion."
              },
              "system_fingerprint": {
                "type": "string",
                "description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always \"text_completion\"",
                "enum": [
                  "text_completion"
                ]
              },
              "usage": {
                "type": "object",
                "description": "Usage statistics for the completion request.",
                "properties": {
                  "completion_tokens": {
                    "type": "integer",
                    "default": 0,
                    "description": "Number of tokens in the generated completion."
                  },
                  "prompt_tokens": {
                    "type": "integer",
                    "default": 0,
                    "description": "Number of tokens in the prompt."
                  },
                  "total_tokens": {
                    "type": "integer",
                    "default": 0,
                    "description": "Total number of tokens used in the request (prompt + completion)."
                  },
                  "completion_tokens_details": {
                    "type": "object",
                    "description": "Breakdown of tokens used in a completion.",
                    "properties": {
                      "accepted_prediction_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "When using Predicted Outputs, the number of tokens in the\nprediction that appeared in the completion.\n"
                      },
                      "audio_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Audio input tokens generated by the model."
                      },
                      "reasoning_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Tokens generated by the model for reasoning."
                      },
                      "rejected_prediction_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "When using Predicted Outputs, the number of tokens in the\nprediction that did not appear in the completion. However, like\nreasoning tokens, these tokens are still counted in the total\ncompletion tokens for purposes of billing, output, and context window\nlimits.\n"
                      }
                    }
                  },
                  "prompt_tokens_details": {
                    "type": "object",
                    "description": "Breakdown of tokens used in the prompt.",
                    "properties": {
                      "audio_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Audio input tokens present in the prompt."
                      },
                      "cached_tokens": {
                        "type": "integer",
                        "default": 0,
                        "description": "Cached tokens present in the prompt."
                      }
                    }
                  }
                },
                "required": [
                  "prompt_tokens",
                  "completion_tokens",
                  "total_tokens"
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created",
              "model",
              "choices"
            ]
          }
        ]
      }
    },
    {
      "id": "post_embeddings",
      "operationId": "createEmbedding",
      "name": "Create Embedding",
      "description": "Creates an embedding vector representing the input text.",
      "schema": {
        "tags": [
          "Embeddings"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_embeddings/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/embeddings"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "input": {
                    "description": "Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. Some models may also impose a limit on total number of tokens summed across inputs.\n",
                    "example": "The quick brown fox jumped over the lazy dog",
                    "oneOf": [
                      {
                        "type": "string",
                        "title": "string",
                        "description": "The string that will be turned into an embedding.",
                        "default": "",
                        "example": "This is a test."
                      },
                      {
                        "type": "array",
                        "title": "array",
                        "description": "The array of strings that will be turned into an embedding.",
                        "minItems": 1,
                        "maxItems": 2048,
                        "items": {
                          "type": "string",
                          "default": "",
                          "example": "['This is a test.']"
                        }
                      },
                      {
                        "type": "array",
                        "title": "array",
                        "description": "The array of integers that will be turned into an embedding.",
                        "minItems": 1,
                        "maxItems": 2048,
                        "items": {
                          "type": "integer"
                        },
                        "example": "[1212, 318, 257, 1332, 13]"
                      },
                      {
                        "type": "array",
                        "title": "array",
                        "description": "The array of arrays containing integers that will be turned into an embedding.",
                        "minItems": 1,
                        "maxItems": 2048,
                        "items": {
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "integer"
                          }
                        },
                        "example": "[[1212, 318, 257, 1332, 13]]"
                      }
                    ]
                  },
                  "model": {
                    "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n",
                    "example": "text-embedding-3-small",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "text-embedding-ada-002",
                          "text-embedding-3-small",
                          "text-embedding-3-large"
                        ]
                      }
                    ]
                  },
                  "encoding_format": {
                    "description": "The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).",
                    "example": "float",
                    "default": "float",
                    "type": "string",
                    "enum": [
                      "float",
                      "base64"
                    ]
                  },
                  "dimensions": {
                    "description": "The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.\n",
                    "type": "integer",
                    "minimum": 1
                  },
                  "user": {
                    "type": "string",
                    "example": "user-1234",
                    "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
                  }
                },
                "required": [
                  "model",
                  "input"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_embeddings/output-200.schema.json",
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "description": "The list of embeddings generated by the model.",
                "items": {
                  "type": "object",
                  "description": "Represents an embedding vector returned by embedding endpoint.\n",
                  "properties": {
                    "index": {
                      "type": "integer",
                      "description": "The index of the embedding in the list of embeddings."
                    },
                    "embedding": {
                      "type": "array",
                      "description": "The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).\n",
                      "items": {
                        "type": "number"
                      }
                    },
                    "object": {
                      "type": "string",
                      "description": "The object type, which is always \"embedding\".",
                      "enum": [
                        "embedding"
                      ]
                    }
                  },
                  "required": [
                    "index",
                    "object",
                    "embedding"
                  ]
                }
              },
              "model": {
                "type": "string",
                "description": "The name of the model used to generate the embedding."
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always \"list\".",
                "enum": [
                  "list"
                ]
              },
              "usage": {
                "type": "object",
                "description": "The usage information for the request.",
                "properties": {
                  "prompt_tokens": {
                    "type": "integer",
                    "description": "The number of tokens used by the prompt."
                  },
                  "total_tokens": {
                    "type": "integer",
                    "description": "The total number of tokens used by the request."
                  }
                },
                "required": [
                  "prompt_tokens",
                  "total_tokens"
                ]
              }
            },
            "required": [
              "object",
              "model",
              "data",
              "usage"
            ]
          }
        ]
      }
    },
    {
      "id": "get_files",
      "operationId": "listFiles",
      "name": "List Files",
      "description": "Returns a list of files.",
      "schema": {
        "tags": [
          "Files"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_files/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/files"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "purpose": {
                  "type": "string",
                  "description": "Only return files with the given purpose."
                },
                "limit": {
                  "type": "integer",
                  "default": 10000,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 10,000, and the default is 10,000.\n"
                },
                "order": {
                  "type": "string",
                  "default": "desc",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_files/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "example": "list"
              },
              "data": {
                "type": "array",
                "items": {
                  "title": "OpenAIFile",
                  "description": "The `File` object represents a document that has been uploaded to OpenAI.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The file identifier, which can be referenced in the API endpoints."
                    },
                    "bytes": {
                      "type": "integer",
                      "description": "The size of the file, in bytes."
                    },
                    "created_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the file was created."
                    },
                    "expires_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the file will expire."
                    },
                    "filename": {
                      "type": "string",
                      "description": "The name of the file."
                    },
                    "object": {
                      "type": "string",
                      "description": "The object type, which is always `file`.",
                      "enum": [
                        "file"
                      ]
                    },
                    "purpose": {
                      "type": "string",
                      "description": "The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.",
                      "enum": [
                        "assistants",
                        "assistants_output",
                        "batch",
                        "batch_output",
                        "fine-tune",
                        "fine-tune-results",
                        "vision"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "deprecated": true,
                      "description": "Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.",
                      "enum": [
                        "uploaded",
                        "processed",
                        "error"
                      ]
                    },
                    "status_details": {
                      "type": "string",
                      "deprecated": true,
                      "description": "Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`."
                    }
                  },
                  "required": [
                    "id",
                    "object",
                    "bytes",
                    "created_at",
                    "filename",
                    "purpose",
                    "status"
                  ]
                }
              },
              "first_id": {
                "type": "string",
                "example": "file-abc123"
              },
              "last_id": {
                "type": "string",
                "example": "file-abc456"
              },
              "has_more": {
                "type": "boolean",
                "example": false
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "post_files",
      "operationId": "createFile",
      "name": "Create File",
      "description": "Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.\n\nThe Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](/docs/assistants/tools) for details.\n\nThe Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) models.\n\nThe Batch API only supports `.jsonl` files up to 200 MB in size. The input also has a specific required [format](/docs/api-reference/batch/request-input).\n\nPlease [contact us](https://help.openai.com/) if you need to increase these storage limits.\n",
      "schema": {
        "tags": [
          "Files"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_files/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/files"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "multipart/form-data"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "file": {
                    "description": "The File object (not file name) to be uploaded.\n",
                    "type": "string",
                    "format": "binary"
                  },
                  "purpose": {
                    "description": "The intended purpose of the uploaded file. One of: - `assistants`: Used in the Assistants API - `batch`: Used in the Batch API - `fine-tune`: Used for fine-tuning - `vision`: Images used for vision fine-tuning - `user_data`: Flexible file type for any purpose - `evals`: Used for eval data sets\n",
                    "type": "string",
                    "enum": [
                      "assistants",
                      "batch",
                      "fine-tune",
                      "vision",
                      "user_data",
                      "evals"
                    ]
                  }
                },
                "required": [
                  "file",
                  "purpose"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_files/output-200.schema.json",
            "type": "any",
            "title": "OpenAIFile",
            "description": "The `File` object represents a document that has been uploaded to OpenAI.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The file identifier, which can be referenced in the API endpoints."
              },
              "bytes": {
                "type": "integer",
                "description": "The size of the file, in bytes."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the file was created."
              },
              "expires_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the file will expire."
              },
              "filename": {
                "type": "string",
                "description": "The name of the file."
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always `file`.",
                "enum": [
                  "file"
                ]
              },
              "purpose": {
                "type": "string",
                "description": "The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.",
                "enum": [
                  "assistants",
                  "assistants_output",
                  "batch",
                  "batch_output",
                  "fine-tune",
                  "fine-tune-results",
                  "vision"
                ]
              },
              "status": {
                "type": "string",
                "deprecated": true,
                "description": "Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.",
                "enum": [
                  "uploaded",
                  "processed",
                  "error"
                ]
              },
              "status_details": {
                "type": "string",
                "deprecated": true,
                "description": "Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`."
              }
            },
            "required": [
              "id",
              "object",
              "bytes",
              "created_at",
              "filename",
              "purpose",
              "status"
            ]
          }
        ]
      }
    },
    {
      "id": "get_files__file_id_",
      "operationId": "retrieveFile",
      "name": "Retrieve File",
      "description": "Returns information about a specific file.",
      "schema": {
        "tags": [
          "Files"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_files__file_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/files/{file_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "file_id"
              ],
              "properties": {
                "file_id": {
                  "type": "string",
                  "description": "The ID of the file to use for this request."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_files__file_id_/output-200.schema.json",
            "type": "any",
            "title": "OpenAIFile",
            "description": "The `File` object represents a document that has been uploaded to OpenAI.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The file identifier, which can be referenced in the API endpoints."
              },
              "bytes": {
                "type": "integer",
                "description": "The size of the file, in bytes."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the file was created."
              },
              "expires_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the file will expire."
              },
              "filename": {
                "type": "string",
                "description": "The name of the file."
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always `file`.",
                "enum": [
                  "file"
                ]
              },
              "purpose": {
                "type": "string",
                "description": "The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.",
                "enum": [
                  "assistants",
                  "assistants_output",
                  "batch",
                  "batch_output",
                  "fine-tune",
                  "fine-tune-results",
                  "vision"
                ]
              },
              "status": {
                "type": "string",
                "deprecated": true,
                "description": "Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.",
                "enum": [
                  "uploaded",
                  "processed",
                  "error"
                ]
              },
              "status_details": {
                "type": "string",
                "deprecated": true,
                "description": "Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`."
              }
            },
            "required": [
              "id",
              "object",
              "bytes",
              "created_at",
              "filename",
              "purpose",
              "status"
            ]
          }
        ]
      }
    },
    {
      "id": "delete_files__file_id_",
      "operationId": "deleteFile",
      "name": "Delete File",
      "description": "Delete a file.",
      "schema": {
        "tags": [
          "Files"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_files__file_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/files/{file_id}"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "file_id"
              ],
              "properties": {
                "file_id": {
                  "type": "string",
                  "description": "The ID of the file to use for this request."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_files__file_id_/output-200.schema.json",
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "object": {
                "type": "string",
                "enum": [
                  "file"
                ]
              },
              "deleted": {
                "type": "boolean"
              }
            },
            "required": [
              "id",
              "object",
              "deleted"
            ]
          }
        ]
      }
    },
    {
      "id": "get_files__file_id__content",
      "operationId": "downloadFile",
      "name": "Download File",
      "description": "Returns the contents of the specified file.",
      "schema": {
        "tags": [
          "Files"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_files__file_id__content/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/files/{file_id}/content"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "file_id"
              ],
              "properties": {
                "file_id": {
                  "type": "string",
                  "description": "The ID of the file to use for this request."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": []
      }
    },
    {
      "id": "get_fine_tuning_checkpoints__permission_id__permissions",
      "operationId": "listFineTuningCheckpointPermissions",
      "name": "List Fine Tuning Checkpoint Permissions",
      "description": "**NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n\nOrganization owners can use this endpoint to view all permissions for a fine-tuned model checkpoint.\n",
      "schema": {
        "tags": [
          "Fine-tuning"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_fine_tuning_checkpoints__permission_id__permissions/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/fine_tuning/checkpoints/{permission_id}/permissions"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project to get permissions for."
                },
                "after": {
                  "type": "string",
                  "description": "Identifier for the last permission ID from the previous pagination request."
                },
                "limit": {
                  "type": "integer",
                  "default": 10,
                  "description": "Number of permissions to retrieve."
                },
                "order": {
                  "type": "string",
                  "enum": [
                    "ascending",
                    "descending"
                  ],
                  "default": "descending",
                  "description": "The order in which to retrieve permissions."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "permission_id"
              ],
              "properties": {
                "permission_id": {
                  "type": "string",
                  "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F",
                  "description": "The ID of the fine-tuned model checkpoint to get permissions for.\n"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_fine_tuning_checkpoints__permission_id__permissions/output-200.schema.json",
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "FineTuningCheckpointPermission",
                  "description": "The `checkpoint.permission` object represents a permission for a fine-tuned model checkpoint.\n",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The permission identifier, which can be referenced in the API endpoints."
                    },
                    "created_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the permission was created."
                    },
                    "project_id": {
                      "type": "string",
                      "description": "The project identifier that the permission is for."
                    },
                    "object": {
                      "type": "string",
                      "description": "The object type, which is always \"checkpoint.permission\".",
                      "enum": [
                        "checkpoint.permission"
                      ]
                    }
                  },
                  "required": [
                    "created_at",
                    "id",
                    "object",
                    "project_id"
                  ]
                }
              },
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ]
              },
              "first_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "last_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "has_more": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "data",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "post_fine_tuning_checkpoints__permission_id__permissions",
      "operationId": "createFineTuningCheckpointPermission",
      "name": "Create Fine Tuning Checkpoint Permission",
      "description": "**NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).\n\nThis enables organization owners to share fine-tuned models with other projects in their organization.\n",
      "schema": {
        "tags": [
          "Fine-tuning"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_fine_tuning_checkpoints__permission_id__permissions/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/fine_tuning/checkpoints/{permission_id}/permissions"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "permission_id"
              ],
              "properties": {
                "permission_id": {
                  "type": "string",
                  "example": "ft:gpt-4o-mini-2024-07-18:org:weather:B7R9VjQd",
                  "description": "The ID of the fine-tuned model checkpoint to create a permission for.\n"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "project_ids": {
                    "type": "array",
                    "description": "The project identifiers to grant access to.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "project_ids"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_fine_tuning_checkpoints__permission_id__permissions/output-200.schema.json",
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "FineTuningCheckpointPermission",
                  "description": "The `checkpoint.permission` object represents a permission for a fine-tuned model checkpoint.\n",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The permission identifier, which can be referenced in the API endpoints."
                    },
                    "created_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the permission was created."
                    },
                    "project_id": {
                      "type": "string",
                      "description": "The project identifier that the permission is for."
                    },
                    "object": {
                      "type": "string",
                      "description": "The object type, which is always \"checkpoint.permission\".",
                      "enum": [
                        "checkpoint.permission"
                      ]
                    }
                  },
                  "required": [
                    "created_at",
                    "id",
                    "object",
                    "project_id"
                  ]
                }
              },
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ]
              },
              "first_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "last_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "has_more": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "data",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "delete_fine_tuning_checkpoints__permission_id__permissions",
      "operationId": "deleteFineTuningCheckpointPermission",
      "name": "Delete Fine Tuning Checkpoint Permission",
      "description": "**NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n\nOrganization owners can use this endpoint to delete a permission for a fine-tuned model checkpoint.\n",
      "schema": {
        "tags": [
          "Fine-tuning"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_fine_tuning_checkpoints__permission_id__permissions/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/fine_tuning/checkpoints/{permission_id}/permissions"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "permission_id"
              ],
              "properties": {
                "permission_id": {
                  "type": "string",
                  "example": "cp_zc4Q7MP6XxulcVzj4MZdwsAB",
                  "description": "The ID of the fine-tuned model checkpoint permission to delete.\n"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_fine_tuning_checkpoints__permission_id__permissions/output-200.schema.json",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the fine-tuned model checkpoint permission that was deleted."
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always \"checkpoint.permission\".",
                "enum": [
                  "checkpoint.permission"
                ]
              },
              "deleted": {
                "type": "boolean",
                "description": "Whether the fine-tuned model checkpoint permission was successfully deleted."
              }
            },
            "required": [
              "id",
              "object",
              "deleted"
            ]
          }
        ]
      }
    },
    {
      "id": "get_fine_tuning_jobs",
      "operationId": "listPaginatedFineTuningJobs",
      "name": "List Paginated Fine Tuning Jobs",
      "description": "List your organization's fine-tuning jobs\n",
      "schema": {
        "tags": [
          "Fine-tuning"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_fine_tuning_jobs/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/fine_tuning/jobs"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "after": {
                  "type": "string",
                  "description": "Identifier for the last job from the previous pagination request."
                },
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "Number of fine-tuning jobs to retrieve."
                },
                "metadata": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Optional metadata filter. To filter, use the syntax `metadata[k]=v`. Alternatively, set `metadata=null` to indicate no metadata.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_fine_tuning_jobs/output-200.schema.json",
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "FineTuningJob",
                  "description": "The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.\n",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The object identifier, which can be referenced in the API endpoints."
                    },
                    "created_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the fine-tuning job was created."
                    },
                    "error": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "A machine-readable error code."
                        },
                        "message": {
                          "type": "string",
                          "description": "A human-readable error message."
                        },
                        "param": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific."
                        }
                      },
                      "required": [
                        "code",
                        "message",
                        "param"
                      ]
                    },
                    "fine_tuned_model": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running."
                    },
                    "finished_at": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "description": "The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running."
                    },
                    "hyperparameters": {
                      "type": "object",
                      "description": "The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.",
                      "properties": {
                        "batch_size": {
                          "description": "Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.\n",
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": [
                                "auto"
                              ]
                            },
                            {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 256
                            }
                          ],
                          "default": "auto"
                        },
                        "learning_rate_multiplier": {
                          "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.\n",
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": [
                                "auto"
                              ]
                            },
                            {
                              "type": "number",
                              "minimum": 0,
                              "exclusiveMinimum": true
                            }
                          ],
                          "default": "auto"
                        },
                        "n_epochs": {
                          "description": "The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.\n",
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": [
                                "auto"
                              ]
                            },
                            {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 50
                            }
                          ],
                          "default": "auto"
                        }
                      }
                    },
                    "model": {
                      "type": "string",
                      "description": "The base model that is being fine-tuned."
                    },
                    "object": {
                      "type": "string",
                      "description": "The object type, which is always \"fine_tuning.job\".",
                      "enum": [
                        "fine_tuning.job"
                      ]
                    },
                    "organization_id": {
                      "type": "string",
                      "description": "The organization that owns the fine-tuning job."
                    },
                    "result_files": {
                      "type": "array",
                      "description": "The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).",
                      "items": {
                        "type": "string",
                        "example": "file-abc123"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.",
                      "enum": [
                        "validating_files",
                        "queued",
                        "running",
                        "succeeded",
                        "failed",
                        "cancelled"
                      ]
                    },
                    "trained_tokens": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "description": "The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running."
                    },
                    "training_file": {
                      "type": "string",
                      "description": "The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents)."
                    },
                    "validation_file": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents)."
                    },
                    "integrations": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "description": "A list of integrations to enable for this fine-tuning job.",
                      "maxItems": 5,
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "Fine-Tuning Job Integration",
                            "required": [
                              "type",
                              "wandb"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of the integration being enabled for the fine-tuning job",
                                "enum": [
                                  "wandb"
                                ]
                              },
                              "wandb": {
                                "type": "object",
                                "description": "The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n",
                                "required": [
                                  "project"
                                ],
                                "properties": {
                                  "project": {
                                    "description": "The name of the project that the new run will be created under.\n",
                                    "type": "string",
                                    "example": "my-wandb-project"
                                  },
                                  "name": {
                                    "description": "A display name to set for the run. If not set, we will use the Job ID as the name.\n",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "entity": {
                                    "description": "The entity to use for the run. This allows you to set the team or username of the WandB user that you would\nlike associated with the run. If not set, the default entity for the registered WandB API key is used.\n",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "tags": {
                                    "description": "A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some\ndefault tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".\n",
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "custom-tag"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "seed": {
                      "type": "integer",
                      "description": "The seed used for the fine-tuning job."
                    },
                    "estimated_finish": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "description": "The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running."
                    },
                    "method": {
                      "type": "object",
                      "description": "The method used for fine-tuning.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of method. Is either `supervised` or `dpo`.",
                          "enum": [
                            "supervised",
                            "dpo"
                          ]
                        },
                        "supervised": {
                          "type": "object",
                          "description": "Configuration for the supervised fine-tuning method.",
                          "properties": {
                            "hyperparameters": {
                              "type": "object",
                              "description": "The hyperparameters used for the fine-tuning job.",
                              "properties": {
                                "batch_size": {
                                  "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n",
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "enum": [
                                        "auto"
                                      ]
                                    },
                                    {
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 256
                                    }
                                  ],
                                  "default": "auto"
                                },
                                "learning_rate_multiplier": {
                                  "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n",
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "enum": [
                                        "auto"
                                      ]
                                    },
                                    {
                                      "type": "number",
                                      "minimum": 0,
                                      "exclusiveMinimum": true
                                    }
                                  ],
                                  "default": "auto"
                                },
                                "n_epochs": {
                                  "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n",
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "enum": [
                                        "auto"
                                      ]
                                    },
                                    {
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 50
                                    }
                                  ],
                                  "default": "auto"
                                }
                              }
                            }
                          }
                        },
                        "dpo": {
                          "type": "object",
                          "description": "Configuration for the DPO fine-tuning method.",
                          "properties": {
                            "hyperparameters": {
                              "type": "object",
                              "description": "The hyperparameters used for the fine-tuning job.",
                              "properties": {
                                "beta": {
                                  "description": "The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.\n",
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "enum": [
                                        "auto"
                                      ]
                                    },
                                    {
                                      "type": "number",
                                      "minimum": 0,
                                      "maximum": 2,
                                      "exclusiveMinimum": true
                                    }
                                  ],
                                  "default": "auto"
                                },
                                "batch_size": {
                                  "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n",
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "enum": [
                                        "auto"
                                      ]
                                    },
                                    {
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 256
                                    }
                                  ],
                                  "default": "auto"
                                },
                                "learning_rate_multiplier": {
                                  "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n",
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "enum": [
                                        "auto"
                                      ]
                                    },
                                    {
                                      "type": "number",
                                      "minimum": 0,
                                      "exclusiveMinimum": true
                                    }
                                  ],
                                  "default": "auto"
                                },
                                "n_epochs": {
                                  "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n",
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "enum": [
                                        "auto"
                                      ]
                                    },
                                    {
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 50
                                    }
                                  ],
                                  "default": "auto"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "metadata": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "created_at",
                    "error",
                    "finished_at",
                    "fine_tuned_model",
                    "hyperparameters",
                    "id",
                    "model",
                    "object",
                    "organization_id",
                    "result_files",
                    "status",
                    "trained_tokens",
                    "training_file",
                    "validation_file",
                    "seed"
                  ]
                }
              },
              "has_more": {
                "type": "boolean"
              },
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ]
              }
            },
            "required": [
              "object",
              "data",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "post_fine_tuning_jobs",
      "operationId": "createFineTuningJob",
      "name": "Create Fine Tuning Job",
      "description": "Creates a fine-tuning job which begins the process of creating a new model from a given dataset.\n\nResponse includes details of the enqueued job including job status and the name of the fine-tuned models once complete.\n\n[Learn more about fine-tuning](/docs/guides/fine-tuning)\n",
      "schema": {
        "tags": [
          "Fine-tuning"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_fine_tuning_jobs/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/fine_tuning/jobs"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "properties": {
                  "model": {
                    "description": "The name of the model to fine-tune. You can select one of the\n[supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).\n",
                    "example": "gpt-4o-mini",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "babbage-002",
                          "davinci-002",
                          "gpt-3.5-turbo",
                          "gpt-4o-mini"
                        ]
                      }
                    ]
                  },
                  "training_file": {
                    "description": "The ID of an uploaded file that contains training data.\n\nSee [upload file](/docs/api-reference/files/create) for how to upload a file.\n\nYour dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.\n\nThe contents of the file should differ depending on if the model uses the [chat](/docs/api-reference/fine-tuning/chat-input), [completions](/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](/docs/api-reference/fine-tuning/preference-input) format.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning) for more details.\n",
                    "type": "string",
                    "example": "file-abc123"
                  },
                  "hyperparameters": {
                    "type": "object",
                    "description": "The hyperparameters used for the fine-tuning job.\nThis value is now deprecated in favor of `method`, and should be passed in under the `method` parameter.\n",
                    "properties": {
                      "batch_size": {
                        "description": "Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.\n",
                        "oneOf": [
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ]
                          },
                          {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 256
                          }
                        ],
                        "default": "auto"
                      },
                      "learning_rate_multiplier": {
                        "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.\n",
                        "oneOf": [
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ]
                          },
                          {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        ],
                        "default": "auto"
                      },
                      "n_epochs": {
                        "description": "The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.\n",
                        "oneOf": [
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ]
                          },
                          {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 50
                          }
                        ],
                        "default": "auto"
                      }
                    },
                    "deprecated": true
                  },
                  "suffix": {
                    "description": "A string of up to 64 characters that will be added to your fine-tuned model name.\n\nFor example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.\n",
                    "type": [
                      "string",
                      "null"
                    ],
                    "minLength": 1,
                    "maxLength": 64,
                    "default": null
                  },
                  "validation_file": {
                    "description": "The ID of an uploaded file that contains validation data.\n\nIf you provide this file, the data is used to generate validation\nmetrics periodically during fine-tuning. These metrics can be viewed in\nthe fine-tuning results file.\nThe same data should not be present in both train and validation files.\n\nYour dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning) for more details.\n",
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "file-abc123"
                  },
                  "integrations": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "description": "A list of integrations to enable for your fine-tuning job.",
                    "items": {
                      "type": "object",
                      "required": [
                        "type",
                        "wandb"
                      ],
                      "properties": {
                        "type": {
                          "description": "The type of integration to enable. Currently, only \"wandb\" (Weights and Biases) is supported.\n",
                          "oneOf": [
                            {
                              "type": "string",
                              "enum": [
                                "wandb"
                              ]
                            }
                          ]
                        },
                        "wandb": {
                          "type": "object",
                          "description": "The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n",
                          "required": [
                            "project"
                          ],
                          "properties": {
                            "project": {
                              "description": "The name of the project that the new run will be created under.\n",
                              "type": "string",
                              "example": "my-wandb-project"
                            },
                            "name": {
                              "description": "A display name to set for the run. If not set, we will use the Job ID as the name.\n",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "entity": {
                              "description": "The entity to use for the run. This allows you to set the team or username of the WandB user that you would\nlike associated with the run. If not set, the default entity for the registered WandB API key is used.\n",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "tags": {
                              "description": "A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some\ndefault tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".\n",
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "custom-tag"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "seed": {
                    "description": "The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.\nIf a seed is not specified, one will be generated for you.\n",
                    "type": [
                      "integer",
                      "null"
                    ],
                    "minimum": 0,
                    "maximum": 2147483647,
                    "example": 42
                  },
                  "method": {
                    "type": "object",
                    "description": "The method used for fine-tuning.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of method. Is either `supervised` or `dpo`.",
                        "enum": [
                          "supervised",
                          "dpo"
                        ]
                      },
                      "supervised": {
                        "type": "object",
                        "description": "Configuration for the supervised fine-tuning method.",
                        "properties": {
                          "hyperparameters": {
                            "type": "object",
                            "description": "The hyperparameters used for the fine-tuning job.",
                            "properties": {
                              "batch_size": {
                                "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n",
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "enum": [
                                      "auto"
                                    ]
                                  },
                                  {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 256
                                  }
                                ],
                                "default": "auto"
                              },
                              "learning_rate_multiplier": {
                                "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n",
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "enum": [
                                      "auto"
                                    ]
                                  },
                                  {
                                    "type": "number",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                ],
                                "default": "auto"
                              },
                              "n_epochs": {
                                "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n",
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "enum": [
                                      "auto"
                                    ]
                                  },
                                  {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 50
                                  }
                                ],
                                "default": "auto"
                              }
                            }
                          }
                        }
                      },
                      "dpo": {
                        "type": "object",
                        "description": "Configuration for the DPO fine-tuning method.",
                        "properties": {
                          "hyperparameters": {
                            "type": "object",
                            "description": "The hyperparameters used for the fine-tuning job.",
                            "properties": {
                              "beta": {
                                "description": "The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.\n",
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "enum": [
                                      "auto"
                                    ]
                                  },
                                  {
                                    "type": "number",
                                    "minimum": 0,
                                    "maximum": 2,
                                    "exclusiveMinimum": true
                                  }
                                ],
                                "default": "auto"
                              },
                              "batch_size": {
                                "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n",
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "enum": [
                                      "auto"
                                    ]
                                  },
                                  {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 256
                                  }
                                ],
                                "default": "auto"
                              },
                              "learning_rate_multiplier": {
                                "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n",
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "enum": [
                                      "auto"
                                    ]
                                  },
                                  {
                                    "type": "number",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                ],
                                "default": "auto"
                              },
                              "n_epochs": {
                                "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n",
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "enum": [
                                      "auto"
                                    ]
                                  },
                                  {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 50
                                  }
                                ],
                                "default": "auto"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "metadata": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "model",
                  "training_file"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_fine_tuning_jobs/output-200.schema.json",
            "type": "object",
            "title": "FineTuningJob",
            "description": "The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.\n",
            "properties": {
              "id": {
                "type": "string",
                "description": "The object identifier, which can be referenced in the API endpoints."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the fine-tuning job was created."
              },
              "error": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "A machine-readable error code."
                  },
                  "message": {
                    "type": "string",
                    "description": "A human-readable error message."
                  },
                  "param": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific."
                  }
                },
                "required": [
                  "code",
                  "message",
                  "param"
                ]
              },
              "fine_tuned_model": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running."
              },
              "finished_at": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running."
              },
              "hyperparameters": {
                "type": "object",
                "description": "The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.",
                "properties": {
                  "batch_size": {
                    "description": "Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "auto"
                        ]
                      },
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 256
                      }
                    ],
                    "default": "auto"
                  },
                  "learning_rate_multiplier": {
                    "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "auto"
                        ]
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "exclusiveMinimum": true
                      }
                    ],
                    "default": "auto"
                  },
                  "n_epochs": {
                    "description": "The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "auto"
                        ]
                      },
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 50
                      }
                    ],
                    "default": "auto"
                  }
                }
              },
              "model": {
                "type": "string",
                "description": "The base model that is being fine-tuned."
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always \"fine_tuning.job\".",
                "enum": [
                  "fine_tuning.job"
                ]
              },
              "organization_id": {
                "type": "string",
                "description": "The organization that owns the fine-tuning job."
              },
              "result_files": {
                "type": "array",
                "description": "The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).",
                "items": {
                  "type": "string",
                  "example": "file-abc123"
                }
              },
              "status": {
                "type": "string",
                "description": "The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.",
                "enum": [
                  "validating_files",
                  "queued",
                  "running",
                  "succeeded",
                  "failed",
                  "cancelled"
                ]
              },
              "trained_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running."
              },
              "training_file": {
                "type": "string",
                "description": "The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents)."
              },
              "validation_file": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents)."
              },
              "integrations": {
                "type": [
                  "array",
                  "null"
                ],
                "description": "A list of integrations to enable for this fine-tuning job.",
                "maxItems": 5,
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Fine-Tuning Job Integration",
                      "required": [
                        "type",
                        "wandb"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of the integration being enabled for the fine-tuning job",
                          "enum": [
                            "wandb"
                          ]
                        },
                        "wandb": {
                          "type": "object",
                          "description": "The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n",
                          "required": [
                            "project"
                          ],
                          "properties": {
                            "project": {
                              "description": "The name of the project that the new run will be created under.\n",
                              "type": "string",
                              "example": "my-wandb-project"
                            },
                            "name": {
                              "description": "A display name to set for the run. If not set, we will use the Job ID as the name.\n",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "entity": {
                              "description": "The entity to use for the run. This allows you to set the team or username of the WandB user that you would\nlike associated with the run. If not set, the default entity for the registered WandB API key is used.\n",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "tags": {
                              "description": "A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some\ndefault tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".\n",
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "custom-tag"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "seed": {
                "type": "integer",
                "description": "The seed used for the fine-tuning job."
              },
              "estimated_finish": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running."
              },
              "method": {
                "type": "object",
                "description": "The method used for fine-tuning.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of method. Is either `supervised` or `dpo`.",
                    "enum": [
                      "supervised",
                      "dpo"
                    ]
                  },
                  "supervised": {
                    "type": "object",
                    "description": "Configuration for the supervised fine-tuning method.",
                    "properties": {
                      "hyperparameters": {
                        "type": "object",
                        "description": "The hyperparameters used for the fine-tuning job.",
                        "properties": {
                          "batch_size": {
                            "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 256
                              }
                            ],
                            "default": "auto"
                          },
                          "learning_rate_multiplier": {
                            "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            ],
                            "default": "auto"
                          },
                          "n_epochs": {
                            "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 50
                              }
                            ],
                            "default": "auto"
                          }
                        }
                      }
                    }
                  },
                  "dpo": {
                    "type": "object",
                    "description": "Configuration for the DPO fine-tuning method.",
                    "properties": {
                      "hyperparameters": {
                        "type": "object",
                        "description": "The hyperparameters used for the fine-tuning job.",
                        "properties": {
                          "beta": {
                            "description": "The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 2,
                                "exclusiveMinimum": true
                              }
                            ],
                            "default": "auto"
                          },
                          "batch_size": {
                            "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 256
                              }
                            ],
                            "default": "auto"
                          },
                          "learning_rate_multiplier": {
                            "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            ],
                            "default": "auto"
                          },
                          "n_epochs": {
                            "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 50
                              }
                            ],
                            "default": "auto"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "created_at",
              "error",
              "finished_at",
              "fine_tuned_model",
              "hyperparameters",
              "id",
              "model",
              "object",
              "organization_id",
              "result_files",
              "status",
              "trained_tokens",
              "training_file",
              "validation_file",
              "seed"
            ]
          }
        ]
      }
    },
    {
      "id": "get_fine_tuning_jobs__fine_tuning_job_id_",
      "operationId": "retrieveFineTuningJob",
      "name": "Retrieve Fine Tuning Job",
      "description": "Get info about a fine-tuning job.\n\n[Learn more about fine-tuning](/docs/guides/fine-tuning)\n",
      "schema": {
        "tags": [
          "Fine-tuning"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_fine_tuning_jobs__fine_tuning_job_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/fine_tuning/jobs/{fine_tuning_job_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "fine_tuning_job_id"
              ],
              "properties": {
                "fine_tuning_job_id": {
                  "type": "string",
                  "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F",
                  "description": "The ID of the fine-tuning job.\n"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_fine_tuning_jobs__fine_tuning_job_id_/output-200.schema.json",
            "type": "object",
            "title": "FineTuningJob",
            "description": "The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.\n",
            "properties": {
              "id": {
                "type": "string",
                "description": "The object identifier, which can be referenced in the API endpoints."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the fine-tuning job was created."
              },
              "error": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "A machine-readable error code."
                  },
                  "message": {
                    "type": "string",
                    "description": "A human-readable error message."
                  },
                  "param": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific."
                  }
                },
                "required": [
                  "code",
                  "message",
                  "param"
                ]
              },
              "fine_tuned_model": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running."
              },
              "finished_at": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running."
              },
              "hyperparameters": {
                "type": "object",
                "description": "The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.",
                "properties": {
                  "batch_size": {
                    "description": "Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "auto"
                        ]
                      },
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 256
                      }
                    ],
                    "default": "auto"
                  },
                  "learning_rate_multiplier": {
                    "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "auto"
                        ]
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "exclusiveMinimum": true
                      }
                    ],
                    "default": "auto"
                  },
                  "n_epochs": {
                    "description": "The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "auto"
                        ]
                      },
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 50
                      }
                    ],
                    "default": "auto"
                  }
                }
              },
              "model": {
                "type": "string",
                "description": "The base model that is being fine-tuned."
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always \"fine_tuning.job\".",
                "enum": [
                  "fine_tuning.job"
                ]
              },
              "organization_id": {
                "type": "string",
                "description": "The organization that owns the fine-tuning job."
              },
              "result_files": {
                "type": "array",
                "description": "The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).",
                "items": {
                  "type": "string",
                  "example": "file-abc123"
                }
              },
              "status": {
                "type": "string",
                "description": "The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.",
                "enum": [
                  "validating_files",
                  "queued",
                  "running",
                  "succeeded",
                  "failed",
                  "cancelled"
                ]
              },
              "trained_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running."
              },
              "training_file": {
                "type": "string",
                "description": "The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents)."
              },
              "validation_file": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents)."
              },
              "integrations": {
                "type": [
                  "array",
                  "null"
                ],
                "description": "A list of integrations to enable for this fine-tuning job.",
                "maxItems": 5,
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Fine-Tuning Job Integration",
                      "required": [
                        "type",
                        "wandb"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of the integration being enabled for the fine-tuning job",
                          "enum": [
                            "wandb"
                          ]
                        },
                        "wandb": {
                          "type": "object",
                          "description": "The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n",
                          "required": [
                            "project"
                          ],
                          "properties": {
                            "project": {
                              "description": "The name of the project that the new run will be created under.\n",
                              "type": "string",
                              "example": "my-wandb-project"
                            },
                            "name": {
                              "description": "A display name to set for the run. If not set, we will use the Job ID as the name.\n",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "entity": {
                              "description": "The entity to use for the run. This allows you to set the team or username of the WandB user that you would\nlike associated with the run. If not set, the default entity for the registered WandB API key is used.\n",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "tags": {
                              "description": "A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some\ndefault tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".\n",
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "custom-tag"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "seed": {
                "type": "integer",
                "description": "The seed used for the fine-tuning job."
              },
              "estimated_finish": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running."
              },
              "method": {
                "type": "object",
                "description": "The method used for fine-tuning.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of method. Is either `supervised` or `dpo`.",
                    "enum": [
                      "supervised",
                      "dpo"
                    ]
                  },
                  "supervised": {
                    "type": "object",
                    "description": "Configuration for the supervised fine-tuning method.",
                    "properties": {
                      "hyperparameters": {
                        "type": "object",
                        "description": "The hyperparameters used for the fine-tuning job.",
                        "properties": {
                          "batch_size": {
                            "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 256
                              }
                            ],
                            "default": "auto"
                          },
                          "learning_rate_multiplier": {
                            "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            ],
                            "default": "auto"
                          },
                          "n_epochs": {
                            "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 50
                              }
                            ],
                            "default": "auto"
                          }
                        }
                      }
                    }
                  },
                  "dpo": {
                    "type": "object",
                    "description": "Configuration for the DPO fine-tuning method.",
                    "properties": {
                      "hyperparameters": {
                        "type": "object",
                        "description": "The hyperparameters used for the fine-tuning job.",
                        "properties": {
                          "beta": {
                            "description": "The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 2,
                                "exclusiveMinimum": true
                              }
                            ],
                            "default": "auto"
                          },
                          "batch_size": {
                            "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 256
                              }
                            ],
                            "default": "auto"
                          },
                          "learning_rate_multiplier": {
                            "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            ],
                            "default": "auto"
                          },
                          "n_epochs": {
                            "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 50
                              }
                            ],
                            "default": "auto"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "created_at",
              "error",
              "finished_at",
              "fine_tuned_model",
              "hyperparameters",
              "id",
              "model",
              "object",
              "organization_id",
              "result_files",
              "status",
              "trained_tokens",
              "training_file",
              "validation_file",
              "seed"
            ]
          }
        ]
      }
    },
    {
      "id": "post_fine_tuning_jobs__fine_tuning_job_id__cancel",
      "operationId": "cancelFineTuningJob",
      "name": "Cancel Fine Tuning Job",
      "description": "Immediately cancel a fine-tune job.\n",
      "schema": {
        "tags": [
          "Fine-tuning"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_fine_tuning_jobs__fine_tuning_job_id__cancel/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/fine_tuning/jobs/{fine_tuning_job_id}/cancel"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "fine_tuning_job_id"
              ],
              "properties": {
                "fine_tuning_job_id": {
                  "type": "string",
                  "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F",
                  "description": "The ID of the fine-tuning job to cancel.\n"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_fine_tuning_jobs__fine_tuning_job_id__cancel/output-200.schema.json",
            "type": "object",
            "title": "FineTuningJob",
            "description": "The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.\n",
            "properties": {
              "id": {
                "type": "string",
                "description": "The object identifier, which can be referenced in the API endpoints."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the fine-tuning job was created."
              },
              "error": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "A machine-readable error code."
                  },
                  "message": {
                    "type": "string",
                    "description": "A human-readable error message."
                  },
                  "param": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific."
                  }
                },
                "required": [
                  "code",
                  "message",
                  "param"
                ]
              },
              "fine_tuned_model": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running."
              },
              "finished_at": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running."
              },
              "hyperparameters": {
                "type": "object",
                "description": "The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.",
                "properties": {
                  "batch_size": {
                    "description": "Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "auto"
                        ]
                      },
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 256
                      }
                    ],
                    "default": "auto"
                  },
                  "learning_rate_multiplier": {
                    "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "auto"
                        ]
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "exclusiveMinimum": true
                      }
                    ],
                    "default": "auto"
                  },
                  "n_epochs": {
                    "description": "The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "auto"
                        ]
                      },
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 50
                      }
                    ],
                    "default": "auto"
                  }
                }
              },
              "model": {
                "type": "string",
                "description": "The base model that is being fine-tuned."
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always \"fine_tuning.job\".",
                "enum": [
                  "fine_tuning.job"
                ]
              },
              "organization_id": {
                "type": "string",
                "description": "The organization that owns the fine-tuning job."
              },
              "result_files": {
                "type": "array",
                "description": "The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).",
                "items": {
                  "type": "string",
                  "example": "file-abc123"
                }
              },
              "status": {
                "type": "string",
                "description": "The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.",
                "enum": [
                  "validating_files",
                  "queued",
                  "running",
                  "succeeded",
                  "failed",
                  "cancelled"
                ]
              },
              "trained_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running."
              },
              "training_file": {
                "type": "string",
                "description": "The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents)."
              },
              "validation_file": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents)."
              },
              "integrations": {
                "type": [
                  "array",
                  "null"
                ],
                "description": "A list of integrations to enable for this fine-tuning job.",
                "maxItems": 5,
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Fine-Tuning Job Integration",
                      "required": [
                        "type",
                        "wandb"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of the integration being enabled for the fine-tuning job",
                          "enum": [
                            "wandb"
                          ]
                        },
                        "wandb": {
                          "type": "object",
                          "description": "The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n",
                          "required": [
                            "project"
                          ],
                          "properties": {
                            "project": {
                              "description": "The name of the project that the new run will be created under.\n",
                              "type": "string",
                              "example": "my-wandb-project"
                            },
                            "name": {
                              "description": "A display name to set for the run. If not set, we will use the Job ID as the name.\n",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "entity": {
                              "description": "The entity to use for the run. This allows you to set the team or username of the WandB user that you would\nlike associated with the run. If not set, the default entity for the registered WandB API key is used.\n",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "tags": {
                              "description": "A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some\ndefault tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".\n",
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "custom-tag"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "seed": {
                "type": "integer",
                "description": "The seed used for the fine-tuning job."
              },
              "estimated_finish": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running."
              },
              "method": {
                "type": "object",
                "description": "The method used for fine-tuning.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of method. Is either `supervised` or `dpo`.",
                    "enum": [
                      "supervised",
                      "dpo"
                    ]
                  },
                  "supervised": {
                    "type": "object",
                    "description": "Configuration for the supervised fine-tuning method.",
                    "properties": {
                      "hyperparameters": {
                        "type": "object",
                        "description": "The hyperparameters used for the fine-tuning job.",
                        "properties": {
                          "batch_size": {
                            "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 256
                              }
                            ],
                            "default": "auto"
                          },
                          "learning_rate_multiplier": {
                            "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            ],
                            "default": "auto"
                          },
                          "n_epochs": {
                            "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 50
                              }
                            ],
                            "default": "auto"
                          }
                        }
                      }
                    }
                  },
                  "dpo": {
                    "type": "object",
                    "description": "Configuration for the DPO fine-tuning method.",
                    "properties": {
                      "hyperparameters": {
                        "type": "object",
                        "description": "The hyperparameters used for the fine-tuning job.",
                        "properties": {
                          "beta": {
                            "description": "The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 2,
                                "exclusiveMinimum": true
                              }
                            ],
                            "default": "auto"
                          },
                          "batch_size": {
                            "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 256
                              }
                            ],
                            "default": "auto"
                          },
                          "learning_rate_multiplier": {
                            "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            ],
                            "default": "auto"
                          },
                          "n_epochs": {
                            "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n",
                            "oneOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "auto"
                                ]
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 50
                              }
                            ],
                            "default": "auto"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "created_at",
              "error",
              "finished_at",
              "fine_tuned_model",
              "hyperparameters",
              "id",
              "model",
              "object",
              "organization_id",
              "result_files",
              "status",
              "trained_tokens",
              "training_file",
              "validation_file",
              "seed"
            ]
          }
        ]
      }
    },
    {
      "id": "get_fine_tuning_jobs__fine_tuning_job_id__checkpoints",
      "operationId": "listFineTuningJobCheckpoints",
      "name": "List Fine Tuning Job Checkpoints",
      "description": "List checkpoints for a fine-tuning job.\n",
      "schema": {
        "tags": [
          "Fine-tuning"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_fine_tuning_jobs__fine_tuning_job_id__checkpoints/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "after": {
                  "type": "string",
                  "description": "Identifier for the last checkpoint ID from the previous pagination request."
                },
                "limit": {
                  "type": "integer",
                  "default": 10,
                  "description": "Number of checkpoints to retrieve."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "fine_tuning_job_id"
              ],
              "properties": {
                "fine_tuning_job_id": {
                  "type": "string",
                  "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F",
                  "description": "The ID of the fine-tuning job to get checkpoints for.\n"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_fine_tuning_jobs__fine_tuning_job_id__checkpoints/output-200.schema.json",
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "FineTuningJobCheckpoint",
                  "description": "The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use.\n",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The checkpoint identifier, which can be referenced in the API endpoints."
                    },
                    "created_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the checkpoint was created."
                    },
                    "fine_tuned_model_checkpoint": {
                      "type": "string",
                      "description": "The name of the fine-tuned checkpoint model that is created."
                    },
                    "step_number": {
                      "type": "integer",
                      "description": "The step number that the checkpoint was created at."
                    },
                    "metrics": {
                      "type": "object",
                      "description": "Metrics at the step number during the fine-tuning job.",
                      "properties": {
                        "step": {
                          "type": "number"
                        },
                        "train_loss": {
                          "type": "number"
                        },
                        "train_mean_token_accuracy": {
                          "type": "number"
                        },
                        "valid_loss": {
                          "type": "number"
                        },
                        "valid_mean_token_accuracy": {
                          "type": "number"
                        },
                        "full_valid_loss": {
                          "type": "number"
                        },
                        "full_valid_mean_token_accuracy": {
                          "type": "number"
                        }
                      }
                    },
                    "fine_tuning_job_id": {
                      "type": "string",
                      "description": "The name of the fine-tuning job that this checkpoint was created from."
                    },
                    "object": {
                      "type": "string",
                      "description": "The object type, which is always \"fine_tuning.job.checkpoint\".",
                      "enum": [
                        "fine_tuning.job.checkpoint"
                      ]
                    }
                  },
                  "required": [
                    "created_at",
                    "fine_tuning_job_id",
                    "fine_tuned_model_checkpoint",
                    "id",
                    "metrics",
                    "object",
                    "step_number"
                  ]
                }
              },
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ]
              },
              "first_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "last_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "has_more": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "data",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "get_fine_tuning_jobs__fine_tuning_job_id__events",
      "operationId": "listFineTuningEvents",
      "name": "List Fine Tuning Events",
      "description": "Get status updates for a fine-tuning job.\n",
      "schema": {
        "tags": [
          "Fine-tuning"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_fine_tuning_jobs__fine_tuning_job_id__events/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/fine_tuning/jobs/{fine_tuning_job_id}/events"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "after": {
                  "type": "string",
                  "description": "Identifier for the last event from the previous pagination request."
                },
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "Number of events to retrieve."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "fine_tuning_job_id"
              ],
              "properties": {
                "fine_tuning_job_id": {
                  "type": "string",
                  "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F",
                  "description": "The ID of the fine-tuning job to get events for.\n"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_fine_tuning_jobs__fine_tuning_job_id__events/output-200.schema.json",
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Fine-tuning job event object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "description": "The object type, which is always \"fine_tuning.job.event\".",
                      "enum": [
                        "fine_tuning.job.event"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "description": "The object identifier."
                    },
                    "created_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) for when the fine-tuning job was created."
                    },
                    "level": {
                      "type": "string",
                      "description": "The log level of the event.",
                      "enum": [
                        "info",
                        "warn",
                        "error"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "The message of the event."
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of event.",
                      "enum": [
                        "message",
                        "metrics"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "The data associated with the event."
                    }
                  },
                  "required": [
                    "id",
                    "object",
                    "created_at",
                    "level",
                    "message"
                  ]
                }
              },
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ]
              },
              "has_more": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "data",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "post_images_edits",
      "operationId": "createImageEdit",
      "name": "Create Image Edit",
      "description": "Creates an edited or extended image given an original image and a prompt.",
      "schema": {
        "tags": [
          "Images"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_images_edits/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/images/edits"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "multipart/form-data"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "properties": {
                  "image": {
                    "description": "The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.",
                    "type": "string",
                    "format": "binary"
                  },
                  "prompt": {
                    "description": "A text description of the desired image(s). The maximum length is 1000 characters.",
                    "type": "string",
                    "example": "A cute baby sea otter wearing a beret"
                  },
                  "mask": {
                    "description": "An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.",
                    "type": "string",
                    "format": "binary"
                  },
                  "model": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "dall-e-2"
                        ]
                      }
                    ],
                    "default": "dall-e-2",
                    "example": "dall-e-2",
                    "description": "The model to use for image generation. Only `dall-e-2` is supported at this time."
                  },
                  "n": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "minimum": 1,
                    "maximum": 10,
                    "default": 1,
                    "example": 1,
                    "description": "The number of images to generate. Must be between 1 and 10."
                  },
                  "size": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "256x256",
                      "512x512",
                      "1024x1024"
                    ],
                    "default": "1024x1024",
                    "example": "1024x1024",
                    "description": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`."
                  },
                  "response_format": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "url",
                      "b64_json"
                    ],
                    "default": "url",
                    "example": "url",
                    "description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated."
                  },
                  "user": {
                    "type": "string",
                    "example": "user-1234",
                    "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
                  }
                },
                "required": [
                  "prompt",
                  "image"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_images_edits/output-200.schema.json",
            "type": "any",
            "properties": {
              "created": {
                "type": "integer"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Represents the url or the content of an image generated by the OpenAI API.",
                  "properties": {
                    "b64_json": {
                      "type": "string",
                      "description": "The base64-encoded JSON of the generated image, if `response_format` is `b64_json`."
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL of the generated image, if `response_format` is `url` (default)."
                    },
                    "revised_prompt": {
                      "type": "string",
                      "description": "The prompt that was used to generate the image, if there was any revision to the prompt."
                    }
                  }
                }
              }
            },
            "required": [
              "created",
              "data"
            ]
          }
        ]
      }
    },
    {
      "id": "post_images_generations",
      "operationId": "createImage",
      "name": "Create Image",
      "description": "Creates an image given a prompt.",
      "schema": {
        "tags": [
          "Images"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_images_generations/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/images/generations"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "properties": {
                  "prompt": {
                    "description": "A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.",
                    "type": "string",
                    "example": "A cute baby sea otter"
                  },
                  "model": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "dall-e-2",
                          "dall-e-3"
                        ]
                      }
                    ],
                    "default": "dall-e-2",
                    "example": "dall-e-3",
                    "description": "The model to use for image generation."
                  },
                  "n": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "minimum": 1,
                    "maximum": 10,
                    "default": 1,
                    "example": 1,
                    "description": "The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported."
                  },
                  "quality": {
                    "type": "string",
                    "enum": [
                      "standard",
                      "hd"
                    ],
                    "default": "standard",
                    "example": "standard",
                    "description": "The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`."
                  },
                  "response_format": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "url",
                      "b64_json"
                    ],
                    "default": "url",
                    "example": "url",
                    "description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated."
                  },
                  "size": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "256x256",
                      "512x512",
                      "1024x1024",
                      "1792x1024",
                      "1024x1792"
                    ],
                    "default": "1024x1024",
                    "example": "1024x1024",
                    "description": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models."
                  },
                  "style": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "vivid",
                      "natural"
                    ],
                    "default": "vivid",
                    "example": "vivid",
                    "description": "The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`."
                  },
                  "user": {
                    "type": "string",
                    "example": "user-1234",
                    "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
                  }
                },
                "required": [
                  "prompt"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_images_generations/output-200.schema.json",
            "type": "any",
            "properties": {
              "created": {
                "type": "integer"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Represents the url or the content of an image generated by the OpenAI API.",
                  "properties": {
                    "b64_json": {
                      "type": "string",
                      "description": "The base64-encoded JSON of the generated image, if `response_format` is `b64_json`."
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL of the generated image, if `response_format` is `url` (default)."
                    },
                    "revised_prompt": {
                      "type": "string",
                      "description": "The prompt that was used to generate the image, if there was any revision to the prompt."
                    }
                  }
                }
              }
            },
            "required": [
              "created",
              "data"
            ]
          }
        ]
      }
    },
    {
      "id": "post_images_variations",
      "operationId": "createImageVariation",
      "name": "Create Image Variation",
      "description": "Creates a variation of a given image.",
      "schema": {
        "tags": [
          "Images"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_images_variations/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/images/variations"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "multipart/form-data"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "properties": {
                  "image": {
                    "description": "The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.",
                    "type": "string",
                    "format": "binary"
                  },
                  "model": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "dall-e-2"
                        ]
                      }
                    ],
                    "default": "dall-e-2",
                    "example": "dall-e-2",
                    "description": "The model to use for image generation. Only `dall-e-2` is supported at this time."
                  },
                  "n": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "minimum": 1,
                    "maximum": 10,
                    "default": 1,
                    "example": 1,
                    "description": "The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported."
                  },
                  "response_format": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "url",
                      "b64_json"
                    ],
                    "default": "url",
                    "example": "url",
                    "description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated."
                  },
                  "size": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "256x256",
                      "512x512",
                      "1024x1024"
                    ],
                    "default": "1024x1024",
                    "example": "1024x1024",
                    "description": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`."
                  },
                  "user": {
                    "type": "string",
                    "example": "user-1234",
                    "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
                  }
                },
                "required": [
                  "image"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_images_variations/output-200.schema.json",
            "type": "any",
            "properties": {
              "created": {
                "type": "integer"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Represents the url or the content of an image generated by the OpenAI API.",
                  "properties": {
                    "b64_json": {
                      "type": "string",
                      "description": "The base64-encoded JSON of the generated image, if `response_format` is `b64_json`."
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL of the generated image, if `response_format` is `url` (default)."
                    },
                    "revised_prompt": {
                      "type": "string",
                      "description": "The prompt that was used to generate the image, if there was any revision to the prompt."
                    }
                  }
                }
              }
            },
            "required": [
              "created",
              "data"
            ]
          }
        ]
      }
    },
    {
      "id": "get_models",
      "operationId": "listModels",
      "name": "List Models",
      "description": "Lists the currently available models, and provides basic information about each one such as the owner and availability.",
      "schema": {
        "tags": [
          "Models"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_models/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/models"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_models/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "title": "Model",
                  "description": "Describes an OpenAI model offering that can be used with the API.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The model identifier, which can be referenced in the API endpoints."
                    },
                    "created": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) when the model was created."
                    },
                    "object": {
                      "type": "string",
                      "description": "The object type, which is always \"model\".",
                      "enum": [
                        "model"
                      ]
                    },
                    "owned_by": {
                      "type": "string",
                      "description": "The organization that owns the model."
                    }
                  },
                  "required": [
                    "id",
                    "object",
                    "created",
                    "owned_by"
                  ]
                }
              }
            },
            "required": [
              "object",
              "data"
            ]
          }
        ]
      }
    },
    {
      "id": "get_models__model_",
      "operationId": "retrieveModel",
      "name": "Retrieve Model",
      "description": "Retrieves a model instance, providing basic information about the model such as the owner and permissioning.",
      "schema": {
        "tags": [
          "Models"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_models__model_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/models/{model}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "model"
              ],
              "properties": {
                "model": {
                  "type": "string",
                  "example": "gpt-4o-mini",
                  "description": "The ID of the model to use for this request"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_models__model_/output-200.schema.json",
            "type": "any",
            "title": "Model",
            "description": "Describes an OpenAI model offering that can be used with the API.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The model identifier, which can be referenced in the API endpoints."
              },
              "created": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) when the model was created."
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always \"model\".",
                "enum": [
                  "model"
                ]
              },
              "owned_by": {
                "type": "string",
                "description": "The organization that owns the model."
              }
            },
            "required": [
              "id",
              "object",
              "created",
              "owned_by"
            ]
          }
        ]
      }
    },
    {
      "id": "delete_models__model_",
      "operationId": "deleteModel",
      "name": "Delete Model",
      "description": "Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.",
      "schema": {
        "tags": [
          "Models"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_models__model_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/models/{model}"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "model"
              ],
              "properties": {
                "model": {
                  "type": "string",
                  "example": "ft:gpt-4o-mini:acemeco:suffix:abc123",
                  "description": "The model to delete"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_models__model_/output-200.schema.json",
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              },
              "object": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "object",
              "deleted"
            ]
          }
        ]
      }
    },
    {
      "id": "post_moderations",
      "operationId": "createModeration",
      "name": "Create Moderation",
      "description": "Classifies if text and/or image inputs are potentially harmful. Learn\nmore in the [moderation guide](/docs/guides/moderation).\n",
      "schema": {
        "tags": [
          "Moderations"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_moderations/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/moderations"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "properties": {
                  "input": {
                    "description": "Input (or inputs) to classify. Can be a single string, an array of strings, or\nan array of multi-modal input objects similar to other models.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "A string of text to classify for moderation.",
                        "default": "",
                        "example": "I want to kill them."
                      },
                      {
                        "type": "array",
                        "description": "An array of strings to classify for moderation.",
                        "items": {
                          "type": "string",
                          "default": "",
                          "example": "I want to kill them."
                        }
                      },
                      {
                        "type": "array",
                        "description": "An array of multi-modal inputs to the moderation model.",
                        "items": {
                          "oneOf": [
                            {
                              "type": "object",
                              "description": "An object describing an image to classify.",
                              "properties": {
                                "type": {
                                  "description": "Always `image_url`.",
                                  "type": "string",
                                  "enum": [
                                    "image_url"
                                  ]
                                },
                                "image_url": {
                                  "type": "object",
                                  "description": "Contains either an image URL or a data URL for a base64 encoded image.",
                                  "properties": {
                                    "url": {
                                      "type": "string",
                                      "description": "Either a URL of the image or the base64 encoded image data.",
                                      "format": "uri",
                                      "example": "https://example.com/image.jpg"
                                    }
                                  },
                                  "required": [
                                    "url"
                                  ]
                                }
                              },
                              "required": [
                                "type",
                                "image_url"
                              ]
                            },
                            {
                              "type": "object",
                              "description": "An object describing text to classify.",
                              "properties": {
                                "type": {
                                  "description": "Always `text`.",
                                  "type": "string",
                                  "enum": [
                                    "text"
                                  ]
                                },
                                "text": {
                                  "description": "A string of text to classify.",
                                  "type": "string",
                                  "example": "I want to kill them"
                                }
                              },
                              "required": [
                                "type",
                                "text"
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "model": {
                    "description": "The content moderation model you would like to use. Learn more in\n[the moderation guide](/docs/guides/moderation), and learn about\navailable models [here](/docs/models#moderation).\n",
                    "default": "omni-moderation-latest",
                    "example": "omni-moderation-2024-09-26",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "omni-moderation-latest",
                          "omni-moderation-2024-09-26",
                          "text-moderation-latest",
                          "text-moderation-stable"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "input"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_moderations/output-200.schema.json",
            "type": "object",
            "description": "Represents if a given text input is potentially harmful.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique identifier for the moderation request."
              },
              "model": {
                "type": "string",
                "description": "The model used to generate the moderation results."
              },
              "results": {
                "type": "array",
                "description": "A list of moderation objects.",
                "items": {
                  "type": "object",
                  "properties": {
                    "flagged": {
                      "type": "boolean",
                      "description": "Whether any of the below categories are flagged."
                    },
                    "categories": {
                      "type": "object",
                      "description": "A list of the categories, and whether they are flagged or not.",
                      "properties": {
                        "hate": {
                          "type": "boolean",
                          "description": "Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment."
                        },
                        "hate/threatening": {
                          "type": "boolean",
                          "description": "Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste."
                        },
                        "harassment": {
                          "type": "boolean",
                          "description": "Content that expresses, incites, or promotes harassing language towards any target."
                        },
                        "harassment/threatening": {
                          "type": "boolean",
                          "description": "Harassment content that also includes violence or serious harm towards any target."
                        },
                        "illicit": {
                          "type": [
                            "boolean",
                            "null"
                          ],
                          "description": "Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, \"how to shoplift\" would fit this category."
                        },
                        "illicit/violent": {
                          "type": [
                            "boolean",
                            "null"
                          ],
                          "description": "Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of any weapon."
                        },
                        "self-harm": {
                          "type": "boolean",
                          "description": "Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders."
                        },
                        "self-harm/intent": {
                          "type": "boolean",
                          "description": "Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders."
                        },
                        "self-harm/instructions": {
                          "type": "boolean",
                          "description": "Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts."
                        },
                        "sexual": {
                          "type": "boolean",
                          "description": "Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness)."
                        },
                        "sexual/minors": {
                          "type": "boolean",
                          "description": "Sexual content that includes an individual who is under 18 years old."
                        },
                        "violence": {
                          "type": "boolean",
                          "description": "Content that depicts death, violence, or physical injury."
                        },
                        "violence/graphic": {
                          "type": "boolean",
                          "description": "Content that depicts death, violence, or physical injury in graphic detail."
                        }
                      },
                      "required": [
                        "hate",
                        "hate/threatening",
                        "harassment",
                        "harassment/threatening",
                        "illicit",
                        "illicit/violent",
                        "self-harm",
                        "self-harm/intent",
                        "self-harm/instructions",
                        "sexual",
                        "sexual/minors",
                        "violence",
                        "violence/graphic"
                      ]
                    },
                    "category_scores": {
                      "type": "object",
                      "description": "A list of the categories along with their scores as predicted by model.",
                      "properties": {
                        "hate": {
                          "type": "number",
                          "description": "The score for the category 'hate'."
                        },
                        "hate/threatening": {
                          "type": "number",
                          "description": "The score for the category 'hate/threatening'."
                        },
                        "harassment": {
                          "type": "number",
                          "description": "The score for the category 'harassment'."
                        },
                        "harassment/threatening": {
                          "type": "number",
                          "description": "The score for the category 'harassment/threatening'."
                        },
                        "illicit": {
                          "type": "number",
                          "description": "The score for the category 'illicit'."
                        },
                        "illicit/violent": {
                          "type": "number",
                          "description": "The score for the category 'illicit/violent'."
                        },
                        "self-harm": {
                          "type": "number",
                          "description": "The score for the category 'self-harm'."
                        },
                        "self-harm/intent": {
                          "type": "number",
                          "description": "The score for the category 'self-harm/intent'."
                        },
                        "self-harm/instructions": {
                          "type": "number",
                          "description": "The score for the category 'self-harm/instructions'."
                        },
                        "sexual": {
                          "type": "number",
                          "description": "The score for the category 'sexual'."
                        },
                        "sexual/minors": {
                          "type": "number",
                          "description": "The score for the category 'sexual/minors'."
                        },
                        "violence": {
                          "type": "number",
                          "description": "The score for the category 'violence'."
                        },
                        "violence/graphic": {
                          "type": "number",
                          "description": "The score for the category 'violence/graphic'."
                        }
                      },
                      "required": [
                        "hate",
                        "hate/threatening",
                        "harassment",
                        "harassment/threatening",
                        "illicit",
                        "illicit/violent",
                        "self-harm",
                        "self-harm/intent",
                        "self-harm/instructions",
                        "sexual",
                        "sexual/minors",
                        "violence",
                        "violence/graphic"
                      ]
                    },
                    "category_applied_input_types": {
                      "type": "object",
                      "description": "A list of the categories along with the input type(s) that the score applies to.",
                      "properties": {
                        "hate": {
                          "type": "array",
                          "description": "The applied input type(s) for the category 'hate'.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "text"
                            ]
                          }
                        },
                        "hate/threatening": {
                          "type": "array",
                          "description": "The applied input type(s) for the category 'hate/threatening'.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "text"
                            ]
                          }
                        },
                        "harassment": {
                          "type": "array",
                          "description": "The applied input type(s) for the category 'harassment'.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "text"
                            ]
                          }
                        },
                        "harassment/threatening": {
                          "type": "array",
                          "description": "The applied input type(s) for the category 'harassment/threatening'.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "text"
                            ]
                          }
                        },
                        "illicit": {
                          "type": "array",
                          "description": "The applied input type(s) for the category 'illicit'.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "text"
                            ]
                          }
                        },
                        "illicit/violent": {
                          "type": "array",
                          "description": "The applied input type(s) for the category 'illicit/violent'.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "text"
                            ]
                          }
                        },
                        "self-harm": {
                          "type": "array",
                          "description": "The applied input type(s) for the category 'self-harm'.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "text",
                              "image"
                            ]
                          }
                        },
                        "self-harm/intent": {
                          "type": "array",
                          "description": "The applied input type(s) for the category 'self-harm/intent'.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "text",
                              "image"
                            ]
                          }
                        },
                        "self-harm/instructions": {
                          "type": "array",
                          "description": "The applied input type(s) for the category 'self-harm/instructions'.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "text",
                              "image"
                            ]
                          }
                        },
                        "sexual": {
                          "type": "array",
                          "description": "The applied input type(s) for the category 'sexual'.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "text",
                              "image"
                            ]
                          }
                        },
                        "sexual/minors": {
                          "type": "array",
                          "description": "The applied input type(s) for the category 'sexual/minors'.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "text"
                            ]
                          }
                        },
                        "violence": {
                          "type": "array",
                          "description": "The applied input type(s) for the category 'violence'.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "text",
                              "image"
                            ]
                          }
                        },
                        "violence/graphic": {
                          "type": "array",
                          "description": "The applied input type(s) for the category 'violence/graphic'.",
                          "items": {
                            "type": "string",
                            "enum": [
                              "text",
                              "image"
                            ]
                          }
                        }
                      },
                      "required": [
                        "hate",
                        "hate/threatening",
                        "harassment",
                        "harassment/threatening",
                        "illicit",
                        "illicit/violent",
                        "self-harm",
                        "self-harm/intent",
                        "self-harm/instructions",
                        "sexual",
                        "sexual/minors",
                        "violence",
                        "violence/graphic"
                      ]
                    }
                  },
                  "required": [
                    "flagged",
                    "categories",
                    "category_scores",
                    "category_applied_input_types"
                  ]
                }
              }
            },
            "required": [
              "id",
              "model",
              "results"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_admin_api_keys",
      "operationId": "admin-api-keys-list",
      "name": "Admin Api Keys List",
      "description": "List organization API keys",
      "schema": {
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_admin_api_keys/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/admin_api_keys"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "after": {
                  "type": "string"
                },
                "order": {
                  "type": "string",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "default": "asc"
                },
                "limit": {
                  "type": "integer",
                  "default": 20
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_admin_api_keys/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "example": "list"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "example": "organization.admin_api_key"
                    },
                    "id": {
                      "type": "string",
                      "example": "key_abc"
                    },
                    "name": {
                      "type": "string",
                      "example": "Administration Key"
                    },
                    "redacted_value": {
                      "type": "string",
                      "example": "sk-admin...def"
                    },
                    "value": {
                      "type": "string",
                      "example": "sk-admin-1234abcd"
                    },
                    "created_at": {
                      "type": "integer",
                      "format": "int64",
                      "example": 1711471533
                    },
                    "owner": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "service_account"
                        },
                        "id": {
                          "type": "string",
                          "example": "sa_456"
                        },
                        "name": {
                          "type": "string",
                          "example": "My Service Account"
                        },
                        "created_at": {
                          "type": "integer",
                          "format": "int64",
                          "example": 1711471533
                        },
                        "role": {
                          "type": "string",
                          "example": "member"
                        }
                      }
                    }
                  }
                }
              },
              "has_more": {
                "type": "boolean",
                "example": false
              },
              "first_id": {
                "type": "string",
                "example": "key_abc"
              },
              "last_id": {
                "type": "string",
                "example": "key_xyz"
              }
            }
          }
        ]
      }
    },
    {
      "id": "post_organization_admin_api_keys",
      "operationId": "admin-api-keys-create",
      "name": "Admin Api Keys Create",
      "description": "Create an organization admin API key",
      "schema": {
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_organization_admin_api_keys/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/admin_api_keys"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "New Admin Key"
                  }
                }
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_organization_admin_api_keys/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "example": "organization.admin_api_key"
              },
              "id": {
                "type": "string",
                "example": "key_abc"
              },
              "name": {
                "type": "string",
                "example": "Administration Key"
              },
              "redacted_value": {
                "type": "string",
                "example": "sk-admin...def"
              },
              "value": {
                "type": "string",
                "example": "sk-admin-1234abcd"
              },
              "created_at": {
                "type": "integer",
                "format": "int64",
                "example": 1711471533
              },
              "owner": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "service_account"
                  },
                  "id": {
                    "type": "string",
                    "example": "sa_456"
                  },
                  "name": {
                    "type": "string",
                    "example": "My Service Account"
                  },
                  "created_at": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1711471533
                  },
                  "role": {
                    "type": "string",
                    "example": "member"
                  }
                }
              }
            }
          }
        ]
      }
    },
    {
      "id": "get_organization_admin_api_keys__key_id_",
      "operationId": "admin-api-keys-get",
      "name": "Admin Api Keys Get",
      "description": "Retrieve a single organization API key",
      "schema": {
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_admin_api_keys__key_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/admin_api_keys/{key_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "key_id"
              ],
              "properties": {
                "key_id": {
                  "type": "string"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_admin_api_keys__key_id_/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "example": "organization.admin_api_key"
              },
              "id": {
                "type": "string",
                "example": "key_abc"
              },
              "name": {
                "type": "string",
                "example": "Administration Key"
              },
              "redacted_value": {
                "type": "string",
                "example": "sk-admin...def"
              },
              "value": {
                "type": "string",
                "example": "sk-admin-1234abcd"
              },
              "created_at": {
                "type": "integer",
                "format": "int64",
                "example": 1711471533
              },
              "owner": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "service_account"
                  },
                  "id": {
                    "type": "string",
                    "example": "sa_456"
                  },
                  "name": {
                    "type": "string",
                    "example": "My Service Account"
                  },
                  "created_at": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1711471533
                  },
                  "role": {
                    "type": "string",
                    "example": "member"
                  }
                }
              }
            }
          }
        ]
      }
    },
    {
      "id": "delete_organization_admin_api_keys__key_id_",
      "operationId": "admin-api-keys-delete",
      "name": "Admin Api Keys Delete",
      "description": "Delete an organization admin API key",
      "schema": {
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_organization_admin_api_keys__key_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/admin_api_keys/{key_id}"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "key_id"
              ],
              "properties": {
                "key_id": {
                  "type": "string"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_organization_admin_api_keys__key_id_/output-200.schema.json",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "key_abc"
              },
              "object": {
                "type": "string",
                "example": "organization.admin_api_key.deleted"
              },
              "deleted": {
                "type": "boolean",
                "example": true
              }
            }
          }
        ]
      }
    },
    {
      "id": "get_organization_audit_logs",
      "operationId": "list-audit-logs",
      "name": "List Audit Logs",
      "description": "List user actions and configuration changes within this organization.",
      "schema": {
        "tags": [
          "Audit Logs"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_audit_logs/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/audit_logs"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "effective_at": {
                  "type": "object",
                  "properties": {
                    "gt": {
                      "type": "integer",
                      "description": "Return only events whose `effective_at` (Unix seconds) is greater than this value."
                    },
                    "gte": {
                      "type": "integer",
                      "description": "Return only events whose `effective_at` (Unix seconds) is greater than or equal to this value."
                    },
                    "lt": {
                      "type": "integer",
                      "description": "Return only events whose `effective_at` (Unix seconds) is less than this value."
                    },
                    "lte": {
                      "type": "integer",
                      "description": "Return only events whose `effective_at` (Unix seconds) is less than or equal to this value."
                    }
                  },
                  "description": "Return only events whose `effective_at` (Unix seconds) is in this range."
                },
                "project_ids[]": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only events for these projects."
                },
                "event_types[]": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "The event type.",
                    "enum": [
                      "api_key.created",
                      "api_key.updated",
                      "api_key.deleted",
                      "invite.sent",
                      "invite.accepted",
                      "invite.deleted",
                      "login.succeeded",
                      "login.failed",
                      "logout.succeeded",
                      "logout.failed",
                      "organization.updated",
                      "project.created",
                      "project.updated",
                      "project.archived",
                      "service_account.created",
                      "service_account.updated",
                      "service_account.deleted",
                      "rate_limit.updated",
                      "rate_limit.deleted",
                      "user.added",
                      "user.updated",
                      "user.deleted"
                    ]
                  },
                  "description": "Return only events with a `type` in one of these values. For example, `project.created`. For all options, see the documentation for the [audit log object](/docs/api-reference/audit-logs/object)."
                },
                "actor_ids[]": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only events performed by these actors. Can be a user ID, a service account ID, or an api key tracking ID."
                },
                "actor_emails[]": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only events performed by users with these emails."
                },
                "resource_ids[]": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only events performed on these targets. For example, a project ID updated."
                },
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                },
                "before": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_audit_logs/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A log of a user action or configuration change within this organization.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of this log."
                    },
                    "type": {
                      "type": "string",
                      "description": "The event type.",
                      "enum": [
                        "api_key.created",
                        "api_key.updated",
                        "api_key.deleted",
                        "invite.sent",
                        "invite.accepted",
                        "invite.deleted",
                        "login.succeeded",
                        "login.failed",
                        "logout.succeeded",
                        "logout.failed",
                        "organization.updated",
                        "project.created",
                        "project.updated",
                        "project.archived",
                        "service_account.created",
                        "service_account.updated",
                        "service_account.deleted",
                        "rate_limit.updated",
                        "rate_limit.deleted",
                        "user.added",
                        "user.updated",
                        "user.deleted"
                      ]
                    },
                    "effective_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) of the event."
                    },
                    "project": {
                      "type": "object",
                      "description": "The project that the action was scoped to. Absent for actions not scoped to projects.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The project ID."
                        },
                        "name": {
                          "type": "string",
                          "description": "The project title."
                        }
                      }
                    },
                    "actor": {
                      "type": "object",
                      "description": "The actor who performed the audit logged action.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of actor. Is either `session` or `api_key`.",
                          "enum": [
                            "session",
                            "api_key"
                          ]
                        },
                        "session": {
                          "type": "object",
                          "description": "The session in which the audit logged action was performed.",
                          "properties": {
                            "user": {
                              "type": "object",
                              "description": "The user who performed the audit logged action.",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The user id."
                                },
                                "email": {
                                  "type": "string",
                                  "description": "The user email."
                                }
                              }
                            },
                            "ip_address": {
                              "type": "string",
                              "description": "The IP address from which the action was performed."
                            }
                          }
                        },
                        "api_key": {
                          "type": "object",
                          "description": "The API Key used to perform the audit logged action.",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The tracking id of the API key."
                            },
                            "type": {
                              "type": "string",
                              "description": "The type of API key. Can be either `user` or `service_account`.",
                              "enum": [
                                "user",
                                "service_account"
                              ]
                            },
                            "user": {
                              "type": "object",
                              "description": "The user who performed the audit logged action.",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The user id."
                                },
                                "email": {
                                  "type": "string",
                                  "description": "The user email."
                                }
                              }
                            },
                            "service_account": {
                              "type": "object",
                              "description": "The service account that performed the audit logged action.",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The service account id."
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "api_key.created": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The tracking ID of the API key."
                        },
                        "data": {
                          "type": "object",
                          "description": "The payload used to create the API key.",
                          "properties": {
                            "scopes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "A list of scopes allowed for the API key, e.g. `[\"api.model.request\"]`"
                            }
                          }
                        }
                      }
                    },
                    "api_key.updated": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The tracking ID of the API key."
                        },
                        "changes_requested": {
                          "type": "object",
                          "description": "The payload used to update the API key.",
                          "properties": {
                            "scopes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "A list of scopes allowed for the API key, e.g. `[\"api.model.request\"]`"
                            }
                          }
                        }
                      }
                    },
                    "api_key.deleted": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The tracking ID of the API key."
                        }
                      }
                    },
                    "invite.sent": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the invite."
                        },
                        "data": {
                          "type": "object",
                          "description": "The payload used to create the invite.",
                          "properties": {
                            "email": {
                              "type": "string",
                              "description": "The email invited to the organization."
                            },
                            "role": {
                              "type": "string",
                              "description": "The role the email was invited to be. Is either `owner` or `member`."
                            }
                          }
                        }
                      }
                    },
                    "invite.accepted": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the invite."
                        }
                      }
                    },
                    "invite.deleted": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The ID of the invite."
                        }
                      }
                    },
                    "login.failed": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "error_code": {
                          "type": "string",
                          "description": "The error code of the failure."
                        },
                        "error_message": {
                          "type": "string",
                          "description": "The error message of the failure."
                        }
                      }
                    },
                    "logout.failed": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "error_code": {
                          "type": "string",
                          "description": "The error code of the failure."
                        },
                        "error_message": {
                          "type": "string",
                          "description": "The error message of the failure."
                        }
                      }
                    },
                    "organization.updated": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The organization ID."
                        },
                        "changes_requested": {
                          "type": "object",
                          "description": "The payload used to update the organization settings.",
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "The organization title."
                            },
                            "description": {
                              "type": "string",
                              "description": "The organization description."
                            },
                            "name": {
                              "type": "string",
                              "description": "The organization name."
                            },
                            "settings": {
                              "type": "object",
                              "properties": {
                                "threads_ui_visibility": {
                                  "type": "string",
                                  "description": "Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`."
                                },
                                "usage_dashboard_visibility": {
                                  "type": "string",
                                  "description": "Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`."
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "project.created": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The project ID."
                        },
                        "data": {
                          "type": "object",
                          "description": "The payload used to create the project.",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The project name."
                            },
                            "title": {
                              "type": "string",
                              "description": "The title of the project as seen on the dashboard."
                            }
                          }
                        }
                      }
                    },
                    "project.updated": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The project ID."
                        },
                        "changes_requested": {
                          "type": "object",
                          "description": "The payload used to update the project.",
                          "properties": {
                            "title": {
                              "type": "string",
                              "description": "The title of the project as seen on the dashboard."
                            }
                          }
                        }
                      }
                    },
                    "project.archived": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The project ID."
                        }
                      }
                    },
                    "rate_limit.updated": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The rate limit ID"
                        },
                        "changes_requested": {
                          "type": "object",
                          "description": "The payload used to update the rate limits.",
                          "properties": {
                            "max_requests_per_1_minute": {
                              "type": "integer",
                              "description": "The maximum requests per minute."
                            },
                            "max_tokens_per_1_minute": {
                              "type": "integer",
                              "description": "The maximum tokens per minute."
                            },
                            "max_images_per_1_minute": {
                              "type": "integer",
                              "description": "The maximum images per minute. Only relevant for certain models."
                            },
                            "max_audio_megabytes_per_1_minute": {
                              "type": "integer",
                              "description": "The maximum audio megabytes per minute. Only relevant for certain models."
                            },
                            "max_requests_per_1_day": {
                              "type": "integer",
                              "description": "The maximum requests per day. Only relevant for certain models."
                            },
                            "batch_1_day_max_input_tokens": {
                              "type": "integer",
                              "description": "The maximum batch input tokens per day. Only relevant for certain models."
                            }
                          }
                        }
                      }
                    },
                    "rate_limit.deleted": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The rate limit ID"
                        }
                      }
                    },
                    "service_account.created": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The service account ID."
                        },
                        "data": {
                          "type": "object",
                          "description": "The payload used to create the service account.",
                          "properties": {
                            "role": {
                              "type": "string",
                              "description": "The role of the service account. Is either `owner` or `member`."
                            }
                          }
                        }
                      }
                    },
                    "service_account.updated": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The service account ID."
                        },
                        "changes_requested": {
                          "type": "object",
                          "description": "The payload used to updated the service account.",
                          "properties": {
                            "role": {
                              "type": "string",
                              "description": "The role of the service account. Is either `owner` or `member`."
                            }
                          }
                        }
                      }
                    },
                    "service_account.deleted": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The service account ID."
                        }
                      }
                    },
                    "user.added": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The user ID."
                        },
                        "data": {
                          "type": "object",
                          "description": "The payload used to add the user to the project.",
                          "properties": {
                            "role": {
                              "type": "string",
                              "description": "The role of the user. Is either `owner` or `member`."
                            }
                          }
                        }
                      }
                    },
                    "user.updated": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The project ID."
                        },
                        "changes_requested": {
                          "type": "object",
                          "description": "The payload used to update the user.",
                          "properties": {
                            "role": {
                              "type": "string",
                              "description": "The role of the user. Is either `owner` or `member`."
                            }
                          }
                        }
                      }
                    },
                    "user.deleted": {
                      "type": "object",
                      "description": "The details for events with this `type`.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The user ID."
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "type",
                    "effective_at",
                    "actor"
                  ]
                }
              },
              "first_id": {
                "type": "string",
                "example": "audit_log-defb456h8dks"
              },
              "last_id": {
                "type": "string",
                "example": "audit_log-hnbkd8s93s"
              },
              "has_more": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_costs",
      "operationId": "usage-costs",
      "name": "Usage Costs",
      "description": "Get costs details for the organization.",
      "schema": {
        "tags": [
          "Usage"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_costs/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/costs"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "required": [
                "start_time"
              ],
              "properties": {
                "start_time": {
                  "type": "integer",
                  "description": "Start time (Unix seconds) of the query time range, inclusive."
                },
                "end_time": {
                  "type": "integer",
                  "description": "End time (Unix seconds) of the query time range, exclusive."
                },
                "bucket_width": {
                  "type": "string",
                  "enum": [
                    "1d"
                  ],
                  "default": "1d",
                  "description": "Width of each time bucket in response. Currently only `1d` is supported, default to `1d`."
                },
                "project_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only costs for these projects."
                },
                "group_by": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "project_id",
                      "line_item"
                    ]
                  },
                  "description": "Group the costs by the specified fields. Support fields include `project_id`, `line_item` and any combination of them."
                },
                "limit": {
                  "type": "integer",
                  "default": 7,
                  "description": "A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7.\n"
                },
                "page": {
                  "type": "string",
                  "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_costs/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "page"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "bucket"
                      ]
                    },
                    "start_time": {
                      "type": "integer"
                    },
                    "end_time": {
                      "type": "integer"
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "The aggregated completions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.completions.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_cached_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "output_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio input tokens used, including cached tokens."
                              },
                              "output_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio output tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              },
                              "batch": {
                                "type": [
                                  "boolean",
                                  "null"
                                ],
                                "description": "When `group_by=batch`, this field tells whether the grouped usage result is batch or not."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "output_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated embeddings usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.embeddings.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated moderations usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.moderations.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated images usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.images.result"
                                ]
                              },
                              "images": {
                                "type": "integer",
                                "description": "The number of images processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "source": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`."
                              },
                              "size": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=size`, this field provides the image size of the grouped usage result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "images",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio speeches usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_speeches.result"
                                ]
                              },
                              "characters": {
                                "type": "integer",
                                "description": "The number of characters processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "characters",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio transcriptions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_transcriptions.result"
                                ]
                              },
                              "seconds": {
                                "type": "integer",
                                "description": "The number of seconds processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "seconds",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated vector stores usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.vector_stores.result"
                                ]
                              },
                              "usage_bytes": {
                                "type": "integer",
                                "description": "The vector stores usage in bytes."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "usage_bytes"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated code interpreter sessions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.code_interpreter_sessions.result"
                                ]
                              },
                              "num_sessions": {
                                "type": "integer",
                                "description": "The number of code interpreter sessions."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "sessions"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated costs details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.costs.result"
                                ]
                              },
                              "amount": {
                                "type": "object",
                                "description": "The monetary value in its associated currency.",
                                "properties": {
                                  "value": {
                                    "type": "number",
                                    "description": "The numeric value of the cost."
                                  },
                                  "currency": {
                                    "type": "string",
                                    "description": "Lowercase ISO-4217 currency e.g. \"usd\""
                                  }
                                }
                              },
                              "line_item": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=line_item`, this field provides the line item of the grouped costs result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped costs result."
                              }
                            },
                            "required": [
                              "object"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "object",
                    "start_time",
                    "end_time",
                    "result"
                  ]
                }
              },
              "has_more": {
                "type": "boolean"
              },
              "next_page": {
                "type": "string"
              }
            },
            "required": [
              "object",
              "data",
              "has_more",
              "next_page"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_invites",
      "operationId": "list-invites",
      "name": "List Invites",
      "description": "Returns a list of invites in the organization.",
      "schema": {
        "tags": [
          "Invites"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_invites/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/invites"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_invites/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ],
                "description": "The object type, which is always `list`"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Represents an individual `invite` to the organization.",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "organization.invite"
                      ],
                      "description": "The object type, which is always `organization.invite`"
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier, which can be referenced in API endpoints"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email address of the individual to whom the invite was sent"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "owner",
                        "reader"
                      ],
                      "description": "`owner` or `reader`"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "accepted",
                        "expired",
                        "pending"
                      ],
                      "description": "`accepted`,`expired`, or `pending`"
                    },
                    "invited_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) of when the invite was sent."
                    },
                    "expires_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) of when the invite expires."
                    },
                    "accepted_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) of when the invite was accepted."
                    },
                    "projects": {
                      "type": "array",
                      "description": "The projects that were granted membership upon acceptance of the invite.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Project's public ID"
                          },
                          "role": {
                            "type": "string",
                            "enum": [
                              "member",
                              "owner"
                            ],
                            "description": "Project membership role"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "object",
                    "id",
                    "email",
                    "role",
                    "status",
                    "invited_at",
                    "expires_at"
                  ]
                }
              },
              "first_id": {
                "type": "string",
                "description": "The first `invite_id` in the retrieved `list`"
              },
              "last_id": {
                "type": "string",
                "description": "The last `invite_id` in the retrieved `list`"
              },
              "has_more": {
                "type": "boolean",
                "description": "The `has_more` property is used for pagination to indicate there are additional results."
              }
            },
            "required": [
              "object",
              "data"
            ]
          }
        ]
      }
    },
    {
      "id": "post_organization_invites",
      "operationId": "inviteUser",
      "name": "Invite User",
      "description": "Create an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization.",
      "schema": {
        "tags": [
          "Invites"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_organization_invites/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/invites"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "The invite request payload.",
              "properties": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Send an email to this address"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "reader",
                      "owner"
                    ],
                    "description": "`owner` or `reader`"
                  },
                  "projects": {
                    "type": "array",
                    "description": "An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Project's public ID"
                        },
                        "role": {
                          "type": "string",
                          "enum": [
                            "member",
                            "owner"
                          ],
                          "description": "Project membership role"
                        }
                      },
                      "required": [
                        "id",
                        "role"
                      ]
                    }
                  }
                },
                "required": [
                  "email",
                  "role"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_organization_invites/output-200.schema.json",
            "type": "object",
            "description": "Represents an individual `invite` to the organization.",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "organization.invite"
                ],
                "description": "The object type, which is always `organization.invite`"
              },
              "id": {
                "type": "string",
                "description": "The identifier, which can be referenced in API endpoints"
              },
              "email": {
                "type": "string",
                "description": "The email address of the individual to whom the invite was sent"
              },
              "role": {
                "type": "string",
                "enum": [
                  "owner",
                  "reader"
                ],
                "description": "`owner` or `reader`"
              },
              "status": {
                "type": "string",
                "enum": [
                  "accepted",
                  "expired",
                  "pending"
                ],
                "description": "`accepted`,`expired`, or `pending`"
              },
              "invited_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the invite was sent."
              },
              "expires_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the invite expires."
              },
              "accepted_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the invite was accepted."
              },
              "projects": {
                "type": "array",
                "description": "The projects that were granted membership upon acceptance of the invite.",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Project's public ID"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "member",
                        "owner"
                      ],
                      "description": "Project membership role"
                    }
                  }
                }
              }
            },
            "required": [
              "object",
              "id",
              "email",
              "role",
              "status",
              "invited_at",
              "expires_at"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_invites__invite_id_",
      "operationId": "retrieve-invite",
      "name": "Retrieve Invite",
      "description": "Retrieves an invite.",
      "schema": {
        "tags": [
          "Invites"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_invites__invite_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/invites/{invite_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "invite_id"
              ],
              "properties": {
                "invite_id": {
                  "type": "string",
                  "description": "The ID of the invite to retrieve."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_invites__invite_id_/output-200.schema.json",
            "type": "object",
            "description": "Represents an individual `invite` to the organization.",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "organization.invite"
                ],
                "description": "The object type, which is always `organization.invite`"
              },
              "id": {
                "type": "string",
                "description": "The identifier, which can be referenced in API endpoints"
              },
              "email": {
                "type": "string",
                "description": "The email address of the individual to whom the invite was sent"
              },
              "role": {
                "type": "string",
                "enum": [
                  "owner",
                  "reader"
                ],
                "description": "`owner` or `reader`"
              },
              "status": {
                "type": "string",
                "enum": [
                  "accepted",
                  "expired",
                  "pending"
                ],
                "description": "`accepted`,`expired`, or `pending`"
              },
              "invited_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the invite was sent."
              },
              "expires_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the invite expires."
              },
              "accepted_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the invite was accepted."
              },
              "projects": {
                "type": "array",
                "description": "The projects that were granted membership upon acceptance of the invite.",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Project's public ID"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "member",
                        "owner"
                      ],
                      "description": "Project membership role"
                    }
                  }
                }
              }
            },
            "required": [
              "object",
              "id",
              "email",
              "role",
              "status",
              "invited_at",
              "expires_at"
            ]
          }
        ]
      }
    },
    {
      "id": "delete_organization_invites__invite_id_",
      "operationId": "delete-invite",
      "name": "Delete Invite",
      "description": "Delete an invite. If the invite has already been accepted, it cannot be deleted.",
      "schema": {
        "tags": [
          "Invites"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_organization_invites__invite_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/invites/{invite_id}"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "invite_id"
              ],
              "properties": {
                "invite_id": {
                  "type": "string",
                  "description": "The ID of the invite to delete."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_organization_invites__invite_id_/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "organization.invite.deleted"
                ],
                "description": "The object type, which is always `organization.invite.deleted`"
              },
              "id": {
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "id",
              "deleted"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_projects",
      "operationId": "list-projects",
      "name": "List Projects",
      "description": "Returns a list of projects.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                },
                "include_archived": {
                  "type": "boolean",
                  "default": false,
                  "description": "If `true` returns all projects including those that have been `archived`. Archived projects are not included by default."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Represents an individual project.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The identifier, which can be referenced in API endpoints"
                    },
                    "object": {
                      "type": "string",
                      "enum": [
                        "organization.project"
                      ],
                      "description": "The object type, which is always `organization.project`"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the project. This appears in reporting."
                    },
                    "created_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) of when the project was created."
                    },
                    "archived_at": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "description": "The Unix timestamp (in seconds) of when the project was archived or `null`."
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "active",
                        "archived"
                      ],
                      "description": "`active` or `archived`"
                    }
                  },
                  "required": [
                    "id",
                    "object",
                    "name",
                    "created_at",
                    "status"
                  ]
                }
              },
              "first_id": {
                "type": "string"
              },
              "last_id": {
                "type": "string"
              },
              "has_more": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "post_organization_projects",
      "operationId": "create-project",
      "name": "Create Project",
      "description": "Create a new project in the organization. Projects can be created and archived, but cannot be deleted.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "The project create request payload.",
              "properties": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The friendly name of the project, this name appears in reports."
                  }
                },
                "required": [
                  "name"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects/output-200.schema.json",
            "type": "object",
            "description": "Represents an individual project.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier, which can be referenced in API endpoints"
              },
              "object": {
                "type": "string",
                "enum": [
                  "organization.project"
                ],
                "description": "The object type, which is always `organization.project`"
              },
              "name": {
                "type": "string",
                "description": "The name of the project. This appears in reporting."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the project was created."
              },
              "archived_at": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The Unix timestamp (in seconds) of when the project was archived or `null`."
              },
              "status": {
                "type": "string",
                "enum": [
                  "active",
                  "archived"
                ],
                "description": "`active` or `archived`"
              }
            },
            "required": [
              "id",
              "object",
              "name",
              "created_at",
              "status"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_projects__project_id_",
      "operationId": "retrieve-project",
      "name": "Retrieve Project",
      "description": "Retrieves a project.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id_/output-200.schema.json",
            "type": "object",
            "description": "Represents an individual project.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier, which can be referenced in API endpoints"
              },
              "object": {
                "type": "string",
                "enum": [
                  "organization.project"
                ],
                "description": "The object type, which is always `organization.project`"
              },
              "name": {
                "type": "string",
                "description": "The name of the project. This appears in reporting."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the project was created."
              },
              "archived_at": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The Unix timestamp (in seconds) of when the project was archived or `null`."
              },
              "status": {
                "type": "string",
                "enum": [
                  "active",
                  "archived"
                ],
                "description": "`active` or `archived`"
              }
            },
            "required": [
              "id",
              "object",
              "name",
              "created_at",
              "status"
            ]
          }
        ]
      }
    },
    {
      "id": "post_organization_projects__project_id_",
      "operationId": "modify-project",
      "name": "Modify Project",
      "description": "Modifies a project in the organization.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "The project update request payload.",
              "properties": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The updated name of the project, this name appears in reports."
                  }
                },
                "required": [
                  "name"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id_/output-200.schema.json",
            "type": "object",
            "description": "Represents an individual project.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier, which can be referenced in API endpoints"
              },
              "object": {
                "type": "string",
                "enum": [
                  "organization.project"
                ],
                "description": "The object type, which is always `organization.project`"
              },
              "name": {
                "type": "string",
                "description": "The name of the project. This appears in reporting."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the project was created."
              },
              "archived_at": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The Unix timestamp (in seconds) of when the project was archived or `null`."
              },
              "status": {
                "type": "string",
                "enum": [
                  "active",
                  "archived"
                ],
                "description": "`active` or `archived`"
              }
            },
            "required": [
              "id",
              "object",
              "name",
              "created_at",
              "status"
            ]
          },
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id_/output-400.schema.json",
            "type": "object",
            "properties": {
              "error": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "message": {
                    "type": "string"
                  },
                  "param": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "message",
                  "param",
                  "code"
                ]
              }
            },
            "required": [
              "error"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_projects__project_id__api_keys",
      "operationId": "list-project-api-keys",
      "name": "List Project Api Keys",
      "description": "Returns a list of API keys in the project.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__api_keys/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}/api_keys"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__api_keys/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Represents an individual API key in a project.",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "organization.project.api_key"
                      ],
                      "description": "The object type, which is always `organization.project.api_key`"
                    },
                    "redacted_value": {
                      "type": "string",
                      "description": "The redacted value of the API key"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the API key"
                    },
                    "created_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) of when the API key was created"
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier, which can be referenced in API endpoints"
                    },
                    "owner": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "user",
                            "service_account"
                          ],
                          "description": "`user` or `service_account`"
                        },
                        "user": {
                          "type": "object",
                          "description": "Represents an individual user in a project.",
                          "properties": {
                            "object": {
                              "type": "string",
                              "enum": [
                                "organization.project.user"
                              ],
                              "description": "The object type, which is always `organization.project.user`"
                            },
                            "id": {
                              "type": "string",
                              "description": "The identifier, which can be referenced in API endpoints"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the user"
                            },
                            "email": {
                              "type": "string",
                              "description": "The email address of the user"
                            },
                            "role": {
                              "type": "string",
                              "enum": [
                                "owner",
                                "member"
                              ],
                              "description": "`owner` or `member`"
                            },
                            "added_at": {
                              "type": "integer",
                              "description": "The Unix timestamp (in seconds) of when the project was added."
                            }
                          },
                          "required": [
                            "object",
                            "id",
                            "name",
                            "email",
                            "role",
                            "added_at"
                          ]
                        },
                        "service_account": {
                          "type": "object",
                          "description": "Represents an individual service account in a project.",
                          "properties": {
                            "object": {
                              "type": "string",
                              "enum": [
                                "organization.project.service_account"
                              ],
                              "description": "The object type, which is always `organization.project.service_account`"
                            },
                            "id": {
                              "type": "string",
                              "description": "The identifier, which can be referenced in API endpoints"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the service account"
                            },
                            "role": {
                              "type": "string",
                              "enum": [
                                "owner",
                                "member"
                              ],
                              "description": "`owner` or `member`"
                            },
                            "created_at": {
                              "type": "integer",
                              "description": "The Unix timestamp (in seconds) of when the service account was created"
                            }
                          },
                          "required": [
                            "object",
                            "id",
                            "name",
                            "role",
                            "created_at"
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "object",
                    "redacted_value",
                    "name",
                    "created_at",
                    "id",
                    "owner"
                  ]
                }
              },
              "first_id": {
                "type": "string"
              },
              "last_id": {
                "type": "string"
              },
              "has_more": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_projects__project_id__api_keys__key_id_",
      "operationId": "retrieve-project-api-key",
      "name": "Retrieve Project Api Key",
      "description": "Retrieves an API key in the project.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__api_keys__key_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}/api_keys/{key_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id",
                "key_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                },
                "key_id": {
                  "type": "string",
                  "description": "The ID of the API key."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__api_keys__key_id_/output-200.schema.json",
            "type": "object",
            "description": "Represents an individual API key in a project.",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "organization.project.api_key"
                ],
                "description": "The object type, which is always `organization.project.api_key`"
              },
              "redacted_value": {
                "type": "string",
                "description": "The redacted value of the API key"
              },
              "name": {
                "type": "string",
                "description": "The name of the API key"
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the API key was created"
              },
              "id": {
                "type": "string",
                "description": "The identifier, which can be referenced in API endpoints"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "user",
                      "service_account"
                    ],
                    "description": "`user` or `service_account`"
                  },
                  "user": {
                    "type": "object",
                    "description": "Represents an individual user in a project.",
                    "properties": {
                      "object": {
                        "type": "string",
                        "enum": [
                          "organization.project.user"
                        ],
                        "description": "The object type, which is always `organization.project.user`"
                      },
                      "id": {
                        "type": "string",
                        "description": "The identifier, which can be referenced in API endpoints"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the user"
                      },
                      "email": {
                        "type": "string",
                        "description": "The email address of the user"
                      },
                      "role": {
                        "type": "string",
                        "enum": [
                          "owner",
                          "member"
                        ],
                        "description": "`owner` or `member`"
                      },
                      "added_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) of when the project was added."
                      }
                    },
                    "required": [
                      "object",
                      "id",
                      "name",
                      "email",
                      "role",
                      "added_at"
                    ]
                  },
                  "service_account": {
                    "type": "object",
                    "description": "Represents an individual service account in a project.",
                    "properties": {
                      "object": {
                        "type": "string",
                        "enum": [
                          "organization.project.service_account"
                        ],
                        "description": "The object type, which is always `organization.project.service_account`"
                      },
                      "id": {
                        "type": "string",
                        "description": "The identifier, which can be referenced in API endpoints"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the service account"
                      },
                      "role": {
                        "type": "string",
                        "enum": [
                          "owner",
                          "member"
                        ],
                        "description": "`owner` or `member`"
                      },
                      "created_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) of when the service account was created"
                      }
                    },
                    "required": [
                      "object",
                      "id",
                      "name",
                      "role",
                      "created_at"
                    ]
                  }
                }
              }
            },
            "required": [
              "object",
              "redacted_value",
              "name",
              "created_at",
              "id",
              "owner"
            ]
          }
        ]
      }
    },
    {
      "id": "delete_organization_projects__project_id__api_keys__key_id_",
      "operationId": "delete-project-api-key",
      "name": "Delete Project Api Key",
      "description": "Deletes an API key from the project.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_organization_projects__project_id__api_keys__key_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}/api_keys/{key_id}"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id",
                "key_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                },
                "key_id": {
                  "type": "string",
                  "description": "The ID of the API key."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_organization_projects__project_id__api_keys__key_id_/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "organization.project.api_key.deleted"
                ]
              },
              "id": {
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "id",
              "deleted"
            ]
          },
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_organization_projects__project_id__api_keys__key_id_/output-400.schema.json",
            "type": "object",
            "properties": {
              "error": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "message": {
                    "type": "string"
                  },
                  "param": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "message",
                  "param",
                  "code"
                ]
              }
            },
            "required": [
              "error"
            ]
          }
        ]
      }
    },
    {
      "id": "post_organization_projects__project_id__archive",
      "operationId": "archive-project",
      "name": "Archive Project",
      "description": "Archives a project in the organization. Archived projects cannot be used or updated.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id__archive/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}/archive"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id__archive/output-200.schema.json",
            "type": "object",
            "description": "Represents an individual project.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier, which can be referenced in API endpoints"
              },
              "object": {
                "type": "string",
                "enum": [
                  "organization.project"
                ],
                "description": "The object type, which is always `organization.project`"
              },
              "name": {
                "type": "string",
                "description": "The name of the project. This appears in reporting."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the project was created."
              },
              "archived_at": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The Unix timestamp (in seconds) of when the project was archived or `null`."
              },
              "status": {
                "type": "string",
                "enum": [
                  "active",
                  "archived"
                ],
                "description": "`active` or `archived`"
              }
            },
            "required": [
              "id",
              "object",
              "name",
              "created_at",
              "status"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_projects__project_id__rate_limits",
      "operationId": "list-project-rate-limits",
      "name": "List Project Rate Limits",
      "description": "Returns the rate limits per model for a project.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__rate_limits/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}/rate_limits"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "limit": {
                  "type": "integer",
                  "default": 100,
                  "description": "A limit on the number of objects to be returned. The default is 100.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                },
                "before": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__rate_limits/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Represents a project rate limit config.",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "project.rate_limit"
                      ],
                      "description": "The object type, which is always `project.rate_limit`"
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier, which can be referenced in API endpoints."
                    },
                    "model": {
                      "type": "string",
                      "description": "The model this rate limit applies to."
                    },
                    "max_requests_per_1_minute": {
                      "type": "integer",
                      "description": "The maximum requests per minute."
                    },
                    "max_tokens_per_1_minute": {
                      "type": "integer",
                      "description": "The maximum tokens per minute."
                    },
                    "max_images_per_1_minute": {
                      "type": "integer",
                      "description": "The maximum images per minute. Only present for relevant models."
                    },
                    "max_audio_megabytes_per_1_minute": {
                      "type": "integer",
                      "description": "The maximum audio megabytes per minute. Only present for relevant models."
                    },
                    "max_requests_per_1_day": {
                      "type": "integer",
                      "description": "The maximum requests per day. Only present for relevant models."
                    },
                    "batch_1_day_max_input_tokens": {
                      "type": "integer",
                      "description": "The maximum batch input tokens per day. Only present for relevant models."
                    }
                  },
                  "required": [
                    "object",
                    "id",
                    "model",
                    "max_requests_per_1_minute",
                    "max_tokens_per_1_minute"
                  ]
                }
              },
              "first_id": {
                "type": "string"
              },
              "last_id": {
                "type": "string"
              },
              "has_more": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "post_organization_projects__project_id__rate_limits__rate_limit_id_",
      "operationId": "update-project-rate-limits",
      "name": "Update Project Rate Limits",
      "description": "Updates a project rate limit.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id__rate_limits__rate_limit_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}/rate_limits/{rate_limit_id}"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id",
                "rate_limit_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                },
                "rate_limit_id": {
                  "type": "string",
                  "description": "The ID of the rate limit."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "The project rate limit update request payload.",
              "properties": {
                "type": "object",
                "properties": {
                  "max_requests_per_1_minute": {
                    "type": "integer",
                    "description": "The maximum requests per minute."
                  },
                  "max_tokens_per_1_minute": {
                    "type": "integer",
                    "description": "The maximum tokens per minute."
                  },
                  "max_images_per_1_minute": {
                    "type": "integer",
                    "description": "The maximum images per minute. Only relevant for certain models."
                  },
                  "max_audio_megabytes_per_1_minute": {
                    "type": "integer",
                    "description": "The maximum audio megabytes per minute. Only relevant for certain models."
                  },
                  "max_requests_per_1_day": {
                    "type": "integer",
                    "description": "The maximum requests per day. Only relevant for certain models."
                  },
                  "batch_1_day_max_input_tokens": {
                    "type": "integer",
                    "description": "The maximum batch input tokens per day. Only relevant for certain models."
                  }
                }
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id__rate_limits__rate_limit_id_/output-200.schema.json",
            "type": "object",
            "description": "Represents a project rate limit config.",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "project.rate_limit"
                ],
                "description": "The object type, which is always `project.rate_limit`"
              },
              "id": {
                "type": "string",
                "description": "The identifier, which can be referenced in API endpoints."
              },
              "model": {
                "type": "string",
                "description": "The model this rate limit applies to."
              },
              "max_requests_per_1_minute": {
                "type": "integer",
                "description": "The maximum requests per minute."
              },
              "max_tokens_per_1_minute": {
                "type": "integer",
                "description": "The maximum tokens per minute."
              },
              "max_images_per_1_minute": {
                "type": "integer",
                "description": "The maximum images per minute. Only present for relevant models."
              },
              "max_audio_megabytes_per_1_minute": {
                "type": "integer",
                "description": "The maximum audio megabytes per minute. Only present for relevant models."
              },
              "max_requests_per_1_day": {
                "type": "integer",
                "description": "The maximum requests per day. Only present for relevant models."
              },
              "batch_1_day_max_input_tokens": {
                "type": "integer",
                "description": "The maximum batch input tokens per day. Only present for relevant models."
              }
            },
            "required": [
              "object",
              "id",
              "model",
              "max_requests_per_1_minute",
              "max_tokens_per_1_minute"
            ]
          },
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id__rate_limits__rate_limit_id_/output-400.schema.json",
            "type": "object",
            "properties": {
              "error": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "message": {
                    "type": "string"
                  },
                  "param": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "message",
                  "param",
                  "code"
                ]
              }
            },
            "required": [
              "error"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_projects__project_id__service_accounts",
      "operationId": "list-project-service-accounts",
      "name": "List Project Service Accounts",
      "description": "Returns a list of service accounts in the project.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__service_accounts/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}/service_accounts"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__service_accounts/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Represents an individual service account in a project.",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "organization.project.service_account"
                      ],
                      "description": "The object type, which is always `organization.project.service_account`"
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier, which can be referenced in API endpoints"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the service account"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "owner",
                        "member"
                      ],
                      "description": "`owner` or `member`"
                    },
                    "created_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) of when the service account was created"
                    }
                  },
                  "required": [
                    "object",
                    "id",
                    "name",
                    "role",
                    "created_at"
                  ]
                }
              },
              "first_id": {
                "type": "string"
              },
              "last_id": {
                "type": "string"
              },
              "has_more": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          },
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__service_accounts/output-400.schema.json",
            "type": "object",
            "properties": {
              "error": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "message": {
                    "type": "string"
                  },
                  "param": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "message",
                  "param",
                  "code"
                ]
              }
            },
            "required": [
              "error"
            ]
          }
        ]
      }
    },
    {
      "id": "post_organization_projects__project_id__service_accounts",
      "operationId": "create-project-service-account",
      "name": "Create Project Service Account",
      "description": "Creates a new service account in the project. This also returns an unredacted API key for the service account.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id__service_accounts/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}/service_accounts"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "The project service account create request payload.",
              "properties": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the service account being created."
                  }
                },
                "required": [
                  "name"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id__service_accounts/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "organization.project.service_account"
                ]
              },
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "role": {
                "type": "string",
                "enum": [
                  "member"
                ],
                "description": "Service accounts can only have one role of type `member`"
              },
              "created_at": {
                "type": "integer"
              },
              "api_key": {
                "type": "object",
                "properties": {
                  "object": {
                    "type": "string",
                    "enum": [
                      "organization.project.service_account.api_key"
                    ],
                    "description": "The object type, which is always `organization.project.service_account.api_key`"
                  },
                  "value": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "created_at": {
                    "type": "integer"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object",
                  "value",
                  "name",
                  "created_at",
                  "id"
                ]
              }
            },
            "required": [
              "object",
              "id",
              "name",
              "role",
              "created_at",
              "api_key"
            ]
          },
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id__service_accounts/output-400.schema.json",
            "type": "object",
            "properties": {
              "error": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "message": {
                    "type": "string"
                  },
                  "param": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "message",
                  "param",
                  "code"
                ]
              }
            },
            "required": [
              "error"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_projects__project_id__service_accounts__service_account_id_",
      "operationId": "retrieve-project-service-account",
      "name": "Retrieve Project Service Account",
      "description": "Retrieves a service account in the project.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__service_accounts__service_account_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}/service_accounts/{service_account_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id",
                "service_account_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                },
                "service_account_id": {
                  "type": "string",
                  "description": "The ID of the service account."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__service_accounts__service_account_id_/output-200.schema.json",
            "type": "object",
            "description": "Represents an individual service account in a project.",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "organization.project.service_account"
                ],
                "description": "The object type, which is always `organization.project.service_account`"
              },
              "id": {
                "type": "string",
                "description": "The identifier, which can be referenced in API endpoints"
              },
              "name": {
                "type": "string",
                "description": "The name of the service account"
              },
              "role": {
                "type": "string",
                "enum": [
                  "owner",
                  "member"
                ],
                "description": "`owner` or `member`"
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the service account was created"
              }
            },
            "required": [
              "object",
              "id",
              "name",
              "role",
              "created_at"
            ]
          }
        ]
      }
    },
    {
      "id": "delete_organization_projects__project_id__service_accounts__service_account_id_",
      "operationId": "delete-project-service-account",
      "name": "Delete Project Service Account",
      "description": "Deletes a service account from the project.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_organization_projects__project_id__service_accounts__service_account_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}/service_accounts/{service_account_id}"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id",
                "service_account_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                },
                "service_account_id": {
                  "type": "string",
                  "description": "The ID of the service account."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_organization_projects__project_id__service_accounts__service_account_id_/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "organization.project.service_account.deleted"
                ]
              },
              "id": {
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "id",
              "deleted"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_projects__project_id__users",
      "operationId": "list-project-users",
      "name": "List Project Users",
      "description": "Returns a list of users in the project.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__users/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}/users"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__users/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Represents an individual user in a project.",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "organization.project.user"
                      ],
                      "description": "The object type, which is always `organization.project.user`"
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier, which can be referenced in API endpoints"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the user"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email address of the user"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "owner",
                        "member"
                      ],
                      "description": "`owner` or `member`"
                    },
                    "added_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) of when the project was added."
                    }
                  },
                  "required": [
                    "object",
                    "id",
                    "name",
                    "email",
                    "role",
                    "added_at"
                  ]
                }
              },
              "first_id": {
                "type": "string"
              },
              "last_id": {
                "type": "string"
              },
              "has_more": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          },
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__users/output-400.schema.json",
            "type": "object",
            "properties": {
              "error": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "message": {
                    "type": "string"
                  },
                  "param": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "message",
                  "param",
                  "code"
                ]
              }
            },
            "required": [
              "error"
            ]
          }
        ]
      }
    },
    {
      "id": "post_organization_projects__project_id__users",
      "operationId": "create-project-user",
      "name": "Create Project User",
      "description": "Adds a user to the project. Users must already be members of the organization to be added to a project.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id__users/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}/users"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "The project user create request payload.",
              "properties": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "string",
                    "description": "The ID of the user."
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "owner",
                      "member"
                    ],
                    "description": "`owner` or `member`"
                  }
                },
                "required": [
                  "user_id",
                  "role"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id__users/output-200.schema.json",
            "type": "object",
            "description": "Represents an individual user in a project.",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "organization.project.user"
                ],
                "description": "The object type, which is always `organization.project.user`"
              },
              "id": {
                "type": "string",
                "description": "The identifier, which can be referenced in API endpoints"
              },
              "name": {
                "type": "string",
                "description": "The name of the user"
              },
              "email": {
                "type": "string",
                "description": "The email address of the user"
              },
              "role": {
                "type": "string",
                "enum": [
                  "owner",
                  "member"
                ],
                "description": "`owner` or `member`"
              },
              "added_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the project was added."
              }
            },
            "required": [
              "object",
              "id",
              "name",
              "email",
              "role",
              "added_at"
            ]
          },
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id__users/output-400.schema.json",
            "type": "object",
            "properties": {
              "error": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "message": {
                    "type": "string"
                  },
                  "param": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "message",
                  "param",
                  "code"
                ]
              }
            },
            "required": [
              "error"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_projects__project_id__users__user_id_",
      "operationId": "retrieve-project-user",
      "name": "Retrieve Project User",
      "description": "Retrieves a user in the project.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__users__user_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}/users/{user_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id",
                "user_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                },
                "user_id": {
                  "type": "string",
                  "description": "The ID of the user."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_projects__project_id__users__user_id_/output-200.schema.json",
            "type": "object",
            "description": "Represents an individual user in a project.",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "organization.project.user"
                ],
                "description": "The object type, which is always `organization.project.user`"
              },
              "id": {
                "type": "string",
                "description": "The identifier, which can be referenced in API endpoints"
              },
              "name": {
                "type": "string",
                "description": "The name of the user"
              },
              "email": {
                "type": "string",
                "description": "The email address of the user"
              },
              "role": {
                "type": "string",
                "enum": [
                  "owner",
                  "member"
                ],
                "description": "`owner` or `member`"
              },
              "added_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the project was added."
              }
            },
            "required": [
              "object",
              "id",
              "name",
              "email",
              "role",
              "added_at"
            ]
          }
        ]
      }
    },
    {
      "id": "post_organization_projects__project_id__users__user_id_",
      "operationId": "modify-project-user",
      "name": "Modify Project User",
      "description": "Modifies a user's role in the project.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id__users__user_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}/users/{user_id}"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id",
                "user_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                },
                "user_id": {
                  "type": "string",
                  "description": "The ID of the user."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "The project user update request payload.",
              "properties": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "owner",
                      "member"
                    ],
                    "description": "`owner` or `member`"
                  }
                },
                "required": [
                  "role"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id__users__user_id_/output-200.schema.json",
            "type": "object",
            "description": "Represents an individual user in a project.",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "organization.project.user"
                ],
                "description": "The object type, which is always `organization.project.user`"
              },
              "id": {
                "type": "string",
                "description": "The identifier, which can be referenced in API endpoints"
              },
              "name": {
                "type": "string",
                "description": "The name of the user"
              },
              "email": {
                "type": "string",
                "description": "The email address of the user"
              },
              "role": {
                "type": "string",
                "enum": [
                  "owner",
                  "member"
                ],
                "description": "`owner` or `member`"
              },
              "added_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the project was added."
              }
            },
            "required": [
              "object",
              "id",
              "name",
              "email",
              "role",
              "added_at"
            ]
          },
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_organization_projects__project_id__users__user_id_/output-400.schema.json",
            "type": "object",
            "properties": {
              "error": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "message": {
                    "type": "string"
                  },
                  "param": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "message",
                  "param",
                  "code"
                ]
              }
            },
            "required": [
              "error"
            ]
          }
        ]
      }
    },
    {
      "id": "delete_organization_projects__project_id__users__user_id_",
      "operationId": "delete-project-user",
      "name": "Delete Project User",
      "description": "Deletes a user from the project.",
      "schema": {
        "tags": [
          "Projects"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_organization_projects__project_id__users__user_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/projects/{project_id}/users/{user_id}"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "project_id",
                "user_id"
              ],
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project."
                },
                "user_id": {
                  "type": "string",
                  "description": "The ID of the user."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_organization_projects__project_id__users__user_id_/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "organization.project.user.deleted"
                ]
              },
              "id": {
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "id",
              "deleted"
            ]
          },
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_organization_projects__project_id__users__user_id_/output-400.schema.json",
            "type": "object",
            "properties": {
              "error": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "message": {
                    "type": "string"
                  },
                  "param": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "message",
                  "param",
                  "code"
                ]
              }
            },
            "required": [
              "error"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_usage_audio_speeches",
      "operationId": "usage-audio-speeches",
      "name": "Usage Audio Speeches",
      "description": "Get audio speeches usage details for the organization.",
      "schema": {
        "tags": [
          "Usage"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_audio_speeches/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/usage/audio_speeches"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "required": [
                "start_time"
              ],
              "properties": {
                "start_time": {
                  "type": "integer",
                  "description": "Start time (Unix seconds) of the query time range, inclusive."
                },
                "end_time": {
                  "type": "integer",
                  "description": "End time (Unix seconds) of the query time range, exclusive."
                },
                "bucket_width": {
                  "type": "string",
                  "enum": [
                    "1m",
                    "1h",
                    "1d"
                  ],
                  "default": "1d",
                  "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`."
                },
                "project_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these projects."
                },
                "user_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these users."
                },
                "api_key_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these API keys."
                },
                "models": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these models."
                },
                "group_by": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "project_id",
                      "user_id",
                      "api_key_id",
                      "model"
                    ]
                  },
                  "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them."
                },
                "limit": {
                  "type": "integer",
                  "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
                },
                "page": {
                  "type": "string",
                  "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_audio_speeches/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "page"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "bucket"
                      ]
                    },
                    "start_time": {
                      "type": "integer"
                    },
                    "end_time": {
                      "type": "integer"
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "The aggregated completions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.completions.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_cached_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "output_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio input tokens used, including cached tokens."
                              },
                              "output_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio output tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              },
                              "batch": {
                                "type": [
                                  "boolean",
                                  "null"
                                ],
                                "description": "When `group_by=batch`, this field tells whether the grouped usage result is batch or not."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "output_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated embeddings usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.embeddings.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated moderations usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.moderations.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated images usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.images.result"
                                ]
                              },
                              "images": {
                                "type": "integer",
                                "description": "The number of images processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "source": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`."
                              },
                              "size": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=size`, this field provides the image size of the grouped usage result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "images",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio speeches usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_speeches.result"
                                ]
                              },
                              "characters": {
                                "type": "integer",
                                "description": "The number of characters processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "characters",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio transcriptions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_transcriptions.result"
                                ]
                              },
                              "seconds": {
                                "type": "integer",
                                "description": "The number of seconds processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "seconds",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated vector stores usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.vector_stores.result"
                                ]
                              },
                              "usage_bytes": {
                                "type": "integer",
                                "description": "The vector stores usage in bytes."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "usage_bytes"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated code interpreter sessions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.code_interpreter_sessions.result"
                                ]
                              },
                              "num_sessions": {
                                "type": "integer",
                                "description": "The number of code interpreter sessions."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "sessions"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated costs details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.costs.result"
                                ]
                              },
                              "amount": {
                                "type": "object",
                                "description": "The monetary value in its associated currency.",
                                "properties": {
                                  "value": {
                                    "type": "number",
                                    "description": "The numeric value of the cost."
                                  },
                                  "currency": {
                                    "type": "string",
                                    "description": "Lowercase ISO-4217 currency e.g. \"usd\""
                                  }
                                }
                              },
                              "line_item": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=line_item`, this field provides the line item of the grouped costs result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped costs result."
                              }
                            },
                            "required": [
                              "object"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "object",
                    "start_time",
                    "end_time",
                    "result"
                  ]
                }
              },
              "has_more": {
                "type": "boolean"
              },
              "next_page": {
                "type": "string"
              }
            },
            "required": [
              "object",
              "data",
              "has_more",
              "next_page"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_usage_audio_transcriptions",
      "operationId": "usage-audio-transcriptions",
      "name": "Usage Audio Transcriptions",
      "description": "Get audio transcriptions usage details for the organization.",
      "schema": {
        "tags": [
          "Usage"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_audio_transcriptions/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/usage/audio_transcriptions"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "required": [
                "start_time"
              ],
              "properties": {
                "start_time": {
                  "type": "integer",
                  "description": "Start time (Unix seconds) of the query time range, inclusive."
                },
                "end_time": {
                  "type": "integer",
                  "description": "End time (Unix seconds) of the query time range, exclusive."
                },
                "bucket_width": {
                  "type": "string",
                  "enum": [
                    "1m",
                    "1h",
                    "1d"
                  ],
                  "default": "1d",
                  "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`."
                },
                "project_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these projects."
                },
                "user_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these users."
                },
                "api_key_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these API keys."
                },
                "models": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these models."
                },
                "group_by": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "project_id",
                      "user_id",
                      "api_key_id",
                      "model"
                    ]
                  },
                  "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them."
                },
                "limit": {
                  "type": "integer",
                  "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
                },
                "page": {
                  "type": "string",
                  "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_audio_transcriptions/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "page"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "bucket"
                      ]
                    },
                    "start_time": {
                      "type": "integer"
                    },
                    "end_time": {
                      "type": "integer"
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "The aggregated completions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.completions.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_cached_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "output_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio input tokens used, including cached tokens."
                              },
                              "output_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio output tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              },
                              "batch": {
                                "type": [
                                  "boolean",
                                  "null"
                                ],
                                "description": "When `group_by=batch`, this field tells whether the grouped usage result is batch or not."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "output_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated embeddings usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.embeddings.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated moderations usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.moderations.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated images usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.images.result"
                                ]
                              },
                              "images": {
                                "type": "integer",
                                "description": "The number of images processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "source": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`."
                              },
                              "size": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=size`, this field provides the image size of the grouped usage result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "images",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio speeches usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_speeches.result"
                                ]
                              },
                              "characters": {
                                "type": "integer",
                                "description": "The number of characters processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "characters",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio transcriptions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_transcriptions.result"
                                ]
                              },
                              "seconds": {
                                "type": "integer",
                                "description": "The number of seconds processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "seconds",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated vector stores usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.vector_stores.result"
                                ]
                              },
                              "usage_bytes": {
                                "type": "integer",
                                "description": "The vector stores usage in bytes."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "usage_bytes"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated code interpreter sessions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.code_interpreter_sessions.result"
                                ]
                              },
                              "num_sessions": {
                                "type": "integer",
                                "description": "The number of code interpreter sessions."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "sessions"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated costs details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.costs.result"
                                ]
                              },
                              "amount": {
                                "type": "object",
                                "description": "The monetary value in its associated currency.",
                                "properties": {
                                  "value": {
                                    "type": "number",
                                    "description": "The numeric value of the cost."
                                  },
                                  "currency": {
                                    "type": "string",
                                    "description": "Lowercase ISO-4217 currency e.g. \"usd\""
                                  }
                                }
                              },
                              "line_item": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=line_item`, this field provides the line item of the grouped costs result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped costs result."
                              }
                            },
                            "required": [
                              "object"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "object",
                    "start_time",
                    "end_time",
                    "result"
                  ]
                }
              },
              "has_more": {
                "type": "boolean"
              },
              "next_page": {
                "type": "string"
              }
            },
            "required": [
              "object",
              "data",
              "has_more",
              "next_page"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_usage_code_interpreter_sessions",
      "operationId": "usage-code-interpreter-sessions",
      "name": "Usage Code Interpreter Sessions",
      "description": "Get code interpreter sessions usage details for the organization.",
      "schema": {
        "tags": [
          "Usage"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_code_interpreter_sessions/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/usage/code_interpreter_sessions"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "required": [
                "start_time"
              ],
              "properties": {
                "start_time": {
                  "type": "integer",
                  "description": "Start time (Unix seconds) of the query time range, inclusive."
                },
                "end_time": {
                  "type": "integer",
                  "description": "End time (Unix seconds) of the query time range, exclusive."
                },
                "bucket_width": {
                  "type": "string",
                  "enum": [
                    "1m",
                    "1h",
                    "1d"
                  ],
                  "default": "1d",
                  "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`."
                },
                "project_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these projects."
                },
                "group_by": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "project_id"
                    ]
                  },
                  "description": "Group the usage data by the specified fields. Support fields include `project_id`."
                },
                "limit": {
                  "type": "integer",
                  "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
                },
                "page": {
                  "type": "string",
                  "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_code_interpreter_sessions/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "page"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "bucket"
                      ]
                    },
                    "start_time": {
                      "type": "integer"
                    },
                    "end_time": {
                      "type": "integer"
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "The aggregated completions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.completions.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_cached_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "output_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio input tokens used, including cached tokens."
                              },
                              "output_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio output tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              },
                              "batch": {
                                "type": [
                                  "boolean",
                                  "null"
                                ],
                                "description": "When `group_by=batch`, this field tells whether the grouped usage result is batch or not."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "output_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated embeddings usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.embeddings.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated moderations usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.moderations.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated images usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.images.result"
                                ]
                              },
                              "images": {
                                "type": "integer",
                                "description": "The number of images processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "source": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`."
                              },
                              "size": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=size`, this field provides the image size of the grouped usage result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "images",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio speeches usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_speeches.result"
                                ]
                              },
                              "characters": {
                                "type": "integer",
                                "description": "The number of characters processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "characters",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio transcriptions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_transcriptions.result"
                                ]
                              },
                              "seconds": {
                                "type": "integer",
                                "description": "The number of seconds processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "seconds",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated vector stores usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.vector_stores.result"
                                ]
                              },
                              "usage_bytes": {
                                "type": "integer",
                                "description": "The vector stores usage in bytes."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "usage_bytes"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated code interpreter sessions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.code_interpreter_sessions.result"
                                ]
                              },
                              "num_sessions": {
                                "type": "integer",
                                "description": "The number of code interpreter sessions."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "sessions"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated costs details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.costs.result"
                                ]
                              },
                              "amount": {
                                "type": "object",
                                "description": "The monetary value in its associated currency.",
                                "properties": {
                                  "value": {
                                    "type": "number",
                                    "description": "The numeric value of the cost."
                                  },
                                  "currency": {
                                    "type": "string",
                                    "description": "Lowercase ISO-4217 currency e.g. \"usd\""
                                  }
                                }
                              },
                              "line_item": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=line_item`, this field provides the line item of the grouped costs result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped costs result."
                              }
                            },
                            "required": [
                              "object"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "object",
                    "start_time",
                    "end_time",
                    "result"
                  ]
                }
              },
              "has_more": {
                "type": "boolean"
              },
              "next_page": {
                "type": "string"
              }
            },
            "required": [
              "object",
              "data",
              "has_more",
              "next_page"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_usage_completions",
      "operationId": "usage-completions",
      "name": "Usage Completions",
      "description": "Get completions usage details for the organization.",
      "schema": {
        "tags": [
          "Usage"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_completions/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/usage/completions"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "required": [
                "start_time"
              ],
              "properties": {
                "start_time": {
                  "type": "integer",
                  "description": "Start time (Unix seconds) of the query time range, inclusive."
                },
                "end_time": {
                  "type": "integer",
                  "description": "End time (Unix seconds) of the query time range, exclusive."
                },
                "bucket_width": {
                  "type": "string",
                  "enum": [
                    "1m",
                    "1h",
                    "1d"
                  ],
                  "default": "1d",
                  "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`."
                },
                "project_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these projects."
                },
                "user_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these users."
                },
                "api_key_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these API keys."
                },
                "models": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these models."
                },
                "batch": {
                  "type": "boolean",
                  "description": "If `true`, return batch jobs only. If `false`, return non-batch jobs only. By default, return both.\n"
                },
                "group_by": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "project_id",
                      "user_id",
                      "api_key_id",
                      "model",
                      "batch"
                    ]
                  },
                  "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `batch` or any combination of them."
                },
                "limit": {
                  "type": "integer",
                  "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
                },
                "page": {
                  "type": "string",
                  "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_completions/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "page"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "bucket"
                      ]
                    },
                    "start_time": {
                      "type": "integer"
                    },
                    "end_time": {
                      "type": "integer"
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "The aggregated completions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.completions.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_cached_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "output_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio input tokens used, including cached tokens."
                              },
                              "output_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio output tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              },
                              "batch": {
                                "type": [
                                  "boolean",
                                  "null"
                                ],
                                "description": "When `group_by=batch`, this field tells whether the grouped usage result is batch or not."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "output_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated embeddings usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.embeddings.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated moderations usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.moderations.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated images usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.images.result"
                                ]
                              },
                              "images": {
                                "type": "integer",
                                "description": "The number of images processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "source": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`."
                              },
                              "size": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=size`, this field provides the image size of the grouped usage result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "images",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio speeches usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_speeches.result"
                                ]
                              },
                              "characters": {
                                "type": "integer",
                                "description": "The number of characters processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "characters",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio transcriptions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_transcriptions.result"
                                ]
                              },
                              "seconds": {
                                "type": "integer",
                                "description": "The number of seconds processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "seconds",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated vector stores usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.vector_stores.result"
                                ]
                              },
                              "usage_bytes": {
                                "type": "integer",
                                "description": "The vector stores usage in bytes."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "usage_bytes"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated code interpreter sessions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.code_interpreter_sessions.result"
                                ]
                              },
                              "num_sessions": {
                                "type": "integer",
                                "description": "The number of code interpreter sessions."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "sessions"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated costs details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.costs.result"
                                ]
                              },
                              "amount": {
                                "type": "object",
                                "description": "The monetary value in its associated currency.",
                                "properties": {
                                  "value": {
                                    "type": "number",
                                    "description": "The numeric value of the cost."
                                  },
                                  "currency": {
                                    "type": "string",
                                    "description": "Lowercase ISO-4217 currency e.g. \"usd\""
                                  }
                                }
                              },
                              "line_item": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=line_item`, this field provides the line item of the grouped costs result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped costs result."
                              }
                            },
                            "required": [
                              "object"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "object",
                    "start_time",
                    "end_time",
                    "result"
                  ]
                }
              },
              "has_more": {
                "type": "boolean"
              },
              "next_page": {
                "type": "string"
              }
            },
            "required": [
              "object",
              "data",
              "has_more",
              "next_page"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_usage_embeddings",
      "operationId": "usage-embeddings",
      "name": "Usage Embeddings",
      "description": "Get embeddings usage details for the organization.",
      "schema": {
        "tags": [
          "Usage"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_embeddings/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/usage/embeddings"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "required": [
                "start_time"
              ],
              "properties": {
                "start_time": {
                  "type": "integer",
                  "description": "Start time (Unix seconds) of the query time range, inclusive."
                },
                "end_time": {
                  "type": "integer",
                  "description": "End time (Unix seconds) of the query time range, exclusive."
                },
                "bucket_width": {
                  "type": "string",
                  "enum": [
                    "1m",
                    "1h",
                    "1d"
                  ],
                  "default": "1d",
                  "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`."
                },
                "project_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these projects."
                },
                "user_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these users."
                },
                "api_key_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these API keys."
                },
                "models": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these models."
                },
                "group_by": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "project_id",
                      "user_id",
                      "api_key_id",
                      "model"
                    ]
                  },
                  "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them."
                },
                "limit": {
                  "type": "integer",
                  "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
                },
                "page": {
                  "type": "string",
                  "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_embeddings/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "page"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "bucket"
                      ]
                    },
                    "start_time": {
                      "type": "integer"
                    },
                    "end_time": {
                      "type": "integer"
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "The aggregated completions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.completions.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_cached_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "output_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio input tokens used, including cached tokens."
                              },
                              "output_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio output tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              },
                              "batch": {
                                "type": [
                                  "boolean",
                                  "null"
                                ],
                                "description": "When `group_by=batch`, this field tells whether the grouped usage result is batch or not."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "output_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated embeddings usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.embeddings.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated moderations usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.moderations.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated images usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.images.result"
                                ]
                              },
                              "images": {
                                "type": "integer",
                                "description": "The number of images processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "source": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`."
                              },
                              "size": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=size`, this field provides the image size of the grouped usage result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "images",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio speeches usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_speeches.result"
                                ]
                              },
                              "characters": {
                                "type": "integer",
                                "description": "The number of characters processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "characters",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio transcriptions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_transcriptions.result"
                                ]
                              },
                              "seconds": {
                                "type": "integer",
                                "description": "The number of seconds processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "seconds",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated vector stores usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.vector_stores.result"
                                ]
                              },
                              "usage_bytes": {
                                "type": "integer",
                                "description": "The vector stores usage in bytes."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "usage_bytes"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated code interpreter sessions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.code_interpreter_sessions.result"
                                ]
                              },
                              "num_sessions": {
                                "type": "integer",
                                "description": "The number of code interpreter sessions."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "sessions"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated costs details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.costs.result"
                                ]
                              },
                              "amount": {
                                "type": "object",
                                "description": "The monetary value in its associated currency.",
                                "properties": {
                                  "value": {
                                    "type": "number",
                                    "description": "The numeric value of the cost."
                                  },
                                  "currency": {
                                    "type": "string",
                                    "description": "Lowercase ISO-4217 currency e.g. \"usd\""
                                  }
                                }
                              },
                              "line_item": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=line_item`, this field provides the line item of the grouped costs result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped costs result."
                              }
                            },
                            "required": [
                              "object"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "object",
                    "start_time",
                    "end_time",
                    "result"
                  ]
                }
              },
              "has_more": {
                "type": "boolean"
              },
              "next_page": {
                "type": "string"
              }
            },
            "required": [
              "object",
              "data",
              "has_more",
              "next_page"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_usage_images",
      "operationId": "usage-images",
      "name": "Usage Images",
      "description": "Get images usage details for the organization.",
      "schema": {
        "tags": [
          "Usage"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_images/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/usage/images"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "required": [
                "start_time"
              ],
              "properties": {
                "start_time": {
                  "type": "integer",
                  "description": "Start time (Unix seconds) of the query time range, inclusive."
                },
                "end_time": {
                  "type": "integer",
                  "description": "End time (Unix seconds) of the query time range, exclusive."
                },
                "bucket_width": {
                  "type": "string",
                  "enum": [
                    "1m",
                    "1h",
                    "1d"
                  ],
                  "default": "1d",
                  "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`."
                },
                "sources": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "image.generation",
                      "image.edit",
                      "image.variation"
                    ]
                  },
                  "description": "Return only usages for these sources. Possible values are `image.generation`, `image.edit`, `image.variation` or any combination of them."
                },
                "sizes": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "256x256",
                      "512x512",
                      "1024x1024",
                      "1792x1792",
                      "1024x1792"
                    ]
                  },
                  "description": "Return only usages for these image sizes. Possible values are `256x256`, `512x512`, `1024x1024`, `1792x1792`, `1024x1792` or any combination of them."
                },
                "project_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these projects."
                },
                "user_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these users."
                },
                "api_key_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these API keys."
                },
                "models": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these models."
                },
                "group_by": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "project_id",
                      "user_id",
                      "api_key_id",
                      "model",
                      "size",
                      "source"
                    ]
                  },
                  "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `size`, `source` or any combination of them."
                },
                "limit": {
                  "type": "integer",
                  "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
                },
                "page": {
                  "type": "string",
                  "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_images/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "page"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "bucket"
                      ]
                    },
                    "start_time": {
                      "type": "integer"
                    },
                    "end_time": {
                      "type": "integer"
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "The aggregated completions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.completions.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_cached_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "output_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio input tokens used, including cached tokens."
                              },
                              "output_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio output tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              },
                              "batch": {
                                "type": [
                                  "boolean",
                                  "null"
                                ],
                                "description": "When `group_by=batch`, this field tells whether the grouped usage result is batch or not."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "output_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated embeddings usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.embeddings.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated moderations usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.moderations.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated images usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.images.result"
                                ]
                              },
                              "images": {
                                "type": "integer",
                                "description": "The number of images processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "source": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`."
                              },
                              "size": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=size`, this field provides the image size of the grouped usage result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "images",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio speeches usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_speeches.result"
                                ]
                              },
                              "characters": {
                                "type": "integer",
                                "description": "The number of characters processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "characters",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio transcriptions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_transcriptions.result"
                                ]
                              },
                              "seconds": {
                                "type": "integer",
                                "description": "The number of seconds processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "seconds",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated vector stores usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.vector_stores.result"
                                ]
                              },
                              "usage_bytes": {
                                "type": "integer",
                                "description": "The vector stores usage in bytes."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "usage_bytes"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated code interpreter sessions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.code_interpreter_sessions.result"
                                ]
                              },
                              "num_sessions": {
                                "type": "integer",
                                "description": "The number of code interpreter sessions."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "sessions"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated costs details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.costs.result"
                                ]
                              },
                              "amount": {
                                "type": "object",
                                "description": "The monetary value in its associated currency.",
                                "properties": {
                                  "value": {
                                    "type": "number",
                                    "description": "The numeric value of the cost."
                                  },
                                  "currency": {
                                    "type": "string",
                                    "description": "Lowercase ISO-4217 currency e.g. \"usd\""
                                  }
                                }
                              },
                              "line_item": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=line_item`, this field provides the line item of the grouped costs result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped costs result."
                              }
                            },
                            "required": [
                              "object"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "object",
                    "start_time",
                    "end_time",
                    "result"
                  ]
                }
              },
              "has_more": {
                "type": "boolean"
              },
              "next_page": {
                "type": "string"
              }
            },
            "required": [
              "object",
              "data",
              "has_more",
              "next_page"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_usage_moderations",
      "operationId": "usage-moderations",
      "name": "Usage Moderations",
      "description": "Get moderations usage details for the organization.",
      "schema": {
        "tags": [
          "Usage"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_moderations/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/usage/moderations"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "required": [
                "start_time"
              ],
              "properties": {
                "start_time": {
                  "type": "integer",
                  "description": "Start time (Unix seconds) of the query time range, inclusive."
                },
                "end_time": {
                  "type": "integer",
                  "description": "End time (Unix seconds) of the query time range, exclusive."
                },
                "bucket_width": {
                  "type": "string",
                  "enum": [
                    "1m",
                    "1h",
                    "1d"
                  ],
                  "default": "1d",
                  "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`."
                },
                "project_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these projects."
                },
                "user_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these users."
                },
                "api_key_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these API keys."
                },
                "models": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these models."
                },
                "group_by": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "project_id",
                      "user_id",
                      "api_key_id",
                      "model"
                    ]
                  },
                  "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them."
                },
                "limit": {
                  "type": "integer",
                  "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
                },
                "page": {
                  "type": "string",
                  "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_moderations/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "page"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "bucket"
                      ]
                    },
                    "start_time": {
                      "type": "integer"
                    },
                    "end_time": {
                      "type": "integer"
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "The aggregated completions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.completions.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_cached_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "output_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio input tokens used, including cached tokens."
                              },
                              "output_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio output tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              },
                              "batch": {
                                "type": [
                                  "boolean",
                                  "null"
                                ],
                                "description": "When `group_by=batch`, this field tells whether the grouped usage result is batch or not."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "output_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated embeddings usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.embeddings.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated moderations usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.moderations.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated images usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.images.result"
                                ]
                              },
                              "images": {
                                "type": "integer",
                                "description": "The number of images processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "source": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`."
                              },
                              "size": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=size`, this field provides the image size of the grouped usage result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "images",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio speeches usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_speeches.result"
                                ]
                              },
                              "characters": {
                                "type": "integer",
                                "description": "The number of characters processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "characters",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio transcriptions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_transcriptions.result"
                                ]
                              },
                              "seconds": {
                                "type": "integer",
                                "description": "The number of seconds processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "seconds",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated vector stores usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.vector_stores.result"
                                ]
                              },
                              "usage_bytes": {
                                "type": "integer",
                                "description": "The vector stores usage in bytes."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "usage_bytes"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated code interpreter sessions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.code_interpreter_sessions.result"
                                ]
                              },
                              "num_sessions": {
                                "type": "integer",
                                "description": "The number of code interpreter sessions."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "sessions"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated costs details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.costs.result"
                                ]
                              },
                              "amount": {
                                "type": "object",
                                "description": "The monetary value in its associated currency.",
                                "properties": {
                                  "value": {
                                    "type": "number",
                                    "description": "The numeric value of the cost."
                                  },
                                  "currency": {
                                    "type": "string",
                                    "description": "Lowercase ISO-4217 currency e.g. \"usd\""
                                  }
                                }
                              },
                              "line_item": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=line_item`, this field provides the line item of the grouped costs result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped costs result."
                              }
                            },
                            "required": [
                              "object"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "object",
                    "start_time",
                    "end_time",
                    "result"
                  ]
                }
              },
              "has_more": {
                "type": "boolean"
              },
              "next_page": {
                "type": "string"
              }
            },
            "required": [
              "object",
              "data",
              "has_more",
              "next_page"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_usage_vector_stores",
      "operationId": "usage-vector-stores",
      "name": "Usage Vector Stores",
      "description": "Get vector stores usage details for the organization.",
      "schema": {
        "tags": [
          "Usage"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_vector_stores/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/usage/vector_stores"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "required": [
                "start_time"
              ],
              "properties": {
                "start_time": {
                  "type": "integer",
                  "description": "Start time (Unix seconds) of the query time range, inclusive."
                },
                "end_time": {
                  "type": "integer",
                  "description": "End time (Unix seconds) of the query time range, exclusive."
                },
                "bucket_width": {
                  "type": "string",
                  "enum": [
                    "1m",
                    "1h",
                    "1d"
                  ],
                  "default": "1d",
                  "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`."
                },
                "project_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Return only usage for these projects."
                },
                "group_by": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "project_id"
                    ]
                  },
                  "description": "Group the usage data by the specified fields. Support fields include `project_id`."
                },
                "limit": {
                  "type": "integer",
                  "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
                },
                "page": {
                  "type": "string",
                  "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_usage_vector_stores/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "page"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "bucket"
                      ]
                    },
                    "start_time": {
                      "type": "integer"
                    },
                    "end_time": {
                      "type": "integer"
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "The aggregated completions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.completions.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_cached_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "output_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens."
                              },
                              "input_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio input tokens used, including cached tokens."
                              },
                              "output_audio_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of audio output tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              },
                              "batch": {
                                "type": [
                                  "boolean",
                                  "null"
                                ],
                                "description": "When `group_by=batch`, this field tells whether the grouped usage result is batch or not."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "output_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated embeddings usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.embeddings.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated moderations usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.moderations.result"
                                ]
                              },
                              "input_tokens": {
                                "type": "integer",
                                "description": "The aggregated number of input tokens used."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "input_tokens",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated images usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.images.result"
                                ]
                              },
                              "images": {
                                "type": "integer",
                                "description": "The number of images processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "source": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`."
                              },
                              "size": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=size`, this field provides the image size of the grouped usage result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "images",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio speeches usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_speeches.result"
                                ]
                              },
                              "characters": {
                                "type": "integer",
                                "description": "The number of characters processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "characters",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated audio transcriptions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.audio_transcriptions.result"
                                ]
                              },
                              "seconds": {
                                "type": "integer",
                                "description": "The number of seconds processed."
                              },
                              "num_model_requests": {
                                "type": "integer",
                                "description": "The count of requests made to the model."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              },
                              "user_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
                              },
                              "api_key_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
                              },
                              "model": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "seconds",
                              "num_model_requests"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated vector stores usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.vector_stores.result"
                                ]
                              },
                              "usage_bytes": {
                                "type": "integer",
                                "description": "The vector stores usage in bytes."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "usage_bytes"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated code interpreter sessions usage details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.usage.code_interpreter_sessions.result"
                                ]
                              },
                              "num_sessions": {
                                "type": "integer",
                                "description": "The number of code interpreter sessions."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
                              }
                            },
                            "required": [
                              "object",
                              "sessions"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "The aggregated costs details of the specific time bucket.",
                            "properties": {
                              "object": {
                                "type": "string",
                                "enum": [
                                  "organization.costs.result"
                                ]
                              },
                              "amount": {
                                "type": "object",
                                "description": "The monetary value in its associated currency.",
                                "properties": {
                                  "value": {
                                    "type": "number",
                                    "description": "The numeric value of the cost."
                                  },
                                  "currency": {
                                    "type": "string",
                                    "description": "Lowercase ISO-4217 currency e.g. \"usd\""
                                  }
                                }
                              },
                              "line_item": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=line_item`, this field provides the line item of the grouped costs result."
                              },
                              "project_id": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "When `group_by=project_id`, this field provides the project ID of the grouped costs result."
                              }
                            },
                            "required": [
                              "object"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "object",
                    "start_time",
                    "end_time",
                    "result"
                  ]
                }
              },
              "has_more": {
                "type": "boolean"
              },
              "next_page": {
                "type": "string"
              }
            },
            "required": [
              "object",
              "data",
              "has_more",
              "next_page"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_users",
      "operationId": "list-users",
      "name": "List Users",
      "description": "Lists all of the users in the organization.",
      "schema": {
        "tags": [
          "Users"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_users/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/users"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                },
                "emails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Filter by the email address of users."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_users/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Represents an individual `user` within an organization.",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "organization.user"
                      ],
                      "description": "The object type, which is always `organization.user`"
                    },
                    "id": {
                      "type": "string",
                      "description": "The identifier, which can be referenced in API endpoints"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the user"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email address of the user"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "owner",
                        "reader"
                      ],
                      "description": "`owner` or `reader`"
                    },
                    "added_at": {
                      "type": "integer",
                      "description": "The Unix timestamp (in seconds) of when the user was added."
                    }
                  },
                  "required": [
                    "object",
                    "id",
                    "name",
                    "email",
                    "role",
                    "added_at"
                  ]
                }
              },
              "first_id": {
                "type": "string"
              },
              "last_id": {
                "type": "string"
              },
              "has_more": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "get_organization_users__user_id_",
      "operationId": "retrieve-user",
      "name": "Retrieve User",
      "description": "Retrieves a user by their identifier.",
      "schema": {
        "tags": [
          "Users"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_organization_users__user_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/users/{user_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "user_id"
              ],
              "properties": {
                "user_id": {
                  "type": "string",
                  "description": "The ID of the user."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_organization_users__user_id_/output-200.schema.json",
            "type": "object",
            "description": "Represents an individual `user` within an organization.",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "organization.user"
                ],
                "description": "The object type, which is always `organization.user`"
              },
              "id": {
                "type": "string",
                "description": "The identifier, which can be referenced in API endpoints"
              },
              "name": {
                "type": "string",
                "description": "The name of the user"
              },
              "email": {
                "type": "string",
                "description": "The email address of the user"
              },
              "role": {
                "type": "string",
                "enum": [
                  "owner",
                  "reader"
                ],
                "description": "`owner` or `reader`"
              },
              "added_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the user was added."
              }
            },
            "required": [
              "object",
              "id",
              "name",
              "email",
              "role",
              "added_at"
            ]
          }
        ]
      }
    },
    {
      "id": "post_organization_users__user_id_",
      "operationId": "modify-user",
      "name": "Modify User",
      "description": "Modifies a user's role in the organization.",
      "schema": {
        "tags": [
          "Users"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_organization_users__user_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/users/{user_id}"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "user_id"
              ],
              "properties": {
                "user_id": {
                  "type": "string",
                  "description": "The ID of the user."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "The new user role to modify. This must be one of `owner` or `member`.",
              "properties": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "owner",
                      "reader"
                    ],
                    "description": "`owner` or `reader`"
                  }
                },
                "required": [
                  "role"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_organization_users__user_id_/output-200.schema.json",
            "type": "object",
            "description": "Represents an individual `user` within an organization.",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "organization.user"
                ],
                "description": "The object type, which is always `organization.user`"
              },
              "id": {
                "type": "string",
                "description": "The identifier, which can be referenced in API endpoints"
              },
              "name": {
                "type": "string",
                "description": "The name of the user"
              },
              "email": {
                "type": "string",
                "description": "The email address of the user"
              },
              "role": {
                "type": "string",
                "enum": [
                  "owner",
                  "reader"
                ],
                "description": "`owner` or `reader`"
              },
              "added_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) of when the user was added."
              }
            },
            "required": [
              "object",
              "id",
              "name",
              "email",
              "role",
              "added_at"
            ]
          }
        ]
      }
    },
    {
      "id": "delete_organization_users__user_id_",
      "operationId": "delete-user",
      "name": "Delete User",
      "description": "Deletes a user from the organization.",
      "schema": {
        "tags": [
          "Users"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_organization_users__user_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/organization/users/{user_id}"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "user_id"
              ],
              "properties": {
                "user_id": {
                  "type": "string",
                  "description": "The ID of the user."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_organization_users__user_id_/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "organization.user.deleted"
                ]
              },
              "id": {
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              }
            },
            "required": [
              "object",
              "id",
              "deleted"
            ]
          }
        ]
      }
    },
    {
      "id": "post_realtime_sessions",
      "operationId": "create-realtime-session",
      "name": "Create Realtime Session",
      "description": "Create an ephemeral API token for use in client-side applications with the\nRealtime API. Can be configured with the same session parameters as the\n`session.update` client event.\n\nIt responds with a session object, plus a `client_secret` key which contains\na usable ephemeral API token that can be used to authenticate browser clients\nfor the Realtime API.\n",
      "schema": {
        "tags": [
          "Realtime"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_realtime_sessions/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/realtime/sessions"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "Create an ephemeral API key with the given session configuration.",
              "properties": {
                "type": "object",
                "description": "Realtime session object configuration.",
                "properties": {
                  "modalities": {
                    "description": "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n",
                    "items": {
                      "type": "string",
                      "default": [
                        "text",
                        "audio"
                      ],
                      "enum": [
                        "text",
                        "audio"
                      ]
                    }
                  },
                  "model": {
                    "type": "string",
                    "description": "The Realtime model used for this session.\n",
                    "enum": [
                      "gpt-4o-realtime-preview",
                      "gpt-4o-realtime-preview-2024-10-01",
                      "gpt-4o-realtime-preview-2024-12-17",
                      "gpt-4o-mini-realtime-preview",
                      "gpt-4o-mini-realtime-preview-2024-12-17"
                    ]
                  },
                  "instructions": {
                    "type": "string",
                    "description": "The default system instructions (i.e. system message) prepended to model  calls. This field allows the client to guide the model on desired  responses. The model can be instructed on response content and format,  (e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good  responses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion  into your voice\", \"laugh frequently\"). The instructions are not guaranteed  to be followed by the model, but they provide guidance to the model on the desired behavior.\n\nNote that the server sets default instructions which will be used if this  field is not set and are visible in the `session.created` event at the  start of the session.\n"
                  },
                  "voice": {
                    "example": "ash",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "alloy",
                          "ash",
                          "ballad",
                          "coral",
                          "echo",
                          "fable",
                          "onyx",
                          "nova",
                          "sage",
                          "shimmer",
                          "verse"
                        ]
                      }
                    ],
                    "description": "The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`,\n`onyx`, `nova`, `sage`, `shimmer`, and `verse`.\n"
                  },
                  "input_audio_format": {
                    "type": "string",
                    "default": "pcm16",
                    "enum": [
                      "pcm16",
                      "g711_ulaw",
                      "g711_alaw"
                    ],
                    "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, \nsingle channel (mono), and little-endian byte order.\n"
                  },
                  "output_audio_format": {
                    "type": "string",
                    "default": "pcm16",
                    "enum": [
                      "pcm16",
                      "g711_ulaw",
                      "g711_alaw"
                    ],
                    "description": "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, output audio is sampled at a rate of 24kHz.\n"
                  },
                  "input_audio_transcription": {
                    "type": "object",
                    "description": "Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs  asynchronously through [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as guidance of input audio content rather than precisely what the model heard. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.\n",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.\n"
                      },
                      "language": {
                        "type": "string",
                        "description": "The language of the input audio. Supplying the input language in\n[ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format\nwill improve accuracy and latency.\n"
                      },
                      "prompt": {
                        "type": "string",
                        "description": "An optional text to guide the model's style or continue a previous audio\nsegment.\nFor `whisper-1`, the [prompt is a list of keywords](/docs/guides/speech-to-text#prompting).\nFor `gpt-4o-transcribe` models, the prompt is a free text string, for example \"expect words related to technology\".\n"
                      }
                    }
                  },
                  "turn_detection": {
                    "type": "object",
                    "description": "Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.\nServer VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.\nSemantic VAD is more advanced and uses a turn detection model (in conjuction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with \"uhhm\", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "default": "server_vad",
                        "enum": [
                          "server_vad",
                          "semantic_vad"
                        ],
                        "description": "Type of turn detection.\n"
                      },
                      "eagerness": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                          "low",
                          "medium",
                          "high",
                          "auto"
                        ],
                        "description": "Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.\n"
                      },
                      "threshold": {
                        "type": "number",
                        "description": "Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n"
                      },
                      "prefix_padding_ms": {
                        "type": "integer",
                        "description": "Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n"
                      },
                      "silence_duration_ms": {
                        "type": "integer",
                        "description": "Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults \nto 500ms. With shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n"
                      },
                      "create_response": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether or not to automatically generate a response when a VAD stop event occurs.\n"
                      },
                      "interrupt_response": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether or not to automatically interrupt any ongoing response with output to the default\nconversation (i.e. `conversation` of `auto`) when a VAD start event occurs.\n"
                      }
                    }
                  },
                  "input_audio_noise_reduction": {
                    "type": "object",
                    "default": null,
                    "description": "Configuration for input audio noise reduction. This can be set to `null` to turn off.\nNoise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.\nFiltering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "near_field",
                          "far_field"
                        ],
                        "description": "Type of noise reduction. `near_field` is for close-talking microphones such as headphones, `far_field` is for far-field microphones such as laptop or conference room microphones.\n"
                      }
                    }
                  },
                  "tools": {
                    "type": "array",
                    "description": "Tools (functions) available to the model.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "function"
                          ],
                          "description": "The type of the tool, i.e. `function`."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the function."
                        },
                        "description": {
                          "type": "string",
                          "description": "The description of the function, including guidance on when and how \nto call it, and guidance about what to tell the user when calling \n(if anything).\n"
                        },
                        "parameters": {
                          "type": "object",
                          "description": "Parameters of the function in JSON Schema."
                        }
                      }
                    }
                  },
                  "tool_choice": {
                    "type": "string",
                    "default": "auto",
                    "description": "How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function.\n"
                  },
                  "temperature": {
                    "type": "number",
                    "default": 0.8,
                    "description": "Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a temperature of 0.8 is highly recommended for best performance.\n"
                  },
                  "max_response_output_tokens": {
                    "oneOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "inf"
                        ]
                      }
                    ],
                    "description": "Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n"
                  }
                }
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_realtime_sessions/output-200.schema.json",
            "type": "object",
            "description": "A new Realtime session configuration, with an ephermeral key. Default TTL\nfor keys is one minute.\n",
            "properties": {
              "client_secret": {
                "type": "object",
                "description": "Ephemeral key returned by the API.",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Ephemeral key usable in client environments to authenticate connections\nto the Realtime API. Use this in client-side environments rather than\na standard API token, which should only be used server-side.\n"
                  },
                  "expires_at": {
                    "type": "integer",
                    "description": "Timestamp for when the token expires. Currently, all tokens expire\nafter one minute.\n"
                  }
                },
                "required": [
                  "value",
                  "expires_at"
                ]
              },
              "modalities": {
                "description": "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n",
                "items": {
                  "type": "string",
                  "enum": [
                    "text",
                    "audio"
                  ]
                }
              },
              "instructions": {
                "type": "string",
                "description": "The default system instructions (i.e. system message) prepended to model \ncalls. This field allows the client to guide the model on desired \nresponses. The model can be instructed on response content and format, \n(e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good \nresponses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion \ninto your voice\", \"laugh frequently\"). The instructions are not guaranteed \nto be followed by the model, but they provide guidance to the model on the \ndesired behavior.\n\nNote that the server sets default instructions which will be used if this \nfield is not set and are visible in the `session.created` event at the \nstart of the session.\n"
              },
              "voice": {
                "example": "ash",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "alloy",
                      "ash",
                      "ballad",
                      "coral",
                      "echo",
                      "fable",
                      "onyx",
                      "nova",
                      "sage",
                      "shimmer",
                      "verse"
                    ]
                  }
                ],
                "description": "The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n"
              },
              "input_audio_format": {
                "type": "string",
                "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n"
              },
              "output_audio_format": {
                "type": "string",
                "description": "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n"
              },
              "input_audio_transcription": {
                "type": "object",
                "description": "Configuration for input audio transcription, defaults to off and can be \nset to `null` to turn off once on. Input audio transcription is not native \nto the model, since the model consumes audio directly. Transcription runs \nasynchronously through Whisper and should be treated as rough guidance \nrather than the representation understood by the model.\n",
                "properties": {
                  "model": {
                    "type": "string",
                    "description": "The model to use for transcription, `whisper-1` is the only currently \nsupported model.\n"
                  }
                }
              },
              "turn_detection": {
                "type": "object",
                "description": "Configuration for turn detection. Can be set to `null` to turn off. Server \nVAD means that the model will detect the start and end of speech based on \naudio volume and respond at the end of user speech.\n",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of turn detection, only `server_vad` is currently supported.\n"
                  },
                  "threshold": {
                    "type": "number",
                    "description": "Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n"
                  },
                  "prefix_padding_ms": {
                    "type": "integer",
                    "description": "Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n"
                  },
                  "silence_duration_ms": {
                    "type": "integer",
                    "description": "Duration of silence to detect speech stop (in milliseconds). Defaults \nto 500ms. With shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n"
                  }
                }
              },
              "tools": {
                "type": "array",
                "description": "Tools (functions) available to the model.",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "function"
                      ],
                      "description": "The type of the tool, i.e. `function`."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the function."
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the function, including guidance on when and how \nto call it, and guidance about what to tell the user when calling \n(if anything).\n"
                    },
                    "parameters": {
                      "type": "object",
                      "description": "Parameters of the function in JSON Schema."
                    }
                  }
                }
              },
              "tool_choice": {
                "type": "string",
                "description": "How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function.\n"
              },
              "temperature": {
                "type": "number",
                "description": "Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n"
              },
              "max_response_output_tokens": {
                "oneOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "inf"
                    ]
                  }
                ],
                "description": "Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n"
              }
            },
            "required": [
              "client_secret"
            ]
          }
        ]
      }
    },
    {
      "id": "post_realtime_transcription_sessions",
      "operationId": "create-realtime-transcription-session",
      "name": "Create Realtime Transcription Session",
      "description": "Create an ephemeral API token for use in client-side applications with the\nRealtime API specifically for realtime transcriptions. \nCan be configured with the same session parameters as the `transcription_session.update` client event.\n\nIt responds with a session object, plus a `client_secret` key which contains\na usable ephemeral API token that can be used to authenticate browser clients\nfor the Realtime API.\n",
      "schema": {
        "tags": [
          "Realtime"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_realtime_transcription_sessions/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/realtime/transcription_sessions"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "Create an ephemeral API key with the given session configuration.",
              "properties": {
                "type": "object",
                "description": "Realtime transcription session object configuration.",
                "properties": {
                  "modalities": {
                    "description": "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n",
                    "items": {
                      "type": "string",
                      "default": [
                        "text",
                        "audio"
                      ],
                      "enum": [
                        "text",
                        "audio"
                      ]
                    }
                  },
                  "input_audio_format": {
                    "type": "string",
                    "default": "pcm16",
                    "enum": [
                      "pcm16",
                      "g711_ulaw",
                      "g711_alaw"
                    ],
                    "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, \nsingle channel (mono), and little-endian byte order.\n"
                  },
                  "input_audio_transcription": {
                    "type": "object",
                    "description": "Configuration for input audio transcription. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.\n",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.\n",
                        "enum": [
                          "gpt-4o-transcribe",
                          "gpt-4o-mini-transcribe",
                          "whisper-1"
                        ]
                      },
                      "language": {
                        "type": "string",
                        "description": "The language of the input audio. Supplying the input language in\n[ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format\nwill improve accuracy and latency.\n"
                      },
                      "prompt": {
                        "type": "string",
                        "description": "An optional text to guide the model's style or continue a previous audio\nsegment.\nFor `whisper-1`, the [prompt is a list of keywords](/docs/guides/speech-to-text#prompting).\nFor `gpt-4o-transcribe` models, the prompt is a free text string, for example \"expect words related to technology\".\n"
                      }
                    }
                  },
                  "turn_detection": {
                    "type": "object",
                    "description": "Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.\nServer VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.\nSemantic VAD is more advanced and uses a turn detection model (in conjuction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with \"uhhm\", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "default": "server_vad",
                        "enum": [
                          "server_vad",
                          "semantic_vad"
                        ],
                        "description": "Type of turn detection.\n"
                      },
                      "eagerness": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                          "low",
                          "medium",
                          "high",
                          "auto"
                        ],
                        "description": "Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.\n"
                      },
                      "threshold": {
                        "type": "number",
                        "description": "Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n"
                      },
                      "prefix_padding_ms": {
                        "type": "integer",
                        "description": "Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n"
                      },
                      "silence_duration_ms": {
                        "type": "integer",
                        "description": "Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults \nto 500ms. With shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n"
                      },
                      "create_response": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether or not to automatically generate a response when a VAD stop event occurs. Not available for transcription sessions.\n"
                      },
                      "interrupt_response": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether or not to automatically interrupt any ongoing response with output to the default\nconversation (i.e. `conversation` of `auto`) when a VAD start event occurs. Not available for transcription sessions.\n"
                      }
                    }
                  },
                  "input_audio_noise_reduction": {
                    "type": "object",
                    "default": null,
                    "description": "Configuration for input audio noise reduction. This can be set to `null` to turn off.\nNoise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.\nFiltering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "near_field",
                          "far_field"
                        ],
                        "description": "Type of noise reduction. `near_field` is for close-talking microphones such as headphones, `far_field` is for far-field microphones such as laptop or conference room microphones.\n"
                      }
                    }
                  },
                  "include": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The set of items to include in the transcription. Current available items are:\n- `item.input_audio_transcription.logprobs`\n"
                  }
                }
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_realtime_transcription_sessions/output-200.schema.json",
            "type": "object",
            "description": "A new Realtime transcription session configuration.\n\nWhen a session is created on the server via REST API, the session object\nalso contains an ephemeral key. Default TTL for keys is one minute. This \nproperty is not present when a session is updated via the WebSocket API.\n",
            "properties": {
              "client_secret": {
                "type": "object",
                "description": "Ephemeral key returned by the API. Only present when the session is\ncreated on the server via REST API.\n",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Ephemeral key usable in client environments to authenticate connections\nto the Realtime API. Use this in client-side environments rather than\na standard API token, which should only be used server-side.\n"
                  },
                  "expires_at": {
                    "type": "integer",
                    "description": "Timestamp for when the token expires. Currently, all tokens expire\nafter one minute.\n"
                  }
                },
                "required": [
                  "value",
                  "expires_at"
                ]
              },
              "modalities": {
                "description": "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n",
                "items": {
                  "type": "string",
                  "enum": [
                    "text",
                    "audio"
                  ]
                }
              },
              "input_audio_format": {
                "type": "string",
                "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n"
              },
              "input_audio_transcription": {
                "type": "object",
                "description": "Configuration of the transcription model.\n",
                "properties": {
                  "model": {
                    "type": "string",
                    "description": "The model to use for transcription. Can be `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, or `whisper-1`.\n",
                    "enum": [
                      "gpt-4o-transcribe",
                      "gpt-4o-mini-transcribe",
                      "whisper-1"
                    ]
                  },
                  "language": {
                    "type": "string",
                    "description": "The language of the input audio. Supplying the input language in\n[ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format\nwill improve accuracy and latency.\n"
                  },
                  "prompt": {
                    "type": "string",
                    "description": "An optional text to guide the model's style or continue a previous audio\nsegment. The [prompt](/docs/guides/speech-to-text#prompting) should match\nthe audio language.\n"
                  }
                }
              },
              "turn_detection": {
                "type": "object",
                "description": "Configuration for turn detection. Can be set to `null` to turn off. Server \nVAD means that the model will detect the start and end of speech based on \naudio volume and respond at the end of user speech.\n",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of turn detection, only `server_vad` is currently supported.\n"
                  },
                  "threshold": {
                    "type": "number",
                    "description": "Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n"
                  },
                  "prefix_padding_ms": {
                    "type": "integer",
                    "description": "Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n"
                  },
                  "silence_duration_ms": {
                    "type": "integer",
                    "description": "Duration of silence to detect speech stop (in milliseconds). Defaults \nto 500ms. With shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n"
                  }
                }
              }
            },
            "required": [
              "client_secret"
            ]
          }
        ]
      }
    },
    {
      "id": "post_responses",
      "operationId": "createResponse",
      "name": "Create Response",
      "description": "Creates a model response. Provide [text](/docs/guides/text) or\n[image](/docs/guides/images) inputs to generate [text](/docs/guides/text)\nor [JSON](/docs/guides/structured-outputs) outputs. Have the model call\nyour own [custom code](/docs/guides/function-calling) or use built-in\n[tools](/docs/guides/tools) like [web search](/docs/guides/tools-web-search)\nor [file search](/docs/guides/tools-file-search) to use your own data\nas input for the model's response.\n",
      "schema": {
        "tags": [
          "Responses"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_responses/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/responses"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "allOf": [
                  {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "metadata": {
                            "type": [
                              "object",
                              "null"
                            ],
                            "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "temperature": {
                            "type": [
                              "number",
                              "null"
                            ],
                            "minimum": 0,
                            "maximum": 2,
                            "default": 1,
                            "example": 1,
                            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.\n"
                          },
                          "top_p": {
                            "type": [
                              "number",
                              "null"
                            ],
                            "minimum": 0,
                            "maximum": 1,
                            "default": 1,
                            "example": 1,
                            "description": "An alternative to sampling with temperature, called nucleus sampling,\nwhere the model considers the results of the tokens with top_p probability\nmass. So 0.1 means only the tokens comprising the top 10% probability mass\nare considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
                          },
                          "user": {
                            "type": "string",
                            "example": "user-1234",
                            "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "previous_response_id": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "The unique ID of the previous response to the model. Use this to\ncreate multi-turn conversations. Learn more about \n[conversation state](/docs/guides/conversation-state).\n"
                      },
                      "model": {
                        "description": "Model ID used to generate the response, like `gpt-4o` or `o1`. OpenAI\noffers a wide range of models with different capabilities, performance\ncharacteristics, and price points. Refer to the [model guide](/docs/models)\nto browse and compare available models.\n",
                        "example": "gpt-4o",
                        "anyOf": [
                          {
                            "example": "gpt-4o",
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "string",
                                "enum": [
                                  "o3-mini",
                                  "o3-mini-2025-01-31",
                                  "o1",
                                  "o1-2024-12-17",
                                  "o1-preview",
                                  "o1-preview-2024-09-12",
                                  "o1-mini",
                                  "o1-mini-2024-09-12",
                                  "gpt-4o",
                                  "gpt-4o-2024-11-20",
                                  "gpt-4o-2024-08-06",
                                  "gpt-4o-2024-05-13",
                                  "gpt-4o-audio-preview",
                                  "gpt-4o-audio-preview-2024-10-01",
                                  "gpt-4o-audio-preview-2024-12-17",
                                  "gpt-4o-mini-audio-preview",
                                  "gpt-4o-mini-audio-preview-2024-12-17",
                                  "gpt-4o-search-preview",
                                  "gpt-4o-mini-search-preview",
                                  "gpt-4o-search-preview-2025-03-11",
                                  "gpt-4o-mini-search-preview-2025-03-11",
                                  "chatgpt-4o-latest",
                                  "gpt-4o-mini",
                                  "gpt-4o-mini-2024-07-18",
                                  "gpt-4-turbo",
                                  "gpt-4-turbo-2024-04-09",
                                  "gpt-4-0125-preview",
                                  "gpt-4-turbo-preview",
                                  "gpt-4-1106-preview",
                                  "gpt-4-vision-preview",
                                  "gpt-4",
                                  "gpt-4-0314",
                                  "gpt-4-0613",
                                  "gpt-4-32k",
                                  "gpt-4-32k-0314",
                                  "gpt-4-32k-0613",
                                  "gpt-3.5-turbo",
                                  "gpt-3.5-turbo-16k",
                                  "gpt-3.5-turbo-0301",
                                  "gpt-3.5-turbo-0613",
                                  "gpt-3.5-turbo-1106",
                                  "gpt-3.5-turbo-0125",
                                  "gpt-3.5-turbo-16k-0613"
                                ]
                              }
                            ]
                          },
                          {
                            "type": "string",
                            "enum": [
                              "o1-pro",
                              "o1-pro-2025-03-19",
                              "computer-use-preview",
                              "computer-use-preview-2025-03-11"
                            ]
                          }
                        ]
                      },
                      "reasoning": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "description": "**o-series models only**\n\nConfiguration options for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\n",
                        "title": "Reasoning",
                        "properties": {
                          "effort": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "low",
                              "medium",
                              "high"
                            ],
                            "default": "medium",
                            "description": "**o-series models only** \n\nConstrains effort on reasoning for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n"
                          },
                          "generate_summary": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "**computer_use_preview only**\n\nA summary of the reasoning performed by the model. This can be\nuseful for debugging and understanding the model's reasoning process.\nOne of `concise` or `detailed`.\n",
                            "enum": [
                              "concise",
                              "detailed"
                            ]
                          }
                        }
                      },
                      "max_output_tokens": {
                        "description": "An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).\n",
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "instructions": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Inserts a system (or developer) message as the first item in the model's context.\n\nWhen using along with `previous_response_id`, the instructions from a previous\nresponse will be not be carried over to the next response. This makes it simple\nto swap out system (or developer) messages in new responses.\n"
                      },
                      "text": {
                        "type": "object",
                        "description": "Configuration options for a text response from the model. Can be plain\ntext or structured JSON data. Learn more:\n- [Text inputs and outputs](/docs/guides/text)\n- [Structured Outputs](/docs/guides/structured-outputs)\n",
                        "properties": {
                          "format": {
                            "description": "An object specifying the format that the model must output.\n\nConfiguring `{ \"type\": \"json_schema\" }` enables Structured Outputs, \nwhich ensures the model will match your supplied JSON schema. Learn more in the \n[Structured Outputs guide](/docs/guides/structured-outputs).\n\nThe default format is `{ \"type\": \"text\" }` with no additional options.\n\n**Not recommended for gpt-4o and newer models:**\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it.\n",
                            "oneOf": [
                              {
                                "type": "object",
                                "title": "Text",
                                "description": "Default response format. Used to generate text responses.\n",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "The type of response format being defined. Always `text`.",
                                    "enum": [
                                      "text"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              {
                                "type": "object",
                                "title": "JSON schema",
                                "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "The type of response format being defined. Always `json_schema`.",
                                    "enum": [
                                      "json_schema"
                                    ]
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                                  },
                                  "schema": {
                                    "type": "object",
                                    "title": "JSON schema",
                                    "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                                    "additionalProperties": true
                                  },
                                  "strict": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "default": false,
                                    "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                                  }
                                },
                                "required": [
                                  "type",
                                  "schema"
                                ]
                              },
                              {
                                "type": "object",
                                "title": "JSON object",
                                "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "The type of response format being defined. Always `json_object`.",
                                    "enum": [
                                      "json_object"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              }
                            ]
                          }
                        }
                      },
                      "tools": {
                        "type": "array",
                        "description": "An array of tools the model may call while generating a response. You \ncan specify which tool to use by setting the `tool_choice` parameter.\n\nThe two categories of tools you can provide the model are:\n\n- **Built-in tools**: Tools that are provided by OpenAI that extend the\n  model's capabilities, like [web search](/docs/guides/tools-web-search)\n  or [file search](/docs/guides/tools-file-search). Learn more about\n  [built-in tools](/docs/guides/tools).\n- **Function calls (custom tools)**: Functions that are defined by you,\n  enabling the model to call your own code. Learn more about\n  [function calling](/docs/guides/function-calling).\n",
                        "items": {
                          "oneOf": [
                            {
                              "type": "object",
                              "title": "File search",
                              "description": "A tool that searches for relevant content from uploaded files.\nLearn more about the [file search tool](/docs/guides/tools-file-search).\n",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "file_search"
                                  ],
                                  "description": "The type of the file search tool. Always `file_search`.\n"
                                },
                                "vector_store_ids": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "The IDs of the vector stores to search.\n"
                                },
                                "max_num_results": {
                                  "type": "integer",
                                  "description": "The maximum number of results to return. This number should be between 1 \nand 50 inclusive.\n"
                                },
                                "filters": {
                                  "description": "A filter to apply based on file attributes.",
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "title": "Comparison Filter",
                                      "description": "A filter used to compare a specified attribute key to a given value using a defined comparison operation.\n",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "default": "eq",
                                          "enum": [
                                            "eq",
                                            "ne",
                                            "gt",
                                            "gte",
                                            "lt",
                                            "lte"
                                          ],
                                          "description": "Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.\n- `eq`: equals\n- `ne`: not equal\n- `gt`: greater than\n- `gte`: greater than or equal\n- `lt`: less than\n- `lte`: less than or equal\n"
                                        },
                                        "key": {
                                          "type": "string",
                                          "description": "The key to compare against the value."
                                        },
                                        "value": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "type": "number"
                                            },
                                            {
                                              "type": "boolean"
                                            }
                                          ],
                                          "description": "The value to compare against the attribute key; supports string, number, or boolean types."
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "key",
                                        "value"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "title": "Compound Filter",
                                      "description": "Combine multiple filters using `and` or `or`.",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "Type of operation: `and` or `or`.",
                                          "enum": [
                                            "and",
                                            "or"
                                          ]
                                        },
                                        "filters": {
                                          "type": "array",
                                          "description": "Array of filters to combine. Items can be `ComparisonFilter` or `CompoundFilter`.",
                                          "items": {
                                            "oneOf": [
                                              {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "title": "Comparison Filter",
                                                "description": "A filter used to compare a specified attribute key to a given value using a defined comparison operation.\n",
                                                "properties": {
                                                  "type": {
                                                    "type": "string",
                                                    "default": "eq",
                                                    "enum": [
                                                      "eq",
                                                      "ne",
                                                      "gt",
                                                      "gte",
                                                      "lt",
                                                      "lte"
                                                    ],
                                                    "description": "Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.\n- `eq`: equals\n- `ne`: not equal\n- `gt`: greater than\n- `gte`: greater than or equal\n- `lt`: less than\n- `lte`: less than or equal\n"
                                                  },
                                                  "key": {
                                                    "type": "string",
                                                    "description": "The key to compare against the value."
                                                  },
                                                  "value": {
                                                    "oneOf": [
                                                      {
                                                        "type": "string"
                                                      },
                                                      {
                                                        "type": "number"
                                                      },
                                                      {
                                                        "type": "boolean"
                                                      }
                                                    ],
                                                    "description": "The value to compare against the attribute key; supports string, number, or boolean types."
                                                  }
                                                },
                                                "required": [
                                                  "type",
                                                  "key",
                                                  "value"
                                                ]
                                              },
                                              {
                                                "type": "object",
                                                "additionalProperties": true
                                              }
                                            ]
                                          }
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "filters"
                                      ]
                                    }
                                  ]
                                },
                                "ranking_options": {
                                  "description": "Ranking options for search.",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "ranker": {
                                      "type": "string",
                                      "description": "The ranker to use for the file search.",
                                      "enum": [
                                        "auto",
                                        "default-2024-11-15"
                                      ],
                                      "default": "auto"
                                    },
                                    "score_threshold": {
                                      "type": "number",
                                      "description": "The score threshold for the file search, a number between 0 and 1.\nNumbers closer to 1 will attempt to return only the most relevant\nresults, but may return fewer results.\n",
                                      "minimum": 0,
                                      "maximum": 1,
                                      "default": 0
                                    }
                                  }
                                }
                              },
                              "required": [
                                "type",
                                "vector_store_ids"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "Function",
                              "description": "Defines a function in your own code the model can choose to call. Learn more\nabout [function calling](/docs/guides/function-calling).\n",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "function"
                                  ],
                                  "description": "The type of the function tool. Always `function`.\n"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the function to call.\n"
                                },
                                "description": {
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "description": "A description of the function. Used by the model to determine whether\nor not to call the function.\n"
                                },
                                "parameters": {
                                  "type": "object",
                                  "description": "A JSON schema object describing the parameters of the function.\n",
                                  "additionalProperties": true
                                },
                                "strict": {
                                  "type": "boolean",
                                  "description": "Whether to enforce strict parameter validation. Default `true`.\n"
                                }
                              },
                              "required": [
                                "type",
                                "name",
                                "parameters",
                                "strict"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "Computer use",
                              "description": "A tool that controls a virtual computer. Learn more about the \n[computer tool](/docs/guides/tools-computer-use).\n",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "computer_use_preview"
                                  ],
                                  "description": "The type of the computer use tool. Always `computer_use_preview`.\n"
                                },
                                "display_width": {
                                  "type": "number",
                                  "description": "The width of the computer display.\n"
                                },
                                "display_height": {
                                  "type": "number",
                                  "description": "The height of the computer display.\n"
                                },
                                "environment": {
                                  "type": "string",
                                  "description": "The type of computer environment to control.\n",
                                  "enum": [
                                    "mac",
                                    "windows",
                                    "ubuntu",
                                    "browser"
                                  ]
                                }
                              },
                              "required": [
                                "type",
                                "display_width",
                                "display_height",
                                "environment"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "Web search",
                              "description": "This tool searches the web for relevant results to use in a response.\nLearn more about the [web search tool](/docs/guides/tools-web-search).\n",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "web_search_preview",
                                    "web_search_preview_2025_03_11"
                                  ],
                                  "description": "The type of the web search tool. One of:\n- `web_search_preview`\n- `web_search_preview_2025_03_11`\n"
                                },
                                "user_location": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "title": "Web search location",
                                      "description": "Approximate location parameters for the search.",
                                      "properties": {
                                        "country": {
                                          "type": "string",
                                          "description": "The two-letter \n[ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,\ne.g. `US`.\n"
                                        },
                                        "region": {
                                          "type": "string",
                                          "description": "Free text input for the region of the user, e.g. `California`.\n"
                                        },
                                        "city": {
                                          "type": "string",
                                          "description": "Free text input for the city of the user, e.g. `San Francisco`.\n"
                                        },
                                        "timezone": {
                                          "type": "string",
                                          "description": "The [IANA timezone](https://timeapi.io/documentation/iana-timezones) \nof the user, e.g. `America/Los_Angeles`.\n"
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "The type of location approximation. Always `approximate`.\n",
                                          "enum": [
                                            "approximate"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type"
                                      ]
                                    }
                                  ]
                                },
                                "search_context_size": {
                                  "type": "string",
                                  "description": "High level guidance for the amount of context window space to use for the \nsearch. One of `low`, `medium`, or `high`. `medium` is the default.\n",
                                  "enum": [
                                    "low",
                                    "medium",
                                    "high"
                                  ],
                                  "default": "medium"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ]
                        }
                      },
                      "tool_choice": {
                        "description": "How the model should select which tool (or tools) to use when generating\na response. See the `tools` parameter to see how to specify which tools\nthe model can call.\n",
                        "oneOf": [
                          {
                            "type": "string",
                            "title": "Tool choice mode",
                            "description": "Controls which (if any) tool is called by the model.\n\n`none` means the model will not call any tool and instead generates a message.\n\n`auto` means the model can pick between generating a message or calling one or\nmore tools.\n\n`required` means the model must call one or more tools.\n",
                            "enum": [
                              "none",
                              "auto",
                              "required"
                            ]
                          },
                          {
                            "type": "object",
                            "title": "Hosted tool",
                            "description": "Indicates that the model should use a built-in tool to generate a response.\n[Learn more about built-in tools](/docs/guides/tools).\n",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of hosted tool the model should to use. Learn more about\n[built-in tools](/docs/guides/tools).\n\nAllowed values are:\n- `file_search`\n- `web_search_preview`\n- `computer_use_preview`\n",
                                "enum": [
                                  "file_search",
                                  "web_search_preview",
                                  "computer_use_preview",
                                  "web_search_preview_2025_03_11"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          },
                          {
                            "type": "object",
                            "title": "Function tool",
                            "description": "Use this option to force the model to call a specific function.\n",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "function"
                                ],
                                "description": "For function calling, the type is always `function`."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the function to call."
                              }
                            },
                            "required": [
                              "type",
                              "name"
                            ]
                          }
                        ]
                      },
                      "truncation": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "The truncation strategy to use for the model response.\n- `auto`: If the context of this response and previous ones exceeds\n  the model's context window size, the model will truncate the \n  response to fit the context window by dropping input items in the\n  middle of the conversation. \n- `disabled` (default): If a model response will exceed the context window \n  size for a model, the request will fail with a 400 error.\n",
                        "enum": [
                          "auto",
                          "disabled"
                        ],
                        "default": "disabled"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "input": {
                        "description": "Text, image, or file inputs to the model, used to generate a response.\n\nLearn more:\n- [Text inputs and outputs](/docs/guides/text)\n- [Image inputs](/docs/guides/images)\n- [File inputs](/docs/guides/pdf-files)\n- [Conversation state](/docs/guides/conversation-state)\n- [Function calling](/docs/guides/function-calling)\n",
                        "oneOf": [
                          {
                            "type": "string",
                            "title": "Text input",
                            "description": "A text input to the model, equivalent to a text input with the \n`user` role.\n"
                          },
                          {
                            "type": "array",
                            "title": "Input item list",
                            "description": "A list of one or many input items to the model, containing \ndifferent content types.\n",
                            "items": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "Input message",
                                  "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.\n",
                                  "properties": {
                                    "role": {
                                      "type": "string",
                                      "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.\n",
                                      "enum": [
                                        "user",
                                        "assistant",
                                        "system",
                                        "developer"
                                      ]
                                    },
                                    "content": {
                                      "description": "Text, image, or audio input to the model, used to generate a response.\nCan also contain previous assistant responses.\n",
                                      "oneOf": [
                                        {
                                          "type": "string",
                                          "title": "Text input",
                                          "description": "A text input to the model.\n"
                                        },
                                        {
                                          "type": "array",
                                          "title": "Input item content list",
                                          "description": "A list of one or many input items to the model, containing different content \ntypes.\n",
                                          "items": {
                                            "oneOf": [
                                              {
                                                "type": "object",
                                                "title": "Text input",
                                                "description": "A text input to the model.\n",
                                                "properties": {
                                                  "type": {
                                                    "type": "string",
                                                    "description": "The type of the input item. Always `input_text`.\n",
                                                    "enum": [
                                                      "input_text"
                                                    ]
                                                  },
                                                  "text": {
                                                    "type": "string",
                                                    "description": "The text input to the model.\n"
                                                  }
                                                },
                                                "required": [
                                                  "type",
                                                  "text"
                                                ]
                                              },
                                              {
                                                "type": "object",
                                                "title": "Image input",
                                                "description": "An image input to the model. Learn about [image inputs](/docs/guides/vision).\n",
                                                "properties": {
                                                  "type": {
                                                    "type": "string",
                                                    "description": "The type of the input item. Always `input_image`.\n",
                                                    "enum": [
                                                      "input_image"
                                                    ]
                                                  },
                                                  "image_url": {
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ],
                                                    "description": "The URL of the image to be sent to the model. A fully qualified URL or\nbase64 encoded image in a data URL.\n"
                                                  },
                                                  "file_id": {
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ],
                                                    "description": "The ID of the file to be sent to the model.\n"
                                                  },
                                                  "detail": {
                                                    "type": "string",
                                                    "description": "The detail level of the image to be sent to the model. One of `high`,\n`low`, or `auto`. Defaults to `auto`.\n",
                                                    "enum": [
                                                      "high",
                                                      "low",
                                                      "auto"
                                                    ],
                                                    "default": "auto"
                                                  }
                                                },
                                                "required": [
                                                  "type",
                                                  "detail"
                                                ]
                                              },
                                              {
                                                "type": "object",
                                                "title": "File input",
                                                "description": "A file input to the model.\n",
                                                "properties": {
                                                  "type": {
                                                    "type": "string",
                                                    "description": "The type of the input item. Always `input_file`.\n",
                                                    "enum": [
                                                      "input_file"
                                                    ]
                                                  },
                                                  "file_id": {
                                                    "type": "string",
                                                    "description": "The ID of the file to be sent to the model.\n"
                                                  },
                                                  "filename": {
                                                    "type": "string",
                                                    "description": "The name of the file to be sent to the model.\n"
                                                  },
                                                  "file_data": {
                                                    "type": "string",
                                                    "description": "The content of the file to be sent to the model.\n"
                                                  }
                                                },
                                                "required": [
                                                  "type"
                                                ]
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The type of the message input. Always `message`.\n",
                                      "enum": [
                                        "message"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "role",
                                    "content"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "title": "Item",
                                  "description": "Content item used to generate a response.\n",
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "title": "Input message",
                                      "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role.\n",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "The type of the message input. Always set to `message`.\n",
                                          "enum": [
                                            "message"
                                          ]
                                        },
                                        "role": {
                                          "type": "string",
                                          "description": "The role of the message input. One of `user`, `system`, or `developer`.\n",
                                          "enum": [
                                            "user",
                                            "system",
                                            "developer"
                                          ]
                                        },
                                        "status": {
                                          "type": "string",
                                          "description": "The status of item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
                                          "enum": [
                                            "in_progress",
                                            "completed",
                                            "incomplete"
                                          ]
                                        },
                                        "content": {
                                          "type": "array",
                                          "title": "Input item content list",
                                          "description": "A list of one or many input items to the model, containing different content \ntypes.\n",
                                          "items": {
                                            "oneOf": [
                                              {
                                                "type": "object",
                                                "title": "Text input",
                                                "description": "A text input to the model.\n",
                                                "properties": {
                                                  "type": {
                                                    "type": "string",
                                                    "description": "The type of the input item. Always `input_text`.\n",
                                                    "enum": [
                                                      "input_text"
                                                    ]
                                                  },
                                                  "text": {
                                                    "type": "string",
                                                    "description": "The text input to the model.\n"
                                                  }
                                                },
                                                "required": [
                                                  "type",
                                                  "text"
                                                ]
                                              },
                                              {
                                                "type": "object",
                                                "title": "Image input",
                                                "description": "An image input to the model. Learn about [image inputs](/docs/guides/vision).\n",
                                                "properties": {
                                                  "type": {
                                                    "type": "string",
                                                    "description": "The type of the input item. Always `input_image`.\n",
                                                    "enum": [
                                                      "input_image"
                                                    ]
                                                  },
                                                  "image_url": {
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ],
                                                    "description": "The URL of the image to be sent to the model. A fully qualified URL or\nbase64 encoded image in a data URL.\n"
                                                  },
                                                  "file_id": {
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ],
                                                    "description": "The ID of the file to be sent to the model.\n"
                                                  },
                                                  "detail": {
                                                    "type": "string",
                                                    "description": "The detail level of the image to be sent to the model. One of `high`,\n`low`, or `auto`. Defaults to `auto`.\n",
                                                    "enum": [
                                                      "high",
                                                      "low",
                                                      "auto"
                                                    ],
                                                    "default": "auto"
                                                  }
                                                },
                                                "required": [
                                                  "type",
                                                  "detail"
                                                ]
                                              },
                                              {
                                                "type": "object",
                                                "title": "File input",
                                                "description": "A file input to the model.\n",
                                                "properties": {
                                                  "type": {
                                                    "type": "string",
                                                    "description": "The type of the input item. Always `input_file`.\n",
                                                    "enum": [
                                                      "input_file"
                                                    ]
                                                  },
                                                  "file_id": {
                                                    "type": "string",
                                                    "description": "The ID of the file to be sent to the model.\n"
                                                  },
                                                  "filename": {
                                                    "type": "string",
                                                    "description": "The name of the file to be sent to the model.\n"
                                                  },
                                                  "file_data": {
                                                    "type": "string",
                                                    "description": "The content of the file to be sent to the model.\n"
                                                  }
                                                },
                                                "required": [
                                                  "type"
                                                ]
                                              }
                                            ]
                                          }
                                        }
                                      },
                                      "required": [
                                        "role",
                                        "content"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "title": "Output message",
                                      "description": "An output message from the model.\n",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "The unique ID of the output message.\n"
                                        },
                                        "type": {
                                          "type": "string",
                                          "description": "The type of the output message. Always `message`.\n",
                                          "enum": [
                                            "message"
                                          ]
                                        },
                                        "role": {
                                          "type": "string",
                                          "description": "The role of the output message. Always `assistant`.\n",
                                          "enum": [
                                            "assistant"
                                          ]
                                        },
                                        "content": {
                                          "type": "array",
                                          "description": "The content of the output message.\n",
                                          "items": {
                                            "oneOf": [
                                              {
                                                "type": "object",
                                                "title": "Output text",
                                                "description": "A text output from the model.\n",
                                                "properties": {
                                                  "type": {
                                                    "type": "string",
                                                    "description": "The type of the output text. Always `output_text`.\n",
                                                    "enum": [
                                                      "output_text"
                                                    ]
                                                  },
                                                  "text": {
                                                    "type": "string",
                                                    "description": "The text output from the model.\n"
                                                  },
                                                  "annotations": {
                                                    "type": "array",
                                                    "description": "The annotations of the text output.\n",
                                                    "items": {
                                                      "oneOf": [
                                                        {
                                                          "type": "object",
                                                          "title": "File citation",
                                                          "description": "A citation to a file.\n",
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "description": "The type of the file citation. Always `file_citation`.\n",
                                                              "enum": [
                                                                "file_citation"
                                                              ]
                                                            },
                                                            "index": {
                                                              "type": "integer",
                                                              "description": "The index of the file in the list of files.\n"
                                                            },
                                                            "file_id": {
                                                              "type": "string",
                                                              "description": "The ID of the file.\n"
                                                            }
                                                          },
                                                          "required": [
                                                            "type",
                                                            "index",
                                                            "file_id"
                                                          ]
                                                        },
                                                        {
                                                          "type": "object",
                                                          "title": "URL citation",
                                                          "description": "A citation for a web resource used to generate a model response.\n",
                                                          "properties": {
                                                            "url": {
                                                              "type": "string",
                                                              "description": "The URL of the web resource.\n"
                                                            },
                                                            "title": {
                                                              "type": "string",
                                                              "description": "The title of the web resource.\n"
                                                            },
                                                            "type": {
                                                              "type": "string",
                                                              "description": "The type of the URL citation. Always `url_citation`.\n",
                                                              "enum": [
                                                                "url_citation"
                                                              ]
                                                            },
                                                            "start_index": {
                                                              "type": "integer",
                                                              "description": "The index of the first character of the URL citation in the message.\n"
                                                            },
                                                            "end_index": {
                                                              "type": "integer",
                                                              "description": "The index of the last character of the URL citation in the message.\n"
                                                            }
                                                          },
                                                          "required": [
                                                            "url",
                                                            "title",
                                                            "type",
                                                            "start_index",
                                                            "end_index"
                                                          ]
                                                        },
                                                        {
                                                          "type": "object",
                                                          "title": "File path",
                                                          "description": "A path to a file.\n",
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "description": "The type of the file path. Always `file_path`.\n",
                                                              "enum": [
                                                                "file_path"
                                                              ]
                                                            },
                                                            "file_id": {
                                                              "type": "string",
                                                              "description": "The ID of the file.\n"
                                                            },
                                                            "index": {
                                                              "type": "integer",
                                                              "description": "The index of the file in the list of files.\n"
                                                            }
                                                          },
                                                          "required": [
                                                            "type",
                                                            "file_id",
                                                            "index"
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  }
                                                },
                                                "required": [
                                                  "type",
                                                  "text",
                                                  "annotations"
                                                ]
                                              },
                                              {
                                                "type": "object",
                                                "title": "Refusal",
                                                "description": "A refusal from the model.\n",
                                                "properties": {
                                                  "type": {
                                                    "type": "string",
                                                    "description": "The type of the refusal. Always `refusal`.\n",
                                                    "enum": [
                                                      "refusal"
                                                    ]
                                                  },
                                                  "refusal": {
                                                    "type": "string",
                                                    "description": "The refusal explanationfrom the model.\n"
                                                  }
                                                },
                                                "required": [
                                                  "type",
                                                  "refusal"
                                                ]
                                              }
                                            ]
                                          }
                                        },
                                        "status": {
                                          "type": "string",
                                          "description": "The status of the message input. One of `in_progress`, `completed`, or\n`incomplete`. Populated when input items are returned via API.\n",
                                          "enum": [
                                            "in_progress",
                                            "completed",
                                            "incomplete"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type",
                                        "role",
                                        "content",
                                        "status"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "title": "File search tool call",
                                      "description": "The results of a file search tool call. See the \n[file search guide](/docs/guides/tools-file-search) for more information.\n",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "The unique ID of the file search tool call.\n"
                                        },
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "file_search_call"
                                          ],
                                          "description": "The type of the file search tool call. Always `file_search_call`.\n"
                                        },
                                        "status": {
                                          "type": "string",
                                          "description": "The status of the file search tool call. One of `in_progress`, \n`searching`, `incomplete` or `failed`,\n",
                                          "enum": [
                                            "in_progress",
                                            "searching",
                                            "completed",
                                            "incomplete",
                                            "failed"
                                          ]
                                        },
                                        "queries": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "description": "The queries used to search for files.\n"
                                        },
                                        "results": {
                                          "type": [
                                            "array",
                                            "null"
                                          ],
                                          "description": "The results of the file search tool call.\n",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "file_id": {
                                                "type": "string",
                                                "description": "The unique ID of the file.\n"
                                              },
                                              "text": {
                                                "type": "string",
                                                "description": "The text that was retrieved from the file.\n"
                                              },
                                              "filename": {
                                                "type": "string",
                                                "description": "The name of the file.\n"
                                              },
                                              "attributes": {
                                                "type": [
                                                  "object",
                                                  "null"
                                                ],
                                                "description": "Set of 16 key-value pairs that can be attached to an object. This can be \nuseful for storing additional information about the object in a structured \nformat, and querying for objects via API or the dashboard. Keys are strings \nwith a maximum length of 64 characters. Values are strings with a maximum \nlength of 512 characters, booleans, or numbers.\n",
                                                "maxProperties": 16,
                                                "additionalProperties": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string",
                                                      "maxLength": 512
                                                    },
                                                    {
                                                      "type": "number"
                                                    },
                                                    {
                                                      "type": "boolean"
                                                    }
                                                  ]
                                                }
                                              },
                                              "score": {
                                                "type": "number",
                                                "format": "float",
                                                "description": "The relevance score of the file - a value between 0 and 1.\n"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type",
                                        "status",
                                        "queries"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "title": "Computer tool call",
                                      "description": "A tool call to a computer use tool. See the \n[computer use guide](/docs/guides/tools-computer-use) for more information.\n",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "The type of the computer call. Always `computer_call`.",
                                          "enum": [
                                            "computer_call"
                                          ],
                                          "default": "computer_call"
                                        },
                                        "id": {
                                          "type": "string",
                                          "description": "The unique ID of the computer call."
                                        },
                                        "call_id": {
                                          "type": "string",
                                          "description": "An identifier used when responding to the tool call with output.\n"
                                        },
                                        "action": {
                                          "oneOf": [
                                            {
                                              "type": "object",
                                              "title": "Click",
                                              "description": "A click action.\n",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "click"
                                                  ],
                                                  "default": "click",
                                                  "description": "Specifies the event type. For a click action, this property is \nalways set to `click`.\n"
                                                },
                                                "button": {
                                                  "type": "string",
                                                  "enum": [
                                                    "left",
                                                    "right",
                                                    "wheel",
                                                    "back",
                                                    "forward"
                                                  ],
                                                  "description": "Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`.\n"
                                                },
                                                "x": {
                                                  "type": "integer",
                                                  "description": "The x-coordinate where the click occurred.\n"
                                                },
                                                "y": {
                                                  "type": "integer",
                                                  "description": "The y-coordinate where the click occurred.\n"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "button",
                                                "x",
                                                "y"
                                              ]
                                            },
                                            {
                                              "type": "object",
                                              "title": "DoubleClick",
                                              "description": "A double click action.\n",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "double_click"
                                                  ],
                                                  "default": "double_click",
                                                  "description": "Specifies the event type. For a double click action, this property is \nalways set to `double_click`.\n"
                                                },
                                                "x": {
                                                  "type": "integer",
                                                  "description": "The x-coordinate where the double click occurred.\n"
                                                },
                                                "y": {
                                                  "type": "integer",
                                                  "description": "The y-coordinate where the double click occurred.\n"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "x",
                                                "y"
                                              ]
                                            },
                                            {
                                              "type": "object",
                                              "title": "Drag",
                                              "description": "A drag action.\n",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "drag"
                                                  ],
                                                  "default": "drag",
                                                  "description": "Specifies the event type. For a drag action, this property is \nalways set to `drag`.\n"
                                                },
                                                "path": {
                                                  "type": "array",
                                                  "description": "An array of coordinates representing the path of the drag action. Coordinates will appear as an array\nof objects, eg\n```\n[\n  { x: 100, y: 200 },\n  { x: 200, y: 300 }\n]\n```\n",
                                                  "items": {
                                                    "title": "Coordinate",
                                                    "description": "An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`.\n",
                                                    "type": "object",
                                                    "properties": {
                                                      "x": {
                                                        "type": "integer",
                                                        "description": "The x-coordinate.\n"
                                                      },
                                                      "y": {
                                                        "type": "integer",
                                                        "description": "The y-coordinate.\n"
                                                      }
                                                    },
                                                    "required": [
                                                      "x",
                                                      "y"
                                                    ]
                                                  }
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "path"
                                              ]
                                            },
                                            {
                                              "type": "object",
                                              "title": "KeyPress",
                                              "description": "A collection of keypresses the model would like to perform.\n",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "keypress"
                                                  ],
                                                  "default": "keypress",
                                                  "description": "Specifies the event type. For a keypress action, this property is \nalways set to `keypress`.\n"
                                                },
                                                "keys": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string",
                                                    "description": "One of the keys the model is requesting to be pressed.\n"
                                                  },
                                                  "description": "The combination of keys the model is requesting to be pressed. This is an\narray of strings, each representing a key.\n"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "keys"
                                              ]
                                            },
                                            {
                                              "type": "object",
                                              "title": "Move",
                                              "description": "A mouse move action.\n",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "move"
                                                  ],
                                                  "default": "move",
                                                  "description": "Specifies the event type. For a move action, this property is \nalways set to `move`.\n"
                                                },
                                                "x": {
                                                  "type": "integer",
                                                  "description": "The x-coordinate to move to.\n"
                                                },
                                                "y": {
                                                  "type": "integer",
                                                  "description": "The y-coordinate to move to.\n"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "x",
                                                "y"
                                              ]
                                            },
                                            {
                                              "type": "object",
                                              "title": "Screenshot",
                                              "description": "A screenshot action.\n",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "screenshot"
                                                  ],
                                                  "default": "screenshot",
                                                  "description": "Specifies the event type. For a screenshot action, this property is \nalways set to `screenshot`.\n"
                                                }
                                              },
                                              "required": [
                                                "type"
                                              ]
                                            },
                                            {
                                              "type": "object",
                                              "title": "Scroll",
                                              "description": "A scroll action.\n",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "scroll"
                                                  ],
                                                  "default": "scroll",
                                                  "description": "Specifies the event type. For a scroll action, this property is \nalways set to `scroll`.\n"
                                                },
                                                "x": {
                                                  "type": "integer",
                                                  "description": "The x-coordinate where the scroll occurred.\n"
                                                },
                                                "y": {
                                                  "type": "integer",
                                                  "description": "The y-coordinate where the scroll occurred.\n"
                                                },
                                                "scroll_x": {
                                                  "type": "integer",
                                                  "description": "The horizontal scroll distance.\n"
                                                },
                                                "scroll_y": {
                                                  "type": "integer",
                                                  "description": "The vertical scroll distance.\n"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "x",
                                                "y",
                                                "scroll_x",
                                                "scroll_y"
                                              ]
                                            },
                                            {
                                              "type": "object",
                                              "title": "Type",
                                              "description": "An action to type in text.\n",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "type"
                                                  ],
                                                  "default": "type",
                                                  "description": "Specifies the event type. For a type action, this property is \nalways set to `type`.\n"
                                                },
                                                "text": {
                                                  "type": "string",
                                                  "description": "The text to type.\n"
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "text"
                                              ]
                                            },
                                            {
                                              "type": "object",
                                              "title": "Wait",
                                              "description": "A wait action.\n",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": [
                                                    "wait"
                                                  ],
                                                  "default": "wait",
                                                  "description": "Specifies the event type. For a wait action, this property is \nalways set to `wait`.\n"
                                                }
                                              },
                                              "required": [
                                                "type"
                                              ]
                                            }
                                          ]
                                        },
                                        "pending_safety_checks": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "description": "A pending safety check for the computer call.\n",
                                            "properties": {
                                              "id": {
                                                "type": "string",
                                                "description": "The ID of the pending safety check."
                                              },
                                              "code": {
                                                "type": "string",
                                                "description": "The type of the pending safety check."
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Details about the pending safety check."
                                              }
                                            },
                                            "required": [
                                              "id",
                                              "code",
                                              "message"
                                            ]
                                          },
                                          "description": "The pending safety checks for the computer call.\n"
                                        },
                                        "status": {
                                          "type": "string",
                                          "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
                                          "enum": [
                                            "in_progress",
                                            "completed",
                                            "incomplete"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "id",
                                        "action",
                                        "call_id",
                                        "pending_safety_checks",
                                        "status"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "title": "Computer tool call output",
                                      "description": "The output of a computer tool call.\n",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "The type of the computer tool call output. Always `computer_call_output`.\n",
                                          "enum": [
                                            "computer_call_output"
                                          ],
                                          "default": "computer_call_output"
                                        },
                                        "id": {
                                          "type": "string",
                                          "description": "The ID of the computer tool call output.\n"
                                        },
                                        "call_id": {
                                          "type": "string",
                                          "description": "The ID of the computer tool call that produced the output.\n"
                                        },
                                        "acknowledged_safety_checks": {
                                          "type": "array",
                                          "description": "The safety checks reported by the API that have been acknowledged by the \ndeveloper.\n",
                                          "items": {
                                            "type": "object",
                                            "description": "A pending safety check for the computer call.\n",
                                            "properties": {
                                              "id": {
                                                "type": "string",
                                                "description": "The ID of the pending safety check."
                                              },
                                              "code": {
                                                "type": "string",
                                                "description": "The type of the pending safety check."
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Details about the pending safety check."
                                              }
                                            },
                                            "required": [
                                              "id",
                                              "code",
                                              "message"
                                            ]
                                          }
                                        },
                                        "output": {
                                          "type": "object",
                                          "description": "A computer screenshot image used with the computer use tool.\n",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "computer_screenshot"
                                              ],
                                              "default": "computer_screenshot",
                                              "description": "Specifies the event type. For a computer screenshot, this property is \nalways set to `computer_screenshot`.\n"
                                            },
                                            "image_url": {
                                              "type": "string",
                                              "description": "The URL of the screenshot image."
                                            },
                                            "file_id": {
                                              "type": "string",
                                              "description": "The identifier of an uploaded file that contains the screenshot."
                                            }
                                          },
                                          "required": [
                                            "type"
                                          ]
                                        },
                                        "status": {
                                          "type": "string",
                                          "description": "The status of the message input. One of `in_progress`, `completed`, or\n`incomplete`. Populated when input items are returned via API.\n",
                                          "enum": [
                                            "in_progress",
                                            "completed",
                                            "incomplete"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "call_id",
                                        "output"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "title": "Web search tool call",
                                      "description": "The results of a web search tool call. See the \n[web search guide](/docs/guides/tools-web-search) for more information.\n",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "The unique ID of the web search tool call.\n"
                                        },
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "web_search_call"
                                          ],
                                          "description": "The type of the web search tool call. Always `web_search_call`.\n"
                                        },
                                        "status": {
                                          "type": "string",
                                          "description": "The status of the web search tool call.\n",
                                          "enum": [
                                            "in_progress",
                                            "searching",
                                            "completed",
                                            "failed"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type",
                                        "status"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "title": "Function tool call",
                                      "description": "A tool call to run a function. See the \n[function calling guide](/docs/guides/function-calling) for more information.\n",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "The unique ID of the function tool call.\n"
                                        },
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "function_call"
                                          ],
                                          "description": "The type of the function tool call. Always `function_call`.\n"
                                        },
                                        "call_id": {
                                          "type": "string",
                                          "description": "The unique ID of the function tool call generated by the model.\n"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name of the function to run.\n"
                                        },
                                        "arguments": {
                                          "type": "string",
                                          "description": "A JSON string of the arguments to pass to the function.\n"
                                        },
                                        "status": {
                                          "type": "string",
                                          "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
                                          "enum": [
                                            "in_progress",
                                            "completed",
                                            "incomplete"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "call_id",
                                        "name",
                                        "arguments"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "title": "Function tool call output",
                                      "description": "The output of a function tool call.\n",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "description": "The unique ID of the function tool call output. Populated when this item\nis returned via API.\n"
                                        },
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "function_call_output"
                                          ],
                                          "description": "The type of the function tool call output. Always `function_call_output`.\n"
                                        },
                                        "call_id": {
                                          "type": "string",
                                          "description": "The unique ID of the function tool call generated by the model.\n"
                                        },
                                        "output": {
                                          "type": "string",
                                          "description": "A JSON string of the output of the function tool call.\n"
                                        },
                                        "status": {
                                          "type": "string",
                                          "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
                                          "enum": [
                                            "in_progress",
                                            "completed",
                                            "incomplete"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "call_id",
                                        "output"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "description": "A description of the chain of thought used by a reasoning model while generating\na response.\n",
                                      "title": "Reasoning",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "The type of the object. Always `reasoning`.\n",
                                          "enum": [
                                            "reasoning"
                                          ]
                                        },
                                        "id": {
                                          "type": "string",
                                          "description": "The unique identifier of the reasoning content.\n"
                                        },
                                        "summary": {
                                          "type": "array",
                                          "description": "Reasoning text contents.\n",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "description": "The type of the object. Always `summary_text`.\n",
                                                "enum": [
                                                  "summary_text"
                                                ]
                                              },
                                              "text": {
                                                "type": "string",
                                                "description": "A short summary of the reasoning used by the model when generating\nthe response.\n"
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "text"
                                            ]
                                          }
                                        },
                                        "status": {
                                          "type": "string",
                                          "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
                                          "enum": [
                                            "in_progress",
                                            "completed",
                                            "incomplete"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "summary",
                                        "type"
                                      ]
                                    }
                                  ],
                                  "discriminator": {
                                    "propertyName": "type"
                                  }
                                },
                                {
                                  "type": "object",
                                  "title": "Item reference",
                                  "description": "An internal identifier for an item to reference.\n",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The ID of the item to reference.\n"
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The type of item to reference. Always `item_reference`.\n",
                                      "enum": [
                                        "item_reference"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ]
                                }
                              ],
                              "discriminator": {
                                "propertyName": "type"
                              }
                            }
                          }
                        ]
                      },
                      "include": {
                        "type": [
                          "array",
                          "null"
                        ],
                        "description": "Specify additional output data to include in the model response. Currently\nsupported values are:\n- `file_search_call.results`: Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`: Include image urls from the input message.\n- `computer_call_output.output.image_url`: Include image urls from the computer call output.\n",
                        "items": {
                          "type": "string",
                          "description": "Specify additional output data to include in the model response. Currently\nsupported values are:\n- `file_search_call.results`: Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`: Include image urls from the input message.\n- `computer_call_output.output.image_url`: Include image urls from the computer call output.\n",
                          "enum": [
                            "file_search_call.results",
                            "message.input_image.image_url",
                            "computer_call_output.output.image_url"
                          ]
                        }
                      },
                      "parallel_tool_calls": {
                        "type": [
                          "boolean",
                          "null"
                        ],
                        "description": "Whether to allow the model to run tool calls in parallel.\n",
                        "default": true
                      },
                      "store": {
                        "type": [
                          "boolean",
                          "null"
                        ],
                        "description": "Whether to store the generated model response for later retrieval via\nAPI.\n",
                        "default": true
                      },
                      "stream": {
                        "description": "If set to true, the model response data will be streamed to the client\nas it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\nSee the [Streaming section below](/docs/api-reference/responses-streaming)\nfor more information.\n",
                        "type": [
                          "boolean",
                          "null"
                        ],
                        "default": false
                      }
                    },
                    "required": [
                      "model",
                      "input"
                    ]
                  }
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": []
      }
    },
    {
      "id": "get_responses__response_id_",
      "operationId": "getResponse",
      "name": "Get Response",
      "description": "Retrieves a model response with the given ID.\n",
      "schema": {
        "tags": [
          "Responses"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_responses__response_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/responses/{response_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "include": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Specify additional output data to include in the model response. Currently\nsupported values are:\n- `file_search_call.results`: Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`: Include image urls from the input message.\n- `computer_call_output.output.image_url`: Include image urls from the computer call output.\n",
                    "enum": [
                      "file_search_call.results",
                      "message.input_image.image_url",
                      "computer_call_output.output.image_url"
                    ]
                  },
                  "description": "Specify additional output data to include in the response. Currently\nsupported values are:\n- `file_search_call.results`: Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`: Include image urls from the input message.\n- `computer_call_output.output.image_url`: Include image urls from the computer call output.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "response_id"
              ],
              "properties": {
                "response_id": {
                  "type": "string",
                  "example": "resp_677efb5139a88190b512bc3fef8e535d",
                  "description": "The ID of the response to retrieve."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": []
      }
    },
    {
      "id": "delete_responses__response_id_",
      "operationId": "deleteResponse",
      "name": "Delete Response",
      "description": "Deletes a model response with the given ID.\n",
      "schema": {
        "tags": [
          "Responses"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_responses__response_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/responses/{response_id}"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "response_id"
              ],
              "properties": {
                "response_id": {
                  "type": "string",
                  "example": "resp_677efb5139a88190b512bc3fef8e535d",
                  "description": "The ID of the response to delete."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_responses__response_id_/output-404.schema.json",
            "type": "object",
            "properties": {
              "code": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "message": {
                "type": "string"
              },
              "param": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "message",
              "param",
              "code"
            ]
          }
        ]
      }
    },
    {
      "id": "get_responses__response_id__input_items",
      "operationId": "listInputItems",
      "name": "List Input Items",
      "description": "Returns a list of input items for a given response.",
      "schema": {
        "tags": [
          "Responses"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_responses__response_id__input_items/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/responses/{response_id}/input_items"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between\n1 and 100, and the default is 20.\n"
                },
                "order": {
                  "type": "string",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "description": "The order to return the input items in. Default is `asc`.\n- `asc`: Return the input items in ascending order.\n- `desc`: Return the input items in descending order.\n"
                },
                "after": {
                  "type": "string",
                  "description": "An item ID to list items after, used in pagination.\n"
                },
                "before": {
                  "type": "string",
                  "description": "An item ID to list items before, used in pagination.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "response_id"
              ],
              "properties": {
                "response_id": {
                  "type": "string",
                  "description": "The ID of the response to retrieve input items for."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_responses__response_id__input_items/output-200.schema.json",
            "type": "object",
            "description": "A list of Response items.",
            "properties": {
              "object": {
                "type": "string",
                "description": "The type of object returned, must be `list`.",
                "enum": [
                  "list"
                ]
              },
              "data": {
                "type": "array",
                "description": "A list of items used to generate this response.",
                "items": {
                  "description": "Content item used to generate a response.\n",
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "title": "Input message",
                          "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role.\n",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of the message input. Always set to `message`.\n",
                              "enum": [
                                "message"
                              ]
                            },
                            "role": {
                              "type": "string",
                              "description": "The role of the message input. One of `user`, `system`, or `developer`.\n",
                              "enum": [
                                "user",
                                "system",
                                "developer"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "description": "The status of item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
                              "enum": [
                                "in_progress",
                                "completed",
                                "incomplete"
                              ]
                            },
                            "content": {
                              "type": "array",
                              "title": "Input item content list",
                              "description": "A list of one or many input items to the model, containing different content \ntypes.\n",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "object",
                                    "title": "Text input",
                                    "description": "A text input to the model.\n",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "description": "The type of the input item. Always `input_text`.\n",
                                        "enum": [
                                          "input_text"
                                        ]
                                      },
                                      "text": {
                                        "type": "string",
                                        "description": "The text input to the model.\n"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "text"
                                    ]
                                  },
                                  {
                                    "type": "object",
                                    "title": "Image input",
                                    "description": "An image input to the model. Learn about [image inputs](/docs/guides/vision).\n",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "description": "The type of the input item. Always `input_image`.\n",
                                        "enum": [
                                          "input_image"
                                        ]
                                      },
                                      "image_url": {
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "description": "The URL of the image to be sent to the model. A fully qualified URL or\nbase64 encoded image in a data URL.\n"
                                      },
                                      "file_id": {
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "description": "The ID of the file to be sent to the model.\n"
                                      },
                                      "detail": {
                                        "type": "string",
                                        "description": "The detail level of the image to be sent to the model. One of `high`,\n`low`, or `auto`. Defaults to `auto`.\n",
                                        "enum": [
                                          "high",
                                          "low",
                                          "auto"
                                        ],
                                        "default": "auto"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "detail"
                                    ]
                                  },
                                  {
                                    "type": "object",
                                    "title": "File input",
                                    "description": "A file input to the model.\n",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "description": "The type of the input item. Always `input_file`.\n",
                                        "enum": [
                                          "input_file"
                                        ]
                                      },
                                      "file_id": {
                                        "type": "string",
                                        "description": "The ID of the file to be sent to the model.\n"
                                      },
                                      "filename": {
                                        "type": "string",
                                        "description": "The name of the file to be sent to the model.\n"
                                      },
                                      "file_data": {
                                        "type": "string",
                                        "description": "The content of the file to be sent to the model.\n"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ]
                                  }
                                ]
                              }
                            }
                          },
                          "required": [
                            "role",
                            "content"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The unique ID of the message input.\n"
                            }
                          },
                          "required": [
                            "id"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Output message",
                      "description": "An output message from the model.\n",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique ID of the output message.\n"
                        },
                        "type": {
                          "type": "string",
                          "description": "The type of the output message. Always `message`.\n",
                          "enum": [
                            "message"
                          ]
                        },
                        "role": {
                          "type": "string",
                          "description": "The role of the output message. Always `assistant`.\n",
                          "enum": [
                            "assistant"
                          ]
                        },
                        "content": {
                          "type": "array",
                          "description": "The content of the output message.\n",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "title": "Output text",
                                "description": "A text output from the model.\n",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "The type of the output text. Always `output_text`.\n",
                                    "enum": [
                                      "output_text"
                                    ]
                                  },
                                  "text": {
                                    "type": "string",
                                    "description": "The text output from the model.\n"
                                  },
                                  "annotations": {
                                    "type": "array",
                                    "description": "The annotations of the text output.\n",
                                    "items": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "File citation",
                                          "description": "A citation to a file.\n",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "description": "The type of the file citation. Always `file_citation`.\n",
                                              "enum": [
                                                "file_citation"
                                              ]
                                            },
                                            "index": {
                                              "type": "integer",
                                              "description": "The index of the file in the list of files.\n"
                                            },
                                            "file_id": {
                                              "type": "string",
                                              "description": "The ID of the file.\n"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "index",
                                            "file_id"
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "title": "URL citation",
                                          "description": "A citation for a web resource used to generate a model response.\n",
                                          "properties": {
                                            "url": {
                                              "type": "string",
                                              "description": "The URL of the web resource.\n"
                                            },
                                            "title": {
                                              "type": "string",
                                              "description": "The title of the web resource.\n"
                                            },
                                            "type": {
                                              "type": "string",
                                              "description": "The type of the URL citation. Always `url_citation`.\n",
                                              "enum": [
                                                "url_citation"
                                              ]
                                            },
                                            "start_index": {
                                              "type": "integer",
                                              "description": "The index of the first character of the URL citation in the message.\n"
                                            },
                                            "end_index": {
                                              "type": "integer",
                                              "description": "The index of the last character of the URL citation in the message.\n"
                                            }
                                          },
                                          "required": [
                                            "url",
                                            "title",
                                            "type",
                                            "start_index",
                                            "end_index"
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "title": "File path",
                                          "description": "A path to a file.\n",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "description": "The type of the file path. Always `file_path`.\n",
                                              "enum": [
                                                "file_path"
                                              ]
                                            },
                                            "file_id": {
                                              "type": "string",
                                              "description": "The ID of the file.\n"
                                            },
                                            "index": {
                                              "type": "integer",
                                              "description": "The index of the file in the list of files.\n"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "file_id",
                                            "index"
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "type",
                                  "text",
                                  "annotations"
                                ]
                              },
                              {
                                "type": "object",
                                "title": "Refusal",
                                "description": "A refusal from the model.\n",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "The type of the refusal. Always `refusal`.\n",
                                    "enum": [
                                      "refusal"
                                    ]
                                  },
                                  "refusal": {
                                    "type": "string",
                                    "description": "The refusal explanationfrom the model.\n"
                                  }
                                },
                                "required": [
                                  "type",
                                  "refusal"
                                ]
                              }
                            ]
                          }
                        },
                        "status": {
                          "type": "string",
                          "description": "The status of the message input. One of `in_progress`, `completed`, or\n`incomplete`. Populated when input items are returned via API.\n",
                          "enum": [
                            "in_progress",
                            "completed",
                            "incomplete"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type",
                        "role",
                        "content",
                        "status"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "File search tool call",
                      "description": "The results of a file search tool call. See the \n[file search guide](/docs/guides/tools-file-search) for more information.\n",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique ID of the file search tool call.\n"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "file_search_call"
                          ],
                          "description": "The type of the file search tool call. Always `file_search_call`.\n"
                        },
                        "status": {
                          "type": "string",
                          "description": "The status of the file search tool call. One of `in_progress`, \n`searching`, `incomplete` or `failed`,\n",
                          "enum": [
                            "in_progress",
                            "searching",
                            "completed",
                            "incomplete",
                            "failed"
                          ]
                        },
                        "queries": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "The queries used to search for files.\n"
                        },
                        "results": {
                          "type": [
                            "array",
                            "null"
                          ],
                          "description": "The results of the file search tool call.\n",
                          "items": {
                            "type": "object",
                            "properties": {
                              "file_id": {
                                "type": "string",
                                "description": "The unique ID of the file.\n"
                              },
                              "text": {
                                "type": "string",
                                "description": "The text that was retrieved from the file.\n"
                              },
                              "filename": {
                                "type": "string",
                                "description": "The name of the file.\n"
                              },
                              "attributes": {
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "description": "Set of 16 key-value pairs that can be attached to an object. This can be \nuseful for storing additional information about the object in a structured \nformat, and querying for objects via API or the dashboard. Keys are strings \nwith a maximum length of 64 characters. Values are strings with a maximum \nlength of 512 characters, booleans, or numbers.\n",
                                "maxProperties": 16,
                                "additionalProperties": {
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "maxLength": 512
                                    },
                                    {
                                      "type": "number"
                                    },
                                    {
                                      "type": "boolean"
                                    }
                                  ]
                                }
                              },
                              "score": {
                                "type": "number",
                                "format": "float",
                                "description": "The relevance score of the file - a value between 0 and 1.\n"
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "id",
                        "type",
                        "status",
                        "queries"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Computer tool call",
                      "description": "A tool call to a computer use tool. See the \n[computer use guide](/docs/guides/tools-computer-use) for more information.\n",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of the computer call. Always `computer_call`.",
                          "enum": [
                            "computer_call"
                          ],
                          "default": "computer_call"
                        },
                        "id": {
                          "type": "string",
                          "description": "The unique ID of the computer call."
                        },
                        "call_id": {
                          "type": "string",
                          "description": "An identifier used when responding to the tool call with output.\n"
                        },
                        "action": {
                          "oneOf": [
                            {
                              "type": "object",
                              "title": "Click",
                              "description": "A click action.\n",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "click"
                                  ],
                                  "default": "click",
                                  "description": "Specifies the event type. For a click action, this property is \nalways set to `click`.\n"
                                },
                                "button": {
                                  "type": "string",
                                  "enum": [
                                    "left",
                                    "right",
                                    "wheel",
                                    "back",
                                    "forward"
                                  ],
                                  "description": "Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`.\n"
                                },
                                "x": {
                                  "type": "integer",
                                  "description": "The x-coordinate where the click occurred.\n"
                                },
                                "y": {
                                  "type": "integer",
                                  "description": "The y-coordinate where the click occurred.\n"
                                }
                              },
                              "required": [
                                "type",
                                "button",
                                "x",
                                "y"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "DoubleClick",
                              "description": "A double click action.\n",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "double_click"
                                  ],
                                  "default": "double_click",
                                  "description": "Specifies the event type. For a double click action, this property is \nalways set to `double_click`.\n"
                                },
                                "x": {
                                  "type": "integer",
                                  "description": "The x-coordinate where the double click occurred.\n"
                                },
                                "y": {
                                  "type": "integer",
                                  "description": "The y-coordinate where the double click occurred.\n"
                                }
                              },
                              "required": [
                                "type",
                                "x",
                                "y"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "Drag",
                              "description": "A drag action.\n",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "drag"
                                  ],
                                  "default": "drag",
                                  "description": "Specifies the event type. For a drag action, this property is \nalways set to `drag`.\n"
                                },
                                "path": {
                                  "type": "array",
                                  "description": "An array of coordinates representing the path of the drag action. Coordinates will appear as an array\nof objects, eg\n```\n[\n  { x: 100, y: 200 },\n  { x: 200, y: 300 }\n]\n```\n",
                                  "items": {
                                    "title": "Coordinate",
                                    "description": "An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`.\n",
                                    "type": "object",
                                    "properties": {
                                      "x": {
                                        "type": "integer",
                                        "description": "The x-coordinate.\n"
                                      },
                                      "y": {
                                        "type": "integer",
                                        "description": "The y-coordinate.\n"
                                      }
                                    },
                                    "required": [
                                      "x",
                                      "y"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "type",
                                "path"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "KeyPress",
                              "description": "A collection of keypresses the model would like to perform.\n",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "keypress"
                                  ],
                                  "default": "keypress",
                                  "description": "Specifies the event type. For a keypress action, this property is \nalways set to `keypress`.\n"
                                },
                                "keys": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "description": "One of the keys the model is requesting to be pressed.\n"
                                  },
                                  "description": "The combination of keys the model is requesting to be pressed. This is an\narray of strings, each representing a key.\n"
                                }
                              },
                              "required": [
                                "type",
                                "keys"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "Move",
                              "description": "A mouse move action.\n",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "move"
                                  ],
                                  "default": "move",
                                  "description": "Specifies the event type. For a move action, this property is \nalways set to `move`.\n"
                                },
                                "x": {
                                  "type": "integer",
                                  "description": "The x-coordinate to move to.\n"
                                },
                                "y": {
                                  "type": "integer",
                                  "description": "The y-coordinate to move to.\n"
                                }
                              },
                              "required": [
                                "type",
                                "x",
                                "y"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "Screenshot",
                              "description": "A screenshot action.\n",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "screenshot"
                                  ],
                                  "default": "screenshot",
                                  "description": "Specifies the event type. For a screenshot action, this property is \nalways set to `screenshot`.\n"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "Scroll",
                              "description": "A scroll action.\n",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "scroll"
                                  ],
                                  "default": "scroll",
                                  "description": "Specifies the event type. For a scroll action, this property is \nalways set to `scroll`.\n"
                                },
                                "x": {
                                  "type": "integer",
                                  "description": "The x-coordinate where the scroll occurred.\n"
                                },
                                "y": {
                                  "type": "integer",
                                  "description": "The y-coordinate where the scroll occurred.\n"
                                },
                                "scroll_x": {
                                  "type": "integer",
                                  "description": "The horizontal scroll distance.\n"
                                },
                                "scroll_y": {
                                  "type": "integer",
                                  "description": "The vertical scroll distance.\n"
                                }
                              },
                              "required": [
                                "type",
                                "x",
                                "y",
                                "scroll_x",
                                "scroll_y"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "Type",
                              "description": "An action to type in text.\n",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "type"
                                  ],
                                  "default": "type",
                                  "description": "Specifies the event type. For a type action, this property is \nalways set to `type`.\n"
                                },
                                "text": {
                                  "type": "string",
                                  "description": "The text to type.\n"
                                }
                              },
                              "required": [
                                "type",
                                "text"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "Wait",
                              "description": "A wait action.\n",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "wait"
                                  ],
                                  "default": "wait",
                                  "description": "Specifies the event type. For a wait action, this property is \nalways set to `wait`.\n"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ]
                        },
                        "pending_safety_checks": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "A pending safety check for the computer call.\n",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the pending safety check."
                              },
                              "code": {
                                "type": "string",
                                "description": "The type of the pending safety check."
                              },
                              "message": {
                                "type": "string",
                                "description": "Details about the pending safety check."
                              }
                            },
                            "required": [
                              "id",
                              "code",
                              "message"
                            ]
                          },
                          "description": "The pending safety checks for the computer call.\n"
                        },
                        "status": {
                          "type": "string",
                          "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
                          "enum": [
                            "in_progress",
                            "completed",
                            "incomplete"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "id",
                        "action",
                        "call_id",
                        "pending_safety_checks",
                        "status"
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "title": "Computer tool call output",
                          "description": "The output of a computer tool call.\n",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of the computer tool call output. Always `computer_call_output`.\n",
                              "enum": [
                                "computer_call_output"
                              ],
                              "default": "computer_call_output"
                            },
                            "id": {
                              "type": "string",
                              "description": "The ID of the computer tool call output.\n"
                            },
                            "call_id": {
                              "type": "string",
                              "description": "The ID of the computer tool call that produced the output.\n"
                            },
                            "acknowledged_safety_checks": {
                              "type": "array",
                              "description": "The safety checks reported by the API that have been acknowledged by the \ndeveloper.\n",
                              "items": {
                                "type": "object",
                                "description": "A pending safety check for the computer call.\n",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "The ID of the pending safety check."
                                  },
                                  "code": {
                                    "type": "string",
                                    "description": "The type of the pending safety check."
                                  },
                                  "message": {
                                    "type": "string",
                                    "description": "Details about the pending safety check."
                                  }
                                },
                                "required": [
                                  "id",
                                  "code",
                                  "message"
                                ]
                              }
                            },
                            "output": {
                              "type": "object",
                              "description": "A computer screenshot image used with the computer use tool.\n",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "computer_screenshot"
                                  ],
                                  "default": "computer_screenshot",
                                  "description": "Specifies the event type. For a computer screenshot, this property is \nalways set to `computer_screenshot`.\n"
                                },
                                "image_url": {
                                  "type": "string",
                                  "description": "The URL of the screenshot image."
                                },
                                "file_id": {
                                  "type": "string",
                                  "description": "The identifier of an uploaded file that contains the screenshot."
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "description": "The status of the message input. One of `in_progress`, `completed`, or\n`incomplete`. Populated when input items are returned via API.\n",
                              "enum": [
                                "in_progress",
                                "completed",
                                "incomplete"
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "call_id",
                            "output"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The unique ID of the computer call tool output.\n"
                            }
                          },
                          "required": [
                            "id"
                          ]
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Web search tool call",
                      "description": "The results of a web search tool call. See the \n[web search guide](/docs/guides/tools-web-search) for more information.\n",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique ID of the web search tool call.\n"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "web_search_call"
                          ],
                          "description": "The type of the web search tool call. Always `web_search_call`.\n"
                        },
                        "status": {
                          "type": "string",
                          "description": "The status of the web search tool call.\n",
                          "enum": [
                            "in_progress",
                            "searching",
                            "completed",
                            "failed"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type",
                        "status"
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "title": "Function tool call",
                          "description": "A tool call to run a function. See the \n[function calling guide](/docs/guides/function-calling) for more information.\n",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The unique ID of the function tool call.\n"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "function_call"
                              ],
                              "description": "The type of the function tool call. Always `function_call`.\n"
                            },
                            "call_id": {
                              "type": "string",
                              "description": "The unique ID of the function tool call generated by the model.\n"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the function to run.\n"
                            },
                            "arguments": {
                              "type": "string",
                              "description": "A JSON string of the arguments to pass to the function.\n"
                            },
                            "status": {
                              "type": "string",
                              "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
                              "enum": [
                                "in_progress",
                                "completed",
                                "incomplete"
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "call_id",
                            "name",
                            "arguments"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The unique ID of the function tool call.\n"
                            }
                          },
                          "required": [
                            "id"
                          ]
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "title": "Function tool call output",
                          "description": "The output of a function tool call.\n",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The unique ID of the function tool call output. Populated when this item\nis returned via API.\n"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "function_call_output"
                              ],
                              "description": "The type of the function tool call output. Always `function_call_output`.\n"
                            },
                            "call_id": {
                              "type": "string",
                              "description": "The unique ID of the function tool call generated by the model.\n"
                            },
                            "output": {
                              "type": "string",
                              "description": "A JSON string of the output of the function tool call.\n"
                            },
                            "status": {
                              "type": "string",
                              "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
                              "enum": [
                                "in_progress",
                                "completed",
                                "incomplete"
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "call_id",
                            "output"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The unique ID of the function call tool output.\n"
                            }
                          },
                          "required": [
                            "id"
                          ]
                        }
                      ]
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type"
                  }
                }
              },
              "has_more": {
                "type": "boolean",
                "description": "Whether there are more items available."
              },
              "first_id": {
                "type": "string",
                "description": "The ID of the first item in the list."
              },
              "last_id": {
                "type": "string",
                "description": "The ID of the last item in the list."
              }
            },
            "required": [
              "object",
              "data",
              "has_more",
              "first_id",
              "last_id"
            ]
          }
        ]
      }
    },
    {
      "id": "post_threads",
      "operationId": "createThread",
      "name": "Create Thread",
      "description": "Create a thread.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_threads/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "description": "Options to create a new thread. If no thread is provided when running a \nrequest, an empty thread will be created.\n",
                "additionalProperties": false,
                "properties": {
                  "messages": {
                    "description": "A list of [messages](/docs/api-reference/messages) to start the thread with.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "role",
                        "content"
                      ],
                      "properties": {
                        "role": {
                          "type": "string",
                          "enum": [
                            "user",
                            "assistant"
                          ],
                          "description": "The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.\n"
                        },
                        "content": {
                          "oneOf": [
                            {
                              "type": "string",
                              "description": "The text contents of the message.",
                              "title": "Text content"
                            },
                            {
                              "type": "array",
                              "description": "An array of content parts with a defined type, each can be of type `text` or images can be passed with `image_url` or `image_file`. Image types are only supported on [Vision-compatible models](/docs/models).",
                              "title": "Array of content parts",
                              "items": {
                                "oneOf": [
                                  {
                                    "title": "Image file",
                                    "type": "object",
                                    "description": "References an image [File](/docs/api-reference/files) in the content of a message.",
                                    "properties": {
                                      "type": {
                                        "description": "Always `image_file`.",
                                        "type": "string",
                                        "enum": [
                                          "image_file"
                                        ]
                                      },
                                      "image_file": {
                                        "type": "object",
                                        "properties": {
                                          "file_id": {
                                            "description": "The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose=\"vision\"` when uploading the File if you need to later display the file content.",
                                            "type": "string"
                                          },
                                          "detail": {
                                            "type": "string",
                                            "description": "Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.",
                                            "enum": [
                                              "auto",
                                              "low",
                                              "high"
                                            ],
                                            "default": "auto"
                                          }
                                        },
                                        "required": [
                                          "file_id"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "image_file"
                                    ]
                                  },
                                  {
                                    "title": "Image URL",
                                    "type": "object",
                                    "description": "References an image URL in the content of a message.",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "image_url"
                                        ],
                                        "description": "The type of the content part."
                                      },
                                      "image_url": {
                                        "type": "object",
                                        "properties": {
                                          "url": {
                                            "type": "string",
                                            "description": "The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.",
                                            "format": "uri"
                                          },
                                          "detail": {
                                            "type": "string",
                                            "description": "Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`",
                                            "enum": [
                                              "auto",
                                              "low",
                                              "high"
                                            ],
                                            "default": "auto"
                                          }
                                        },
                                        "required": [
                                          "url"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "image_url"
                                    ]
                                  },
                                  {
                                    "title": "Text",
                                    "type": "object",
                                    "description": "The text content that is part of a message.",
                                    "properties": {
                                      "type": {
                                        "description": "Always `text`.",
                                        "type": "string",
                                        "enum": [
                                          "text"
                                        ]
                                      },
                                      "text": {
                                        "type": "string",
                                        "description": "Text content to be sent to the model"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "text"
                                    ]
                                  }
                                ]
                              },
                              "minItems": 1
                            }
                          ]
                        },
                        "attachments": {
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "file_id": {
                                "type": "string",
                                "description": "The ID of the file to attach to the message."
                              },
                              "tools": {
                                "description": "The tools to add this file to.",
                                "type": "array",
                                "items": {
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "title": "Code interpreter tool",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "The type of tool being defined: `code_interpreter`",
                                          "enum": [
                                            "code_interpreter"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "title": "FileSearch tool",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "The type of tool being defined: `file_search`",
                                          "enum": [
                                            "file_search"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "description": "A list of files attached to the message, and the tools they should be added to.",
                          "required": [
                            "file_id",
                            "tools"
                          ]
                        },
                        "metadata": {
                          "type": [
                            "object",
                            "null"
                          ],
                          "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "tool_resources": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                    "properties": {
                      "code_interpreter": {
                        "type": "object",
                        "properties": {
                          "file_ids": {
                            "type": "array",
                            "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                            "default": [],
                            "maxItems": 20,
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "file_search": {
                        "type": "object",
                        "properties": {
                          "vector_store_ids": {
                            "type": "array",
                            "description": "The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                            "maxItems": 1,
                            "items": {
                              "type": "string"
                            }
                          },
                          "vector_stores": {
                            "type": "array",
                            "description": "A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                            "maxItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "file_ids": {
                                  "type": "array",
                                  "description": "A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n",
                                  "maxItems": 10000,
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "chunking_strategy": {
                                  "type": "object",
                                  "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "title": "Auto Chunking Strategy",
                                      "description": "The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.",
                                      "additionalProperties": false,
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "Always `auto`.",
                                          "enum": [
                                            "auto"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "title": "Static Chunking Strategy",
                                      "additionalProperties": false,
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "Always `static`.",
                                          "enum": [
                                            "static"
                                          ]
                                        },
                                        "static": {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "max_chunk_size_tokens": {
                                              "type": "integer",
                                              "minimum": 100,
                                              "maximum": 4096,
                                              "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                                            },
                                            "chunk_overlap_tokens": {
                                              "type": "integer",
                                              "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                                            }
                                          },
                                          "required": [
                                            "max_chunk_size_tokens",
                                            "chunk_overlap_tokens"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "static"
                                      ]
                                    }
                                  ]
                                },
                                "metadata": {
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "oneOf": [
                          {
                            "required": [
                              "vector_store_ids"
                            ]
                          },
                          {
                            "required": [
                              "vector_stores"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "metadata": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_threads/output-200.schema.json",
            "type": "object",
            "title": "Thread",
            "description": "Represents a thread that contains [messages](/docs/api-reference/messages).",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `thread`.",
                "type": "string",
                "enum": [
                  "thread"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the thread was created.",
                "type": "integer"
              },
              "tool_resources": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                "properties": {
                  "code_interpreter": {
                    "type": "object",
                    "properties": {
                      "file_ids": {
                        "type": "array",
                        "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                        "default": [],
                        "maxItems": 20,
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "file_search": {
                    "type": "object",
                    "properties": {
                      "vector_store_ids": {
                        "type": "array",
                        "description": "The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                        "maxItems": 1,
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "tool_resources",
              "metadata"
            ]
          }
        ]
      }
    },
    {
      "id": "post_threads_runs",
      "operationId": "createThreadAndRun",
      "name": "Create Thread And Run",
      "description": "Create a thread and run it in one request.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_threads_runs/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/runs"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "assistant_id": {
                    "description": "The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.",
                    "type": "string"
                  },
                  "thread": {
                    "type": "object",
                    "description": "Options to create a new thread. If no thread is provided when running a \nrequest, an empty thread will be created.\n",
                    "additionalProperties": false,
                    "properties": {
                      "messages": {
                        "description": "A list of [messages](/docs/api-reference/messages) to start the thread with.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "role",
                            "content"
                          ],
                          "properties": {
                            "role": {
                              "type": "string",
                              "enum": [
                                "user",
                                "assistant"
                              ],
                              "description": "The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.\n"
                            },
                            "content": {
                              "oneOf": [
                                {
                                  "type": "string",
                                  "description": "The text contents of the message.",
                                  "title": "Text content"
                                },
                                {
                                  "type": "array",
                                  "description": "An array of content parts with a defined type, each can be of type `text` or images can be passed with `image_url` or `image_file`. Image types are only supported on [Vision-compatible models](/docs/models).",
                                  "title": "Array of content parts",
                                  "items": {
                                    "oneOf": [
                                      {
                                        "title": "Image file",
                                        "type": "object",
                                        "description": "References an image [File](/docs/api-reference/files) in the content of a message.",
                                        "properties": {
                                          "type": {
                                            "description": "Always `image_file`.",
                                            "type": "string",
                                            "enum": [
                                              "image_file"
                                            ]
                                          },
                                          "image_file": {
                                            "type": "object",
                                            "properties": {
                                              "file_id": {
                                                "description": "The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose=\"vision\"` when uploading the File if you need to later display the file content.",
                                                "type": "string"
                                              },
                                              "detail": {
                                                "type": "string",
                                                "description": "Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.",
                                                "enum": [
                                                  "auto",
                                                  "low",
                                                  "high"
                                                ],
                                                "default": "auto"
                                              }
                                            },
                                            "required": [
                                              "file_id"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "image_file"
                                        ]
                                      },
                                      {
                                        "title": "Image URL",
                                        "type": "object",
                                        "description": "References an image URL in the content of a message.",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "image_url"
                                            ],
                                            "description": "The type of the content part."
                                          },
                                          "image_url": {
                                            "type": "object",
                                            "properties": {
                                              "url": {
                                                "type": "string",
                                                "description": "The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.",
                                                "format": "uri"
                                              },
                                              "detail": {
                                                "type": "string",
                                                "description": "Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`",
                                                "enum": [
                                                  "auto",
                                                  "low",
                                                  "high"
                                                ],
                                                "default": "auto"
                                              }
                                            },
                                            "required": [
                                              "url"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "image_url"
                                        ]
                                      },
                                      {
                                        "title": "Text",
                                        "type": "object",
                                        "description": "The text content that is part of a message.",
                                        "properties": {
                                          "type": {
                                            "description": "Always `text`.",
                                            "type": "string",
                                            "enum": [
                                              "text"
                                            ]
                                          },
                                          "text": {
                                            "type": "string",
                                            "description": "Text content to be sent to the model"
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "text"
                                        ]
                                      }
                                    ]
                                  },
                                  "minItems": 1
                                }
                              ]
                            },
                            "attachments": {
                              "type": [
                                "array",
                                "null"
                              ],
                              "items": {
                                "type": "object",
                                "properties": {
                                  "file_id": {
                                    "type": "string",
                                    "description": "The ID of the file to attach to the message."
                                  },
                                  "tools": {
                                    "description": "The tools to add this file to.",
                                    "type": "array",
                                    "items": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "Code interpreter tool",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "description": "The type of tool being defined: `code_interpreter`",
                                              "enum": [
                                                "code_interpreter"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "type"
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "title": "FileSearch tool",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "description": "The type of tool being defined: `file_search`",
                                              "enum": [
                                                "file_search"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "type"
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                }
                              },
                              "description": "A list of files attached to the message, and the tools they should be added to.",
                              "required": [
                                "file_id",
                                "tools"
                              ]
                            },
                            "metadata": {
                              "type": [
                                "object",
                                "null"
                              ],
                              "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "tool_resources": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                        "properties": {
                          "code_interpreter": {
                            "type": "object",
                            "properties": {
                              "file_ids": {
                                "type": "array",
                                "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                                "default": [],
                                "maxItems": 20,
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "file_search": {
                            "type": "object",
                            "properties": {
                              "vector_store_ids": {
                                "type": "array",
                                "description": "The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                                "maxItems": 1,
                                "items": {
                                  "type": "string"
                                }
                              },
                              "vector_stores": {
                                "type": "array",
                                "description": "A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                                "maxItems": 1,
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "file_ids": {
                                      "type": "array",
                                      "description": "A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n",
                                      "maxItems": 10000,
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "chunking_strategy": {
                                      "type": "object",
                                      "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "Auto Chunking Strategy",
                                          "description": "The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.",
                                          "additionalProperties": false,
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "description": "Always `auto`.",
                                              "enum": [
                                                "auto"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "type"
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "title": "Static Chunking Strategy",
                                          "additionalProperties": false,
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "description": "Always `static`.",
                                              "enum": [
                                                "static"
                                              ]
                                            },
                                            "static": {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "properties": {
                                                "max_chunk_size_tokens": {
                                                  "type": "integer",
                                                  "minimum": 100,
                                                  "maximum": 4096,
                                                  "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                                                },
                                                "chunk_overlap_tokens": {
                                                  "type": "integer",
                                                  "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                                                }
                                              },
                                              "required": [
                                                "max_chunk_size_tokens",
                                                "chunk_overlap_tokens"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "static"
                                          ]
                                        }
                                      ]
                                    },
                                    "metadata": {
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "oneOf": [
                              {
                                "required": [
                                  "vector_store_ids"
                                ]
                              },
                              {
                                "required": [
                                  "vector_stores"
                                ]
                              }
                            ]
                          }
                        }
                      },
                      "metadata": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "model": {
                    "description": "The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.",
                    "example": "gpt-4o",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "gpt-4o",
                          "gpt-4o-2024-11-20",
                          "gpt-4o-2024-08-06",
                          "gpt-4o-2024-05-13",
                          "gpt-4o-mini",
                          "gpt-4o-mini-2024-07-18",
                          "gpt-4.5-preview",
                          "gpt-4.5-preview-2025-02-27",
                          "gpt-4-turbo",
                          "gpt-4-turbo-2024-04-09",
                          "gpt-4-0125-preview",
                          "gpt-4-turbo-preview",
                          "gpt-4-1106-preview",
                          "gpt-4-vision-preview",
                          "gpt-4",
                          "gpt-4-0314",
                          "gpt-4-0613",
                          "gpt-4-32k",
                          "gpt-4-32k-0314",
                          "gpt-4-32k-0613",
                          "gpt-3.5-turbo",
                          "gpt-3.5-turbo-16k",
                          "gpt-3.5-turbo-0613",
                          "gpt-3.5-turbo-1106",
                          "gpt-3.5-turbo-0125",
                          "gpt-3.5-turbo-16k-0613"
                        ]
                      }
                    ]
                  },
                  "instructions": {
                    "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "tools": {
                    "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "maxItems": 20,
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "title": "Code interpreter tool",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of tool being defined: `code_interpreter`",
                              "enum": [
                                "code_interpreter"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "FileSearch tool",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of tool being defined: `file_search`",
                              "enum": [
                                "file_search"
                              ]
                            },
                            "file_search": {
                              "type": "object",
                              "description": "Overrides for the file search tool.",
                              "properties": {
                                "max_num_results": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 50,
                                  "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                                },
                                "ranking_options": {
                                  "title": "File search tool call ranking options",
                                  "type": "object",
                                  "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                                  "properties": {
                                    "ranker": {
                                      "type": "string",
                                      "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                      "enum": [
                                        "auto",
                                        "default_2024_08_21"
                                      ]
                                    },
                                    "score_threshold": {
                                      "type": "number",
                                      "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                      "minimum": 0,
                                      "maximum": 1
                                    }
                                  },
                                  "required": [
                                    "score_threshold"
                                  ]
                                }
                              }
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "Function tool",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of tool being defined: `function`",
                              "enum": [
                                "function"
                              ]
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "description": "A description of what the function does, used by the model to choose when and how to call the function."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                                },
                                "parameters": {
                                  "type": "object",
                                  "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                                  "additionalProperties": true
                                },
                                "strict": {
                                  "type": [
                                    "boolean",
                                    "null"
                                  ],
                                  "default": false,
                                  "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "function"
                          ]
                        }
                      ]
                    }
                  },
                  "tool_resources": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                    "properties": {
                      "code_interpreter": {
                        "type": "object",
                        "properties": {
                          "file_ids": {
                            "type": "array",
                            "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                            "default": [],
                            "maxItems": 20,
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "file_search": {
                        "type": "object",
                        "properties": {
                          "vector_store_ids": {
                            "type": "array",
                            "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                            "maxItems": 1,
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "metadata": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "temperature": {
                    "type": [
                      "number",
                      "null"
                    ],
                    "minimum": 0,
                    "maximum": 2,
                    "default": 1,
                    "example": 1,
                    "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
                  },
                  "top_p": {
                    "type": [
                      "number",
                      "null"
                    ],
                    "minimum": 0,
                    "maximum": 1,
                    "default": 1,
                    "example": 1,
                    "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
                  },
                  "stream": {
                    "type": [
                      "boolean",
                      "null"
                    ],
                    "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n"
                  },
                  "max_prompt_tokens": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
                    "minimum": 256
                  },
                  "max_completion_tokens": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
                    "minimum": 256
                  },
                  "truncation_strategy": {
                    "allOf": [
                      {
                        "type": "object",
                        "title": "Thread Truncation Controls",
                        "description": "Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.",
                            "enum": [
                              "auto",
                              "last_messages"
                            ]
                          },
                          "last_messages": {
                            "type": [
                              "integer",
                              "null"
                            ],
                            "description": "The number of most recent messages from the thread when constructing the context for the run.",
                            "minimum": 1
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {}
                    ]
                  },
                  "tool_choice": {
                    "allOf": [
                      {
                        "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools before responding to the user.\nSpecifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n",
                        "oneOf": [
                          {
                            "type": "string",
                            "description": "`none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.\n",
                            "enum": [
                              "none",
                              "auto",
                              "required"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "Specifies a tool the model should use. Use to force the model to call a specific tool.",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "function",
                                  "code_interpreter",
                                  "file_search"
                                ],
                                "description": "The type of the tool. If type is `function`, the function name must be set"
                              },
                              "function": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the function to call."
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          }
                        ]
                      },
                      {}
                    ]
                  },
                  "parallel_tool_calls": {
                    "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
                    "type": "boolean",
                    "default": true
                  },
                  "response_format": {
                    "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "`auto` is the default value\n",
                        "enum": [
                          "auto"
                        ]
                      },
                      {
                        "type": "object",
                        "title": "Text",
                        "description": "Default response format. Used to generate text responses.\n",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of response format being defined. Always `text`.",
                            "enum": [
                              "text"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "type": "object",
                        "title": "JSON object",
                        "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of response format being defined. Always `json_object`.",
                            "enum": [
                              "json_object"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "type": "object",
                        "title": "JSON schema",
                        "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of response format being defined. Always `json_schema`.",
                            "enum": [
                              "json_schema"
                            ]
                          },
                          "json_schema": {
                            "type": "object",
                            "title": "JSON schema",
                            "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                            "properties": {
                              "description": {
                                "type": "string",
                                "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                              },
                              "schema": {
                                "type": "object",
                                "title": "JSON schema",
                                "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                                "additionalProperties": true
                              },
                              "strict": {
                                "type": [
                                  "boolean",
                                  "null"
                                ],
                                "default": false,
                                "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "json_schema"
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "assistant_id"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_threads_runs/output-200.schema.json",
            "type": "object",
            "title": "A run on a thread",
            "description": "Represents an execution run on a [thread](/docs/api-reference/threads).",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `thread.run`.",
                "type": "string",
                "enum": [
                  "thread.run"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the run was created.",
                "type": "integer"
              },
              "thread_id": {
                "description": "The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.",
                "type": "string"
              },
              "assistant_id": {
                "description": "The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.",
                "type": "string"
              },
              "status": {
                "description": "The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.",
                "type": "string",
                "enum": [
                  "queued",
                  "in_progress",
                  "requires_action",
                  "cancelling",
                  "cancelled",
                  "failed",
                  "completed",
                  "incomplete",
                  "expired"
                ]
              },
              "required_action": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Details on the action required to continue the run. Will be `null` if no action is required.",
                "properties": {
                  "type": {
                    "description": "For now, this is always `submit_tool_outputs`.",
                    "type": "string",
                    "enum": [
                      "submit_tool_outputs"
                    ]
                  },
                  "submit_tool_outputs": {
                    "type": "object",
                    "description": "Details on the tool outputs needed for this run to continue.",
                    "properties": {
                      "tool_calls": {
                        "type": "array",
                        "description": "A list of the relevant tool calls.",
                        "items": {
                          "type": "object",
                          "description": "Tool call objects",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint."
                            },
                            "type": {
                              "type": "string",
                              "description": "The type of tool call the output is required for. For now, this is always `function`.",
                              "enum": [
                                "function"
                              ]
                            },
                            "function": {
                              "type": "object",
                              "description": "The function definition.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the function."
                                },
                                "arguments": {
                                  "type": "string",
                                  "description": "The arguments that the model expects you to pass to the function."
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ]
                        }
                      }
                    },
                    "required": [
                      "tool_calls"
                    ]
                  }
                },
                "required": [
                  "type",
                  "submit_tool_outputs"
                ]
              },
              "last_error": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "The last error associated with this run. Will be `null` if there are no errors.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.",
                    "enum": [
                      "server_error",
                      "rate_limit_exceeded",
                      "invalid_prompt"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "A human-readable description of the error."
                  }
                },
                "required": [
                  "code",
                  "message"
                ]
              },
              "expires_at": {
                "description": "The Unix timestamp (in seconds) for when the run will expire.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "started_at": {
                "description": "The Unix timestamp (in seconds) for when the run was started.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "cancelled_at": {
                "description": "The Unix timestamp (in seconds) for when the run was cancelled.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "failed_at": {
                "description": "The Unix timestamp (in seconds) for when the run failed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "completed_at": {
                "description": "The Unix timestamp (in seconds) for when the run was completed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "incomplete_details": {
                "description": "Details on why the run is incomplete. Will be `null` if the run is not incomplete.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "reason": {
                    "description": "The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.",
                    "type": "string",
                    "enum": [
                      "max_completion_tokens",
                      "max_prompt_tokens"
                    ]
                  }
                }
              },
              "model": {
                "description": "The model that the [assistant](/docs/api-reference/assistants) used for this run.",
                "type": "string"
              },
              "instructions": {
                "description": "The instructions that the [assistant](/docs/api-reference/assistants) used for this run.",
                "type": "string"
              },
              "tools": {
                "description": "The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.",
                "default": [],
                "type": "array",
                "maxItems": 20,
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Code interpreter tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `code_interpreter`",
                          "enum": [
                            "code_interpreter"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "FileSearch tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `file_search`",
                          "enum": [
                            "file_search"
                          ]
                        },
                        "file_search": {
                          "type": "object",
                          "description": "Overrides for the file search tool.",
                          "properties": {
                            "max_num_results": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 50,
                              "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                            },
                            "ranking_options": {
                              "title": "File search tool call ranking options",
                              "type": "object",
                              "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                              "properties": {
                                "ranker": {
                                  "type": "string",
                                  "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                  "enum": [
                                    "auto",
                                    "default_2024_08_21"
                                  ]
                                },
                                "score_threshold": {
                                  "type": "number",
                                  "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                  "minimum": 0,
                                  "maximum": 1
                                }
                              },
                              "required": [
                                "score_threshold"
                              ]
                            }
                          }
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Function tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `function`",
                          "enum": [
                            "function"
                          ]
                        },
                        "function": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "description": "A description of what the function does, used by the model to choose when and how to call the function."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                            },
                            "parameters": {
                              "type": "object",
                              "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                              "additionalProperties": true
                            },
                            "strict": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "default": false,
                              "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "function"
                      ]
                    }
                  ]
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "usage": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
                "properties": {
                  "completion_tokens": {
                    "type": "integer",
                    "description": "Number of completion tokens used over the course of the run."
                  },
                  "prompt_tokens": {
                    "type": "integer",
                    "description": "Number of prompt tokens used over the course of the run."
                  },
                  "total_tokens": {
                    "type": "integer",
                    "description": "Total number of tokens used (prompt + completion)."
                  }
                },
                "required": [
                  "prompt_tokens",
                  "completion_tokens",
                  "total_tokens"
                ]
              },
              "temperature": {
                "description": "The sampling temperature used for this run. If not set, defaults to 1.",
                "type": [
                  "number",
                  "null"
                ]
              },
              "top_p": {
                "description": "The nucleus sampling value used for this run. If not set, defaults to 1.",
                "type": [
                  "number",
                  "null"
                ]
              },
              "max_prompt_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The maximum number of prompt tokens specified to have been used over the course of the run.\n",
                "minimum": 256
              },
              "max_completion_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The maximum number of completion tokens specified to have been used over the course of the run.\n",
                "minimum": 256
              },
              "truncation_strategy": {
                "allOf": [
                  {
                    "type": "object",
                    "title": "Thread Truncation Controls",
                    "description": "Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.",
                        "enum": [
                          "auto",
                          "last_messages"
                        ]
                      },
                      "last_messages": {
                        "type": [
                          "integer",
                          "null"
                        ],
                        "description": "The number of most recent messages from the thread when constructing the context for the run.",
                        "minimum": 1
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {}
                ]
              },
              "tool_choice": {
                "allOf": [
                  {
                    "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools before responding to the user.\nSpecifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "`none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.\n",
                        "enum": [
                          "none",
                          "auto",
                          "required"
                        ]
                      },
                      {
                        "type": "object",
                        "description": "Specifies a tool the model should use. Use to force the model to call a specific tool.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "function",
                              "code_interpreter",
                              "file_search"
                            ],
                            "description": "The type of the tool. If type is `function`, the function name must be set"
                          },
                          "function": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the function to call."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      }
                    ]
                  },
                  {}
                ]
              },
              "parallel_tool_calls": {
                "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
                "type": "boolean",
                "default": true
              },
              "response_format": {
                "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                "oneOf": [
                  {
                    "type": "string",
                    "description": "`auto` is the default value\n",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "Text",
                    "description": "Default response format. Used to generate text responses.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `text`.",
                        "enum": [
                          "text"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON object",
                    "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_object`.",
                        "enum": [
                          "json_object"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON schema",
                    "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_schema`.",
                        "enum": [
                          "json_schema"
                        ]
                      },
                      "json_schema": {
                        "type": "object",
                        "title": "JSON schema",
                        "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                        "properties": {
                          "description": {
                            "type": "string",
                            "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                          },
                          "schema": {
                            "type": "object",
                            "title": "JSON schema",
                            "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                            "additionalProperties": true
                          },
                          "strict": {
                            "type": [
                              "boolean",
                              "null"
                            ],
                            "default": false,
                            "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "json_schema"
                    ]
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "thread_id",
              "assistant_id",
              "status",
              "required_action",
              "last_error",
              "expires_at",
              "started_at",
              "cancelled_at",
              "failed_at",
              "completed_at",
              "model",
              "instructions",
              "tools",
              "metadata",
              "usage",
              "incomplete_details",
              "max_prompt_tokens",
              "max_completion_tokens",
              "truncation_strategy",
              "tool_choice",
              "parallel_tool_calls",
              "response_format"
            ]
          }
        ]
      }
    },
    {
      "id": "get_threads__thread_id_",
      "operationId": "getThread",
      "name": "Get Thread",
      "description": "Retrieves a thread.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_threads__thread_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the thread to retrieve."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_threads__thread_id_/output-200.schema.json",
            "type": "object",
            "title": "Thread",
            "description": "Represents a thread that contains [messages](/docs/api-reference/messages).",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `thread`.",
                "type": "string",
                "enum": [
                  "thread"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the thread was created.",
                "type": "integer"
              },
              "tool_resources": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                "properties": {
                  "code_interpreter": {
                    "type": "object",
                    "properties": {
                      "file_ids": {
                        "type": "array",
                        "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                        "default": [],
                        "maxItems": 20,
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "file_search": {
                    "type": "object",
                    "properties": {
                      "vector_store_ids": {
                        "type": "array",
                        "description": "The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                        "maxItems": 1,
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "tool_resources",
              "metadata"
            ]
          }
        ]
      }
    },
    {
      "id": "post_threads__thread_id_",
      "operationId": "modifyThread",
      "name": "Modify Thread",
      "description": "Modifies a thread.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_threads__thread_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the thread to modify. Only the `metadata` can be modified."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "tool_resources": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                    "properties": {
                      "code_interpreter": {
                        "type": "object",
                        "properties": {
                          "file_ids": {
                            "type": "array",
                            "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                            "default": [],
                            "maxItems": 20,
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "file_search": {
                        "type": "object",
                        "properties": {
                          "vector_store_ids": {
                            "type": "array",
                            "description": "The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                            "maxItems": 1,
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "metadata": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_threads__thread_id_/output-200.schema.json",
            "type": "object",
            "title": "Thread",
            "description": "Represents a thread that contains [messages](/docs/api-reference/messages).",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `thread`.",
                "type": "string",
                "enum": [
                  "thread"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the thread was created.",
                "type": "integer"
              },
              "tool_resources": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                "properties": {
                  "code_interpreter": {
                    "type": "object",
                    "properties": {
                      "file_ids": {
                        "type": "array",
                        "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                        "default": [],
                        "maxItems": 20,
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "file_search": {
                    "type": "object",
                    "properties": {
                      "vector_store_ids": {
                        "type": "array",
                        "description": "The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                        "maxItems": 1,
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "tool_resources",
              "metadata"
            ]
          }
        ]
      }
    },
    {
      "id": "delete_threads__thread_id_",
      "operationId": "deleteThread",
      "name": "Delete Thread",
      "description": "Delete a thread.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_threads__thread_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the thread to delete."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_threads__thread_id_/output-200.schema.json",
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              },
              "object": {
                "type": "string",
                "enum": [
                  "thread.deleted"
                ]
              }
            },
            "required": [
              "id",
              "object",
              "deleted"
            ]
          }
        ]
      }
    },
    {
      "id": "get_threads__thread_id__messages",
      "operationId": "listMessages",
      "name": "List Messages",
      "description": "Returns a list of messages for a given thread.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_threads__thread_id__messages/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}/messages"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                },
                "order": {
                  "type": "string",
                  "default": "desc",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                },
                "before": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
                },
                "run_id": {
                  "type": "string",
                  "description": "Filter messages by the run ID that generated them.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the [thread](/docs/api-reference/threads) the messages belong to."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_threads__thread_id__messages/output-200.schema.json",
            "type": "any",
            "properties": {
              "object": {
                "type": "string",
                "example": "list"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "The message object",
                  "description": "Represents a message within a [thread](/docs/api-reference/threads).",
                  "properties": {
                    "id": {
                      "description": "The identifier, which can be referenced in API endpoints.",
                      "type": "string"
                    },
                    "object": {
                      "description": "The object type, which is always `thread.message`.",
                      "type": "string",
                      "enum": [
                        "thread.message"
                      ]
                    },
                    "created_at": {
                      "description": "The Unix timestamp (in seconds) for when the message was created.",
                      "type": "integer"
                    },
                    "thread_id": {
                      "description": "The [thread](/docs/api-reference/threads) ID that this message belongs to.",
                      "type": "string"
                    },
                    "status": {
                      "description": "The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.",
                      "type": "string",
                      "enum": [
                        "in_progress",
                        "incomplete",
                        "completed"
                      ]
                    },
                    "incomplete_details": {
                      "description": "On an incomplete message, details about why the message is incomplete.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "reason": {
                          "type": "string",
                          "description": "The reason the message is incomplete.",
                          "enum": [
                            "content_filter",
                            "max_tokens",
                            "run_cancelled",
                            "run_expired",
                            "run_failed"
                          ]
                        }
                      },
                      "required": [
                        "reason"
                      ]
                    },
                    "completed_at": {
                      "description": "The Unix timestamp (in seconds) for when the message was completed.",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "incomplete_at": {
                      "description": "The Unix timestamp (in seconds) for when the message was marked as incomplete.",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "role": {
                      "description": "The entity that produced the message. One of `user` or `assistant`.",
                      "type": "string",
                      "enum": [
                        "user",
                        "assistant"
                      ]
                    },
                    "content": {
                      "description": "The content of the message in array of text and/or images.",
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "title": "Image file",
                            "type": "object",
                            "description": "References an image [File](/docs/api-reference/files) in the content of a message.",
                            "properties": {
                              "type": {
                                "description": "Always `image_file`.",
                                "type": "string",
                                "enum": [
                                  "image_file"
                                ]
                              },
                              "image_file": {
                                "type": "object",
                                "properties": {
                                  "file_id": {
                                    "description": "The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose=\"vision\"` when uploading the File if you need to later display the file content.",
                                    "type": "string"
                                  },
                                  "detail": {
                                    "type": "string",
                                    "description": "Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.",
                                    "enum": [
                                      "auto",
                                      "low",
                                      "high"
                                    ],
                                    "default": "auto"
                                  }
                                },
                                "required": [
                                  "file_id"
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "image_file"
                            ]
                          },
                          {
                            "title": "Image URL",
                            "type": "object",
                            "description": "References an image URL in the content of a message.",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "image_url"
                                ],
                                "description": "The type of the content part."
                              },
                              "image_url": {
                                "type": "object",
                                "properties": {
                                  "url": {
                                    "type": "string",
                                    "description": "The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.",
                                    "format": "uri"
                                  },
                                  "detail": {
                                    "type": "string",
                                    "description": "Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`",
                                    "enum": [
                                      "auto",
                                      "low",
                                      "high"
                                    ],
                                    "default": "auto"
                                  }
                                },
                                "required": [
                                  "url"
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "image_url"
                            ]
                          },
                          {
                            "title": "Text",
                            "type": "object",
                            "description": "The text content that is part of a message.",
                            "properties": {
                              "type": {
                                "description": "Always `text`.",
                                "type": "string",
                                "enum": [
                                  "text"
                                ]
                              },
                              "text": {
                                "type": "object",
                                "properties": {
                                  "value": {
                                    "description": "The data that makes up the text.",
                                    "type": "string"
                                  },
                                  "annotations": {
                                    "type": "array",
                                    "items": {
                                      "oneOf": [
                                        {
                                          "title": "File citation",
                                          "type": "object",
                                          "description": "A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"file_search\" tool to search files.",
                                          "properties": {
                                            "type": {
                                              "description": "Always `file_citation`.",
                                              "type": "string",
                                              "enum": [
                                                "file_citation"
                                              ]
                                            },
                                            "text": {
                                              "description": "The text in the message content that needs to be replaced.",
                                              "type": "string"
                                            },
                                            "file_citation": {
                                              "type": "object",
                                              "properties": {
                                                "file_id": {
                                                  "description": "The ID of the specific File the citation is from.",
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "file_id"
                                              ]
                                            },
                                            "start_index": {
                                              "type": "integer",
                                              "minimum": 0
                                            },
                                            "end_index": {
                                              "type": "integer",
                                              "minimum": 0
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "text",
                                            "file_citation",
                                            "start_index",
                                            "end_index"
                                          ]
                                        },
                                        {
                                          "title": "File path",
                                          "type": "object",
                                          "description": "A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.",
                                          "properties": {
                                            "type": {
                                              "description": "Always `file_path`.",
                                              "type": "string",
                                              "enum": [
                                                "file_path"
                                              ]
                                            },
                                            "text": {
                                              "description": "The text in the message content that needs to be replaced.",
                                              "type": "string"
                                            },
                                            "file_path": {
                                              "type": "object",
                                              "properties": {
                                                "file_id": {
                                                  "description": "The ID of the file that was generated.",
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "file_id"
                                              ]
                                            },
                                            "start_index": {
                                              "type": "integer",
                                              "minimum": 0
                                            },
                                            "end_index": {
                                              "type": "integer",
                                              "minimum": 0
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "text",
                                            "file_path",
                                            "start_index",
                                            "end_index"
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "value",
                                  "annotations"
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "text"
                            ]
                          },
                          {
                            "title": "Refusal",
                            "type": "object",
                            "description": "The refusal content generated by the assistant.",
                            "properties": {
                              "type": {
                                "description": "Always `refusal`.",
                                "type": "string",
                                "enum": [
                                  "refusal"
                                ]
                              },
                              "refusal": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "refusal"
                            ]
                          }
                        ]
                      }
                    },
                    "assistant_id": {
                      "description": "If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "run_id": {
                      "description": "The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "attachments": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "type": "object",
                        "properties": {
                          "file_id": {
                            "type": "string",
                            "description": "The ID of the file to attach to the message."
                          },
                          "tools": {
                            "description": "The tools to add this file to.",
                            "type": "array",
                            "items": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "Code interpreter tool",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "description": "The type of tool being defined: `code_interpreter`",
                                      "enum": [
                                        "code_interpreter"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "title": "FileSearch tool",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "description": "The type of tool being defined: `file_search`",
                                      "enum": [
                                        "file_search"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      },
                      "description": "A list of files attached to the message, and the tools they were added to."
                    },
                    "metadata": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "id",
                    "object",
                    "created_at",
                    "thread_id",
                    "status",
                    "incomplete_details",
                    "completed_at",
                    "incomplete_at",
                    "role",
                    "content",
                    "assistant_id",
                    "run_id",
                    "attachments",
                    "metadata"
                  ]
                }
              },
              "first_id": {
                "type": "string",
                "example": "msg_abc123"
              },
              "last_id": {
                "type": "string",
                "example": "msg_abc123"
              },
              "has_more": {
                "type": "boolean",
                "example": false
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "post_threads__thread_id__messages",
      "operationId": "createMessage",
      "name": "Create Message",
      "description": "Create a message.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_threads__thread_id__messages/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}/messages"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the [thread](/docs/api-reference/threads) to create a message for."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "role",
                  "content"
                ],
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "user",
                      "assistant"
                    ],
                    "description": "The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.\n"
                  },
                  "content": {
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "The text contents of the message.",
                        "title": "Text content"
                      },
                      {
                        "type": "array",
                        "description": "An array of content parts with a defined type, each can be of type `text` or images can be passed with `image_url` or `image_file`. Image types are only supported on [Vision-compatible models](/docs/models).",
                        "title": "Array of content parts",
                        "items": {
                          "oneOf": [
                            {
                              "title": "Image file",
                              "type": "object",
                              "description": "References an image [File](/docs/api-reference/files) in the content of a message.",
                              "properties": {
                                "type": {
                                  "description": "Always `image_file`.",
                                  "type": "string",
                                  "enum": [
                                    "image_file"
                                  ]
                                },
                                "image_file": {
                                  "type": "object",
                                  "properties": {
                                    "file_id": {
                                      "description": "The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose=\"vision\"` when uploading the File if you need to later display the file content.",
                                      "type": "string"
                                    },
                                    "detail": {
                                      "type": "string",
                                      "description": "Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.",
                                      "enum": [
                                        "auto",
                                        "low",
                                        "high"
                                      ],
                                      "default": "auto"
                                    }
                                  },
                                  "required": [
                                    "file_id"
                                  ]
                                }
                              },
                              "required": [
                                "type",
                                "image_file"
                              ]
                            },
                            {
                              "title": "Image URL",
                              "type": "object",
                              "description": "References an image URL in the content of a message.",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "image_url"
                                  ],
                                  "description": "The type of the content part."
                                },
                                "image_url": {
                                  "type": "object",
                                  "properties": {
                                    "url": {
                                      "type": "string",
                                      "description": "The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.",
                                      "format": "uri"
                                    },
                                    "detail": {
                                      "type": "string",
                                      "description": "Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`",
                                      "enum": [
                                        "auto",
                                        "low",
                                        "high"
                                      ],
                                      "default": "auto"
                                    }
                                  },
                                  "required": [
                                    "url"
                                  ]
                                }
                              },
                              "required": [
                                "type",
                                "image_url"
                              ]
                            },
                            {
                              "title": "Text",
                              "type": "object",
                              "description": "The text content that is part of a message.",
                              "properties": {
                                "type": {
                                  "description": "Always `text`.",
                                  "type": "string",
                                  "enum": [
                                    "text"
                                  ]
                                },
                                "text": {
                                  "type": "string",
                                  "description": "Text content to be sent to the model"
                                }
                              },
                              "required": [
                                "type",
                                "text"
                              ]
                            }
                          ]
                        },
                        "minItems": 1
                      }
                    ]
                  },
                  "attachments": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": "object",
                      "properties": {
                        "file_id": {
                          "type": "string",
                          "description": "The ID of the file to attach to the message."
                        },
                        "tools": {
                          "description": "The tools to add this file to.",
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "title": "Code interpreter tool",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "The type of tool being defined: `code_interpreter`",
                                    "enum": [
                                      "code_interpreter"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              {
                                "type": "object",
                                "title": "FileSearch tool",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "The type of tool being defined: `file_search`",
                                    "enum": [
                                      "file_search"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              }
                            ]
                          }
                        }
                      }
                    },
                    "description": "A list of files attached to the message, and the tools they should be added to.",
                    "required": [
                      "file_id",
                      "tools"
                    ]
                  },
                  "metadata": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_threads__thread_id__messages/output-200.schema.json",
            "type": "object",
            "title": "The message object",
            "description": "Represents a message within a [thread](/docs/api-reference/threads).",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `thread.message`.",
                "type": "string",
                "enum": [
                  "thread.message"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the message was created.",
                "type": "integer"
              },
              "thread_id": {
                "description": "The [thread](/docs/api-reference/threads) ID that this message belongs to.",
                "type": "string"
              },
              "status": {
                "description": "The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.",
                "type": "string",
                "enum": [
                  "in_progress",
                  "incomplete",
                  "completed"
                ]
              },
              "incomplete_details": {
                "description": "On an incomplete message, details about why the message is incomplete.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "The reason the message is incomplete.",
                    "enum": [
                      "content_filter",
                      "max_tokens",
                      "run_cancelled",
                      "run_expired",
                      "run_failed"
                    ]
                  }
                },
                "required": [
                  "reason"
                ]
              },
              "completed_at": {
                "description": "The Unix timestamp (in seconds) for when the message was completed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "incomplete_at": {
                "description": "The Unix timestamp (in seconds) for when the message was marked as incomplete.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "role": {
                "description": "The entity that produced the message. One of `user` or `assistant`.",
                "type": "string",
                "enum": [
                  "user",
                  "assistant"
                ]
              },
              "content": {
                "description": "The content of the message in array of text and/or images.",
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "title": "Image file",
                      "type": "object",
                      "description": "References an image [File](/docs/api-reference/files) in the content of a message.",
                      "properties": {
                        "type": {
                          "description": "Always `image_file`.",
                          "type": "string",
                          "enum": [
                            "image_file"
                          ]
                        },
                        "image_file": {
                          "type": "object",
                          "properties": {
                            "file_id": {
                              "description": "The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose=\"vision\"` when uploading the File if you need to later display the file content.",
                              "type": "string"
                            },
                            "detail": {
                              "type": "string",
                              "description": "Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.",
                              "enum": [
                                "auto",
                                "low",
                                "high"
                              ],
                              "default": "auto"
                            }
                          },
                          "required": [
                            "file_id"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "image_file"
                      ]
                    },
                    {
                      "title": "Image URL",
                      "type": "object",
                      "description": "References an image URL in the content of a message.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "image_url"
                          ],
                          "description": "The type of the content part."
                        },
                        "image_url": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "description": "The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.",
                              "format": "uri"
                            },
                            "detail": {
                              "type": "string",
                              "description": "Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`",
                              "enum": [
                                "auto",
                                "low",
                                "high"
                              ],
                              "default": "auto"
                            }
                          },
                          "required": [
                            "url"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "image_url"
                      ]
                    },
                    {
                      "title": "Text",
                      "type": "object",
                      "description": "The text content that is part of a message.",
                      "properties": {
                        "type": {
                          "description": "Always `text`.",
                          "type": "string",
                          "enum": [
                            "text"
                          ]
                        },
                        "text": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "description": "The data that makes up the text.",
                              "type": "string"
                            },
                            "annotations": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "title": "File citation",
                                    "type": "object",
                                    "description": "A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"file_search\" tool to search files.",
                                    "properties": {
                                      "type": {
                                        "description": "Always `file_citation`.",
                                        "type": "string",
                                        "enum": [
                                          "file_citation"
                                        ]
                                      },
                                      "text": {
                                        "description": "The text in the message content that needs to be replaced.",
                                        "type": "string"
                                      },
                                      "file_citation": {
                                        "type": "object",
                                        "properties": {
                                          "file_id": {
                                            "description": "The ID of the specific File the citation is from.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "file_id"
                                        ]
                                      },
                                      "start_index": {
                                        "type": "integer",
                                        "minimum": 0
                                      },
                                      "end_index": {
                                        "type": "integer",
                                        "minimum": 0
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "text",
                                      "file_citation",
                                      "start_index",
                                      "end_index"
                                    ]
                                  },
                                  {
                                    "title": "File path",
                                    "type": "object",
                                    "description": "A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.",
                                    "properties": {
                                      "type": {
                                        "description": "Always `file_path`.",
                                        "type": "string",
                                        "enum": [
                                          "file_path"
                                        ]
                                      },
                                      "text": {
                                        "description": "The text in the message content that needs to be replaced.",
                                        "type": "string"
                                      },
                                      "file_path": {
                                        "type": "object",
                                        "properties": {
                                          "file_id": {
                                            "description": "The ID of the file that was generated.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "file_id"
                                        ]
                                      },
                                      "start_index": {
                                        "type": "integer",
                                        "minimum": 0
                                      },
                                      "end_index": {
                                        "type": "integer",
                                        "minimum": 0
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "text",
                                      "file_path",
                                      "start_index",
                                      "end_index"
                                    ]
                                  }
                                ]
                              }
                            }
                          },
                          "required": [
                            "value",
                            "annotations"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "text"
                      ]
                    },
                    {
                      "title": "Refusal",
                      "type": "object",
                      "description": "The refusal content generated by the assistant.",
                      "properties": {
                        "type": {
                          "description": "Always `refusal`.",
                          "type": "string",
                          "enum": [
                            "refusal"
                          ]
                        },
                        "refusal": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "refusal"
                      ]
                    }
                  ]
                }
              },
              "assistant_id": {
                "description": "If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "run_id": {
                "description": "The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "attachments": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "file_id": {
                      "type": "string",
                      "description": "The ID of the file to attach to the message."
                    },
                    "tools": {
                      "description": "The tools to add this file to.",
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "Code interpreter tool",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of tool being defined: `code_interpreter`",
                                "enum": [
                                  "code_interpreter"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          },
                          {
                            "type": "object",
                            "title": "FileSearch tool",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of tool being defined: `file_search`",
                                "enum": [
                                  "file_search"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          }
                        ]
                      }
                    }
                  }
                },
                "description": "A list of files attached to the message, and the tools they were added to."
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "thread_id",
              "status",
              "incomplete_details",
              "completed_at",
              "incomplete_at",
              "role",
              "content",
              "assistant_id",
              "run_id",
              "attachments",
              "metadata"
            ]
          }
        ]
      }
    },
    {
      "id": "get_threads__thread_id__messages__message_id_",
      "operationId": "getMessage",
      "name": "Get Message",
      "description": "Retrieve a message.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_threads__thread_id__messages__message_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}/messages/{message_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id",
                "message_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the [thread](/docs/api-reference/threads) to which this message belongs."
                },
                "message_id": {
                  "type": "string",
                  "description": "The ID of the message to retrieve."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_threads__thread_id__messages__message_id_/output-200.schema.json",
            "type": "object",
            "title": "The message object",
            "description": "Represents a message within a [thread](/docs/api-reference/threads).",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `thread.message`.",
                "type": "string",
                "enum": [
                  "thread.message"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the message was created.",
                "type": "integer"
              },
              "thread_id": {
                "description": "The [thread](/docs/api-reference/threads) ID that this message belongs to.",
                "type": "string"
              },
              "status": {
                "description": "The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.",
                "type": "string",
                "enum": [
                  "in_progress",
                  "incomplete",
                  "completed"
                ]
              },
              "incomplete_details": {
                "description": "On an incomplete message, details about why the message is incomplete.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "The reason the message is incomplete.",
                    "enum": [
                      "content_filter",
                      "max_tokens",
                      "run_cancelled",
                      "run_expired",
                      "run_failed"
                    ]
                  }
                },
                "required": [
                  "reason"
                ]
              },
              "completed_at": {
                "description": "The Unix timestamp (in seconds) for when the message was completed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "incomplete_at": {
                "description": "The Unix timestamp (in seconds) for when the message was marked as incomplete.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "role": {
                "description": "The entity that produced the message. One of `user` or `assistant`.",
                "type": "string",
                "enum": [
                  "user",
                  "assistant"
                ]
              },
              "content": {
                "description": "The content of the message in array of text and/or images.",
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "title": "Image file",
                      "type": "object",
                      "description": "References an image [File](/docs/api-reference/files) in the content of a message.",
                      "properties": {
                        "type": {
                          "description": "Always `image_file`.",
                          "type": "string",
                          "enum": [
                            "image_file"
                          ]
                        },
                        "image_file": {
                          "type": "object",
                          "properties": {
                            "file_id": {
                              "description": "The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose=\"vision\"` when uploading the File if you need to later display the file content.",
                              "type": "string"
                            },
                            "detail": {
                              "type": "string",
                              "description": "Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.",
                              "enum": [
                                "auto",
                                "low",
                                "high"
                              ],
                              "default": "auto"
                            }
                          },
                          "required": [
                            "file_id"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "image_file"
                      ]
                    },
                    {
                      "title": "Image URL",
                      "type": "object",
                      "description": "References an image URL in the content of a message.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "image_url"
                          ],
                          "description": "The type of the content part."
                        },
                        "image_url": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "description": "The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.",
                              "format": "uri"
                            },
                            "detail": {
                              "type": "string",
                              "description": "Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`",
                              "enum": [
                                "auto",
                                "low",
                                "high"
                              ],
                              "default": "auto"
                            }
                          },
                          "required": [
                            "url"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "image_url"
                      ]
                    },
                    {
                      "title": "Text",
                      "type": "object",
                      "description": "The text content that is part of a message.",
                      "properties": {
                        "type": {
                          "description": "Always `text`.",
                          "type": "string",
                          "enum": [
                            "text"
                          ]
                        },
                        "text": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "description": "The data that makes up the text.",
                              "type": "string"
                            },
                            "annotations": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "title": "File citation",
                                    "type": "object",
                                    "description": "A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"file_search\" tool to search files.",
                                    "properties": {
                                      "type": {
                                        "description": "Always `file_citation`.",
                                        "type": "string",
                                        "enum": [
                                          "file_citation"
                                        ]
                                      },
                                      "text": {
                                        "description": "The text in the message content that needs to be replaced.",
                                        "type": "string"
                                      },
                                      "file_citation": {
                                        "type": "object",
                                        "properties": {
                                          "file_id": {
                                            "description": "The ID of the specific File the citation is from.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "file_id"
                                        ]
                                      },
                                      "start_index": {
                                        "type": "integer",
                                        "minimum": 0
                                      },
                                      "end_index": {
                                        "type": "integer",
                                        "minimum": 0
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "text",
                                      "file_citation",
                                      "start_index",
                                      "end_index"
                                    ]
                                  },
                                  {
                                    "title": "File path",
                                    "type": "object",
                                    "description": "A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.",
                                    "properties": {
                                      "type": {
                                        "description": "Always `file_path`.",
                                        "type": "string",
                                        "enum": [
                                          "file_path"
                                        ]
                                      },
                                      "text": {
                                        "description": "The text in the message content that needs to be replaced.",
                                        "type": "string"
                                      },
                                      "file_path": {
                                        "type": "object",
                                        "properties": {
                                          "file_id": {
                                            "description": "The ID of the file that was generated.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "file_id"
                                        ]
                                      },
                                      "start_index": {
                                        "type": "integer",
                                        "minimum": 0
                                      },
                                      "end_index": {
                                        "type": "integer",
                                        "minimum": 0
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "text",
                                      "file_path",
                                      "start_index",
                                      "end_index"
                                    ]
                                  }
                                ]
                              }
                            }
                          },
                          "required": [
                            "value",
                            "annotations"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "text"
                      ]
                    },
                    {
                      "title": "Refusal",
                      "type": "object",
                      "description": "The refusal content generated by the assistant.",
                      "properties": {
                        "type": {
                          "description": "Always `refusal`.",
                          "type": "string",
                          "enum": [
                            "refusal"
                          ]
                        },
                        "refusal": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "refusal"
                      ]
                    }
                  ]
                }
              },
              "assistant_id": {
                "description": "If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "run_id": {
                "description": "The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "attachments": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "file_id": {
                      "type": "string",
                      "description": "The ID of the file to attach to the message."
                    },
                    "tools": {
                      "description": "The tools to add this file to.",
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "Code interpreter tool",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of tool being defined: `code_interpreter`",
                                "enum": [
                                  "code_interpreter"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          },
                          {
                            "type": "object",
                            "title": "FileSearch tool",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of tool being defined: `file_search`",
                                "enum": [
                                  "file_search"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          }
                        ]
                      }
                    }
                  }
                },
                "description": "A list of files attached to the message, and the tools they were added to."
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "thread_id",
              "status",
              "incomplete_details",
              "completed_at",
              "incomplete_at",
              "role",
              "content",
              "assistant_id",
              "run_id",
              "attachments",
              "metadata"
            ]
          }
        ]
      }
    },
    {
      "id": "post_threads__thread_id__messages__message_id_",
      "operationId": "modifyMessage",
      "name": "Modify Message",
      "description": "Modifies a message.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_threads__thread_id__messages__message_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}/messages/{message_id}"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id",
                "message_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the thread to which this message belongs."
                },
                "message_id": {
                  "type": "string",
                  "description": "The ID of the message to modify."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "metadata": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_threads__thread_id__messages__message_id_/output-200.schema.json",
            "type": "object",
            "title": "The message object",
            "description": "Represents a message within a [thread](/docs/api-reference/threads).",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `thread.message`.",
                "type": "string",
                "enum": [
                  "thread.message"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the message was created.",
                "type": "integer"
              },
              "thread_id": {
                "description": "The [thread](/docs/api-reference/threads) ID that this message belongs to.",
                "type": "string"
              },
              "status": {
                "description": "The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.",
                "type": "string",
                "enum": [
                  "in_progress",
                  "incomplete",
                  "completed"
                ]
              },
              "incomplete_details": {
                "description": "On an incomplete message, details about why the message is incomplete.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "The reason the message is incomplete.",
                    "enum": [
                      "content_filter",
                      "max_tokens",
                      "run_cancelled",
                      "run_expired",
                      "run_failed"
                    ]
                  }
                },
                "required": [
                  "reason"
                ]
              },
              "completed_at": {
                "description": "The Unix timestamp (in seconds) for when the message was completed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "incomplete_at": {
                "description": "The Unix timestamp (in seconds) for when the message was marked as incomplete.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "role": {
                "description": "The entity that produced the message. One of `user` or `assistant`.",
                "type": "string",
                "enum": [
                  "user",
                  "assistant"
                ]
              },
              "content": {
                "description": "The content of the message in array of text and/or images.",
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "title": "Image file",
                      "type": "object",
                      "description": "References an image [File](/docs/api-reference/files) in the content of a message.",
                      "properties": {
                        "type": {
                          "description": "Always `image_file`.",
                          "type": "string",
                          "enum": [
                            "image_file"
                          ]
                        },
                        "image_file": {
                          "type": "object",
                          "properties": {
                            "file_id": {
                              "description": "The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose=\"vision\"` when uploading the File if you need to later display the file content.",
                              "type": "string"
                            },
                            "detail": {
                              "type": "string",
                              "description": "Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.",
                              "enum": [
                                "auto",
                                "low",
                                "high"
                              ],
                              "default": "auto"
                            }
                          },
                          "required": [
                            "file_id"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "image_file"
                      ]
                    },
                    {
                      "title": "Image URL",
                      "type": "object",
                      "description": "References an image URL in the content of a message.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "image_url"
                          ],
                          "description": "The type of the content part."
                        },
                        "image_url": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "description": "The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.",
                              "format": "uri"
                            },
                            "detail": {
                              "type": "string",
                              "description": "Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`",
                              "enum": [
                                "auto",
                                "low",
                                "high"
                              ],
                              "default": "auto"
                            }
                          },
                          "required": [
                            "url"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "image_url"
                      ]
                    },
                    {
                      "title": "Text",
                      "type": "object",
                      "description": "The text content that is part of a message.",
                      "properties": {
                        "type": {
                          "description": "Always `text`.",
                          "type": "string",
                          "enum": [
                            "text"
                          ]
                        },
                        "text": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "description": "The data that makes up the text.",
                              "type": "string"
                            },
                            "annotations": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "title": "File citation",
                                    "type": "object",
                                    "description": "A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"file_search\" tool to search files.",
                                    "properties": {
                                      "type": {
                                        "description": "Always `file_citation`.",
                                        "type": "string",
                                        "enum": [
                                          "file_citation"
                                        ]
                                      },
                                      "text": {
                                        "description": "The text in the message content that needs to be replaced.",
                                        "type": "string"
                                      },
                                      "file_citation": {
                                        "type": "object",
                                        "properties": {
                                          "file_id": {
                                            "description": "The ID of the specific File the citation is from.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "file_id"
                                        ]
                                      },
                                      "start_index": {
                                        "type": "integer",
                                        "minimum": 0
                                      },
                                      "end_index": {
                                        "type": "integer",
                                        "minimum": 0
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "text",
                                      "file_citation",
                                      "start_index",
                                      "end_index"
                                    ]
                                  },
                                  {
                                    "title": "File path",
                                    "type": "object",
                                    "description": "A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.",
                                    "properties": {
                                      "type": {
                                        "description": "Always `file_path`.",
                                        "type": "string",
                                        "enum": [
                                          "file_path"
                                        ]
                                      },
                                      "text": {
                                        "description": "The text in the message content that needs to be replaced.",
                                        "type": "string"
                                      },
                                      "file_path": {
                                        "type": "object",
                                        "properties": {
                                          "file_id": {
                                            "description": "The ID of the file that was generated.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "file_id"
                                        ]
                                      },
                                      "start_index": {
                                        "type": "integer",
                                        "minimum": 0
                                      },
                                      "end_index": {
                                        "type": "integer",
                                        "minimum": 0
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "text",
                                      "file_path",
                                      "start_index",
                                      "end_index"
                                    ]
                                  }
                                ]
                              }
                            }
                          },
                          "required": [
                            "value",
                            "annotations"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "text"
                      ]
                    },
                    {
                      "title": "Refusal",
                      "type": "object",
                      "description": "The refusal content generated by the assistant.",
                      "properties": {
                        "type": {
                          "description": "Always `refusal`.",
                          "type": "string",
                          "enum": [
                            "refusal"
                          ]
                        },
                        "refusal": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "refusal"
                      ]
                    }
                  ]
                }
              },
              "assistant_id": {
                "description": "If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "run_id": {
                "description": "The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "attachments": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "file_id": {
                      "type": "string",
                      "description": "The ID of the file to attach to the message."
                    },
                    "tools": {
                      "description": "The tools to add this file to.",
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "Code interpreter tool",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of tool being defined: `code_interpreter`",
                                "enum": [
                                  "code_interpreter"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          },
                          {
                            "type": "object",
                            "title": "FileSearch tool",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of tool being defined: `file_search`",
                                "enum": [
                                  "file_search"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          }
                        ]
                      }
                    }
                  }
                },
                "description": "A list of files attached to the message, and the tools they were added to."
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "thread_id",
              "status",
              "incomplete_details",
              "completed_at",
              "incomplete_at",
              "role",
              "content",
              "assistant_id",
              "run_id",
              "attachments",
              "metadata"
            ]
          }
        ]
      }
    },
    {
      "id": "delete_threads__thread_id__messages__message_id_",
      "operationId": "deleteMessage",
      "name": "Delete Message",
      "description": "Deletes a message.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_threads__thread_id__messages__message_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}/messages/{message_id}"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id",
                "message_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the thread to which this message belongs."
                },
                "message_id": {
                  "type": "string",
                  "description": "The ID of the message to delete."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_threads__thread_id__messages__message_id_/output-200.schema.json",
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              },
              "object": {
                "type": "string",
                "enum": [
                  "thread.message.deleted"
                ]
              }
            },
            "required": [
              "id",
              "object",
              "deleted"
            ]
          }
        ]
      }
    },
    {
      "id": "get_threads__thread_id__runs",
      "operationId": "listRuns",
      "name": "List Runs",
      "description": "Returns a list of runs belonging to a thread.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_threads__thread_id__runs/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}/runs"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                },
                "order": {
                  "type": "string",
                  "default": "desc",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                },
                "before": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the thread the run belongs to."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_threads__thread_id__runs/output-200.schema.json",
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "example": "list"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "A run on a thread",
                  "description": "Represents an execution run on a [thread](/docs/api-reference/threads).",
                  "properties": {
                    "id": {
                      "description": "The identifier, which can be referenced in API endpoints.",
                      "type": "string"
                    },
                    "object": {
                      "description": "The object type, which is always `thread.run`.",
                      "type": "string",
                      "enum": [
                        "thread.run"
                      ]
                    },
                    "created_at": {
                      "description": "The Unix timestamp (in seconds) for when the run was created.",
                      "type": "integer"
                    },
                    "thread_id": {
                      "description": "The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.",
                      "type": "string"
                    },
                    "assistant_id": {
                      "description": "The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.",
                      "type": "string"
                    },
                    "status": {
                      "description": "The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.",
                      "type": "string",
                      "enum": [
                        "queued",
                        "in_progress",
                        "requires_action",
                        "cancelling",
                        "cancelled",
                        "failed",
                        "completed",
                        "incomplete",
                        "expired"
                      ]
                    },
                    "required_action": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "Details on the action required to continue the run. Will be `null` if no action is required.",
                      "properties": {
                        "type": {
                          "description": "For now, this is always `submit_tool_outputs`.",
                          "type": "string",
                          "enum": [
                            "submit_tool_outputs"
                          ]
                        },
                        "submit_tool_outputs": {
                          "type": "object",
                          "description": "Details on the tool outputs needed for this run to continue.",
                          "properties": {
                            "tool_calls": {
                              "type": "array",
                              "description": "A list of the relevant tool calls.",
                              "items": {
                                "type": "object",
                                "description": "Tool call objects",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint."
                                  },
                                  "type": {
                                    "type": "string",
                                    "description": "The type of tool call the output is required for. For now, this is always `function`.",
                                    "enum": [
                                      "function"
                                    ]
                                  },
                                  "function": {
                                    "type": "object",
                                    "description": "The function definition.",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the function."
                                      },
                                      "arguments": {
                                        "type": "string",
                                        "description": "The arguments that the model expects you to pass to the function."
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "arguments"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type",
                                  "function"
                                ]
                              }
                            }
                          },
                          "required": [
                            "tool_calls"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "submit_tool_outputs"
                      ]
                    },
                    "last_error": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "The last error associated with this run. Will be `null` if there are no errors.",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.",
                          "enum": [
                            "server_error",
                            "rate_limit_exceeded",
                            "invalid_prompt"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "description": "A human-readable description of the error."
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ]
                    },
                    "expires_at": {
                      "description": "The Unix timestamp (in seconds) for when the run will expire.",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "started_at": {
                      "description": "The Unix timestamp (in seconds) for when the run was started.",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "cancelled_at": {
                      "description": "The Unix timestamp (in seconds) for when the run was cancelled.",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "failed_at": {
                      "description": "The Unix timestamp (in seconds) for when the run failed.",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "completed_at": {
                      "description": "The Unix timestamp (in seconds) for when the run was completed.",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "incomplete_details": {
                      "description": "Details on why the run is incomplete. Will be `null` if the run is not incomplete.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "reason": {
                          "description": "The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.",
                          "type": "string",
                          "enum": [
                            "max_completion_tokens",
                            "max_prompt_tokens"
                          ]
                        }
                      }
                    },
                    "model": {
                      "description": "The model that the [assistant](/docs/api-reference/assistants) used for this run.",
                      "type": "string"
                    },
                    "instructions": {
                      "description": "The instructions that the [assistant](/docs/api-reference/assistants) used for this run.",
                      "type": "string"
                    },
                    "tools": {
                      "description": "The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.",
                      "default": [],
                      "type": "array",
                      "maxItems": 20,
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "Code interpreter tool",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of tool being defined: `code_interpreter`",
                                "enum": [
                                  "code_interpreter"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          },
                          {
                            "type": "object",
                            "title": "FileSearch tool",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of tool being defined: `file_search`",
                                "enum": [
                                  "file_search"
                                ]
                              },
                              "file_search": {
                                "type": "object",
                                "description": "Overrides for the file search tool.",
                                "properties": {
                                  "max_num_results": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 50,
                                    "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                                  },
                                  "ranking_options": {
                                    "title": "File search tool call ranking options",
                                    "type": "object",
                                    "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                                    "properties": {
                                      "ranker": {
                                        "type": "string",
                                        "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                        "enum": [
                                          "auto",
                                          "default_2024_08_21"
                                        ]
                                      },
                                      "score_threshold": {
                                        "type": "number",
                                        "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                        "minimum": 0,
                                        "maximum": 1
                                      }
                                    },
                                    "required": [
                                      "score_threshold"
                                    ]
                                  }
                                }
                              }
                            },
                            "required": [
                              "type"
                            ]
                          },
                          {
                            "type": "object",
                            "title": "Function tool",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of tool being defined: `function`",
                                "enum": [
                                  "function"
                                ]
                              },
                              "function": {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string",
                                    "description": "A description of what the function does, used by the model to choose when and how to call the function."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                                    "additionalProperties": true
                                  },
                                  "strict": {
                                    "type": [
                                      "boolean",
                                      "null"
                                    ],
                                    "default": false,
                                    "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "function"
                            ]
                          }
                        ]
                      }
                    },
                    "metadata": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "usage": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
                      "properties": {
                        "completion_tokens": {
                          "type": "integer",
                          "description": "Number of completion tokens used over the course of the run."
                        },
                        "prompt_tokens": {
                          "type": "integer",
                          "description": "Number of prompt tokens used over the course of the run."
                        },
                        "total_tokens": {
                          "type": "integer",
                          "description": "Total number of tokens used (prompt + completion)."
                        }
                      },
                      "required": [
                        "prompt_tokens",
                        "completion_tokens",
                        "total_tokens"
                      ]
                    },
                    "temperature": {
                      "description": "The sampling temperature used for this run. If not set, defaults to 1.",
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "top_p": {
                      "description": "The nucleus sampling value used for this run. If not set, defaults to 1.",
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "max_prompt_tokens": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "description": "The maximum number of prompt tokens specified to have been used over the course of the run.\n",
                      "minimum": 256
                    },
                    "max_completion_tokens": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "description": "The maximum number of completion tokens specified to have been used over the course of the run.\n",
                      "minimum": 256
                    },
                    "truncation_strategy": {
                      "allOf": [
                        {
                          "type": "object",
                          "title": "Thread Truncation Controls",
                          "description": "Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.",
                              "enum": [
                                "auto",
                                "last_messages"
                              ]
                            },
                            "last_messages": {
                              "type": [
                                "integer",
                                "null"
                              ],
                              "description": "The number of most recent messages from the thread when constructing the context for the run.",
                              "minimum": 1
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {}
                      ]
                    },
                    "tool_choice": {
                      "allOf": [
                        {
                          "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools before responding to the user.\nSpecifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n",
                          "oneOf": [
                            {
                              "type": "string",
                              "description": "`none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.\n",
                              "enum": [
                                "none",
                                "auto",
                                "required"
                              ]
                            },
                            {
                              "type": "object",
                              "description": "Specifies a tool the model should use. Use to force the model to call a specific tool.",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "function",
                                    "code_interpreter",
                                    "file_search"
                                  ],
                                  "description": "The type of the tool. If type is `function`, the function name must be set"
                                },
                                "function": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the function to call."
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          ]
                        },
                        {}
                      ]
                    },
                    "parallel_tool_calls": {
                      "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
                      "type": "boolean",
                      "default": true
                    },
                    "response_format": {
                      "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "`auto` is the default value\n",
                          "enum": [
                            "auto"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "Text",
                          "description": "Default response format. Used to generate text responses.\n",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of response format being defined. Always `text`.",
                              "enum": [
                                "text"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "JSON object",
                          "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of response format being defined. Always `json_object`.",
                              "enum": [
                                "json_object"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "JSON schema",
                          "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of response format being defined. Always `json_schema`.",
                              "enum": [
                                "json_schema"
                              ]
                            },
                            "json_schema": {
                              "type": "object",
                              "title": "JSON schema",
                              "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                                },
                                "schema": {
                                  "type": "object",
                                  "title": "JSON schema",
                                  "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                                  "additionalProperties": true
                                },
                                "strict": {
                                  "type": [
                                    "boolean",
                                    "null"
                                  ],
                                  "default": false,
                                  "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "json_schema"
                          ]
                        },
                        {
                          "type": "null"
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "object",
                    "created_at",
                    "thread_id",
                    "assistant_id",
                    "status",
                    "required_action",
                    "last_error",
                    "expires_at",
                    "started_at",
                    "cancelled_at",
                    "failed_at",
                    "completed_at",
                    "model",
                    "instructions",
                    "tools",
                    "metadata",
                    "usage",
                    "incomplete_details",
                    "max_prompt_tokens",
                    "max_completion_tokens",
                    "truncation_strategy",
                    "tool_choice",
                    "parallel_tool_calls",
                    "response_format"
                  ]
                }
              },
              "first_id": {
                "type": "string",
                "example": "run_abc123"
              },
              "last_id": {
                "type": "string",
                "example": "run_abc456"
              },
              "has_more": {
                "type": "boolean",
                "example": false
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "post_threads__thread_id__runs",
      "operationId": "createRun",
      "name": "Create Run",
      "description": "Create a run.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_threads__thread_id__runs/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}/runs"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "include[]": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "step_details.tool_calls[*].file_search.results[*].content"
                    ]
                  },
                  "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the thread to run."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "assistant_id": {
                    "description": "The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.",
                    "type": "string"
                  },
                  "model": {
                    "description": "The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.",
                    "example": "gpt-4o",
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "o3-mini",
                          "o3-mini-2025-01-31",
                          "o1",
                          "o1-2024-12-17",
                          "gpt-4o",
                          "gpt-4o-2024-11-20",
                          "gpt-4o-2024-08-06",
                          "gpt-4o-2024-05-13",
                          "gpt-4o-mini",
                          "gpt-4o-mini-2024-07-18",
                          "gpt-4.5-preview",
                          "gpt-4.5-preview-2025-02-27",
                          "gpt-4-turbo",
                          "gpt-4-turbo-2024-04-09",
                          "gpt-4-0125-preview",
                          "gpt-4-turbo-preview",
                          "gpt-4-1106-preview",
                          "gpt-4-vision-preview",
                          "gpt-4",
                          "gpt-4-0314",
                          "gpt-4-0613",
                          "gpt-4-32k",
                          "gpt-4-32k-0314",
                          "gpt-4-32k-0613",
                          "gpt-3.5-turbo",
                          "gpt-3.5-turbo-16k",
                          "gpt-3.5-turbo-0613",
                          "gpt-3.5-turbo-1106",
                          "gpt-3.5-turbo-0125",
                          "gpt-3.5-turbo-16k-0613"
                        ]
                      }
                    ]
                  },
                  "reasoning_effort": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "low",
                      "medium",
                      "high"
                    ],
                    "default": "medium",
                    "description": "**o-series models only** \n\nConstrains effort on reasoning for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n"
                  },
                  "instructions": {
                    "description": "Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "additional_instructions": {
                    "description": "Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "additional_messages": {
                    "description": "Adds additional messages to the thread before creating the run.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "role",
                        "content"
                      ],
                      "properties": {
                        "role": {
                          "type": "string",
                          "enum": [
                            "user",
                            "assistant"
                          ],
                          "description": "The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.\n"
                        },
                        "content": {
                          "oneOf": [
                            {
                              "type": "string",
                              "description": "The text contents of the message.",
                              "title": "Text content"
                            },
                            {
                              "type": "array",
                              "description": "An array of content parts with a defined type, each can be of type `text` or images can be passed with `image_url` or `image_file`. Image types are only supported on [Vision-compatible models](/docs/models).",
                              "title": "Array of content parts",
                              "items": {
                                "oneOf": [
                                  {
                                    "title": "Image file",
                                    "type": "object",
                                    "description": "References an image [File](/docs/api-reference/files) in the content of a message.",
                                    "properties": {
                                      "type": {
                                        "description": "Always `image_file`.",
                                        "type": "string",
                                        "enum": [
                                          "image_file"
                                        ]
                                      },
                                      "image_file": {
                                        "type": "object",
                                        "properties": {
                                          "file_id": {
                                            "description": "The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose=\"vision\"` when uploading the File if you need to later display the file content.",
                                            "type": "string"
                                          },
                                          "detail": {
                                            "type": "string",
                                            "description": "Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.",
                                            "enum": [
                                              "auto",
                                              "low",
                                              "high"
                                            ],
                                            "default": "auto"
                                          }
                                        },
                                        "required": [
                                          "file_id"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "image_file"
                                    ]
                                  },
                                  {
                                    "title": "Image URL",
                                    "type": "object",
                                    "description": "References an image URL in the content of a message.",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "image_url"
                                        ],
                                        "description": "The type of the content part."
                                      },
                                      "image_url": {
                                        "type": "object",
                                        "properties": {
                                          "url": {
                                            "type": "string",
                                            "description": "The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.",
                                            "format": "uri"
                                          },
                                          "detail": {
                                            "type": "string",
                                            "description": "Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`",
                                            "enum": [
                                              "auto",
                                              "low",
                                              "high"
                                            ],
                                            "default": "auto"
                                          }
                                        },
                                        "required": [
                                          "url"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "image_url"
                                    ]
                                  },
                                  {
                                    "title": "Text",
                                    "type": "object",
                                    "description": "The text content that is part of a message.",
                                    "properties": {
                                      "type": {
                                        "description": "Always `text`.",
                                        "type": "string",
                                        "enum": [
                                          "text"
                                        ]
                                      },
                                      "text": {
                                        "type": "string",
                                        "description": "Text content to be sent to the model"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "text"
                                    ]
                                  }
                                ]
                              },
                              "minItems": 1
                            }
                          ]
                        },
                        "attachments": {
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "file_id": {
                                "type": "string",
                                "description": "The ID of the file to attach to the message."
                              },
                              "tools": {
                                "description": "The tools to add this file to.",
                                "type": "array",
                                "items": {
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "title": "Code interpreter tool",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "The type of tool being defined: `code_interpreter`",
                                          "enum": [
                                            "code_interpreter"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "title": "FileSearch tool",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "The type of tool being defined: `file_search`",
                                          "enum": [
                                            "file_search"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "description": "A list of files attached to the message, and the tools they should be added to.",
                          "required": [
                            "file_id",
                            "tools"
                          ]
                        },
                        "metadata": {
                          "type": [
                            "object",
                            "null"
                          ],
                          "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "tools": {
                    "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "maxItems": 20,
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "title": "Code interpreter tool",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of tool being defined: `code_interpreter`",
                              "enum": [
                                "code_interpreter"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "FileSearch tool",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of tool being defined: `file_search`",
                              "enum": [
                                "file_search"
                              ]
                            },
                            "file_search": {
                              "type": "object",
                              "description": "Overrides for the file search tool.",
                              "properties": {
                                "max_num_results": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 50,
                                  "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                                },
                                "ranking_options": {
                                  "title": "File search tool call ranking options",
                                  "type": "object",
                                  "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                                  "properties": {
                                    "ranker": {
                                      "type": "string",
                                      "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                      "enum": [
                                        "auto",
                                        "default_2024_08_21"
                                      ]
                                    },
                                    "score_threshold": {
                                      "type": "number",
                                      "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                      "minimum": 0,
                                      "maximum": 1
                                    }
                                  },
                                  "required": [
                                    "score_threshold"
                                  ]
                                }
                              }
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "Function tool",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of tool being defined: `function`",
                              "enum": [
                                "function"
                              ]
                            },
                            "function": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "description": "A description of what the function does, used by the model to choose when and how to call the function."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                                },
                                "parameters": {
                                  "type": "object",
                                  "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                                  "additionalProperties": true
                                },
                                "strict": {
                                  "type": [
                                    "boolean",
                                    "null"
                                  ],
                                  "default": false,
                                  "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "function"
                          ]
                        }
                      ]
                    }
                  },
                  "metadata": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "temperature": {
                    "type": [
                      "number",
                      "null"
                    ],
                    "minimum": 0,
                    "maximum": 2,
                    "default": 1,
                    "example": 1,
                    "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
                  },
                  "top_p": {
                    "type": [
                      "number",
                      "null"
                    ],
                    "minimum": 0,
                    "maximum": 1,
                    "default": 1,
                    "example": 1,
                    "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
                  },
                  "stream": {
                    "type": [
                      "boolean",
                      "null"
                    ],
                    "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n"
                  },
                  "max_prompt_tokens": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
                    "minimum": 256
                  },
                  "max_completion_tokens": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
                    "minimum": 256
                  },
                  "truncation_strategy": {
                    "allOf": [
                      {
                        "type": "object",
                        "title": "Thread Truncation Controls",
                        "description": "Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.",
                            "enum": [
                              "auto",
                              "last_messages"
                            ]
                          },
                          "last_messages": {
                            "type": [
                              "integer",
                              "null"
                            ],
                            "description": "The number of most recent messages from the thread when constructing the context for the run.",
                            "minimum": 1
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {}
                    ]
                  },
                  "tool_choice": {
                    "allOf": [
                      {
                        "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools before responding to the user.\nSpecifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n",
                        "oneOf": [
                          {
                            "type": "string",
                            "description": "`none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.\n",
                            "enum": [
                              "none",
                              "auto",
                              "required"
                            ]
                          },
                          {
                            "type": "object",
                            "description": "Specifies a tool the model should use. Use to force the model to call a specific tool.",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "function",
                                  "code_interpreter",
                                  "file_search"
                                ],
                                "description": "The type of the tool. If type is `function`, the function name must be set"
                              },
                              "function": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the function to call."
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          }
                        ]
                      },
                      {}
                    ]
                  },
                  "parallel_tool_calls": {
                    "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
                    "type": "boolean",
                    "default": true
                  },
                  "response_format": {
                    "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "`auto` is the default value\n",
                        "enum": [
                          "auto"
                        ]
                      },
                      {
                        "type": "object",
                        "title": "Text",
                        "description": "Default response format. Used to generate text responses.\n",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of response format being defined. Always `text`.",
                            "enum": [
                              "text"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "type": "object",
                        "title": "JSON object",
                        "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of response format being defined. Always `json_object`.",
                            "enum": [
                              "json_object"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "type": "object",
                        "title": "JSON schema",
                        "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of response format being defined. Always `json_schema`.",
                            "enum": [
                              "json_schema"
                            ]
                          },
                          "json_schema": {
                            "type": "object",
                            "title": "JSON schema",
                            "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                            "properties": {
                              "description": {
                                "type": "string",
                                "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                              },
                              "schema": {
                                "type": "object",
                                "title": "JSON schema",
                                "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                                "additionalProperties": true
                              },
                              "strict": {
                                "type": [
                                  "boolean",
                                  "null"
                                ],
                                "default": false,
                                "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "json_schema"
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "assistant_id"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_threads__thread_id__runs/output-200.schema.json",
            "type": "object",
            "title": "A run on a thread",
            "description": "Represents an execution run on a [thread](/docs/api-reference/threads).",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `thread.run`.",
                "type": "string",
                "enum": [
                  "thread.run"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the run was created.",
                "type": "integer"
              },
              "thread_id": {
                "description": "The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.",
                "type": "string"
              },
              "assistant_id": {
                "description": "The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.",
                "type": "string"
              },
              "status": {
                "description": "The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.",
                "type": "string",
                "enum": [
                  "queued",
                  "in_progress",
                  "requires_action",
                  "cancelling",
                  "cancelled",
                  "failed",
                  "completed",
                  "incomplete",
                  "expired"
                ]
              },
              "required_action": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Details on the action required to continue the run. Will be `null` if no action is required.",
                "properties": {
                  "type": {
                    "description": "For now, this is always `submit_tool_outputs`.",
                    "type": "string",
                    "enum": [
                      "submit_tool_outputs"
                    ]
                  },
                  "submit_tool_outputs": {
                    "type": "object",
                    "description": "Details on the tool outputs needed for this run to continue.",
                    "properties": {
                      "tool_calls": {
                        "type": "array",
                        "description": "A list of the relevant tool calls.",
                        "items": {
                          "type": "object",
                          "description": "Tool call objects",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint."
                            },
                            "type": {
                              "type": "string",
                              "description": "The type of tool call the output is required for. For now, this is always `function`.",
                              "enum": [
                                "function"
                              ]
                            },
                            "function": {
                              "type": "object",
                              "description": "The function definition.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the function."
                                },
                                "arguments": {
                                  "type": "string",
                                  "description": "The arguments that the model expects you to pass to the function."
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ]
                        }
                      }
                    },
                    "required": [
                      "tool_calls"
                    ]
                  }
                },
                "required": [
                  "type",
                  "submit_tool_outputs"
                ]
              },
              "last_error": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "The last error associated with this run. Will be `null` if there are no errors.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.",
                    "enum": [
                      "server_error",
                      "rate_limit_exceeded",
                      "invalid_prompt"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "A human-readable description of the error."
                  }
                },
                "required": [
                  "code",
                  "message"
                ]
              },
              "expires_at": {
                "description": "The Unix timestamp (in seconds) for when the run will expire.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "started_at": {
                "description": "The Unix timestamp (in seconds) for when the run was started.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "cancelled_at": {
                "description": "The Unix timestamp (in seconds) for when the run was cancelled.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "failed_at": {
                "description": "The Unix timestamp (in seconds) for when the run failed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "completed_at": {
                "description": "The Unix timestamp (in seconds) for when the run was completed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "incomplete_details": {
                "description": "Details on why the run is incomplete. Will be `null` if the run is not incomplete.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "reason": {
                    "description": "The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.",
                    "type": "string",
                    "enum": [
                      "max_completion_tokens",
                      "max_prompt_tokens"
                    ]
                  }
                }
              },
              "model": {
                "description": "The model that the [assistant](/docs/api-reference/assistants) used for this run.",
                "type": "string"
              },
              "instructions": {
                "description": "The instructions that the [assistant](/docs/api-reference/assistants) used for this run.",
                "type": "string"
              },
              "tools": {
                "description": "The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.",
                "default": [],
                "type": "array",
                "maxItems": 20,
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Code interpreter tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `code_interpreter`",
                          "enum": [
                            "code_interpreter"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "FileSearch tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `file_search`",
                          "enum": [
                            "file_search"
                          ]
                        },
                        "file_search": {
                          "type": "object",
                          "description": "Overrides for the file search tool.",
                          "properties": {
                            "max_num_results": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 50,
                              "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                            },
                            "ranking_options": {
                              "title": "File search tool call ranking options",
                              "type": "object",
                              "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                              "properties": {
                                "ranker": {
                                  "type": "string",
                                  "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                  "enum": [
                                    "auto",
                                    "default_2024_08_21"
                                  ]
                                },
                                "score_threshold": {
                                  "type": "number",
                                  "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                  "minimum": 0,
                                  "maximum": 1
                                }
                              },
                              "required": [
                                "score_threshold"
                              ]
                            }
                          }
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Function tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `function`",
                          "enum": [
                            "function"
                          ]
                        },
                        "function": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "description": "A description of what the function does, used by the model to choose when and how to call the function."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                            },
                            "parameters": {
                              "type": "object",
                              "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                              "additionalProperties": true
                            },
                            "strict": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "default": false,
                              "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "function"
                      ]
                    }
                  ]
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "usage": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
                "properties": {
                  "completion_tokens": {
                    "type": "integer",
                    "description": "Number of completion tokens used over the course of the run."
                  },
                  "prompt_tokens": {
                    "type": "integer",
                    "description": "Number of prompt tokens used over the course of the run."
                  },
                  "total_tokens": {
                    "type": "integer",
                    "description": "Total number of tokens used (prompt + completion)."
                  }
                },
                "required": [
                  "prompt_tokens",
                  "completion_tokens",
                  "total_tokens"
                ]
              },
              "temperature": {
                "description": "The sampling temperature used for this run. If not set, defaults to 1.",
                "type": [
                  "number",
                  "null"
                ]
              },
              "top_p": {
                "description": "The nucleus sampling value used for this run. If not set, defaults to 1.",
                "type": [
                  "number",
                  "null"
                ]
              },
              "max_prompt_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The maximum number of prompt tokens specified to have been used over the course of the run.\n",
                "minimum": 256
              },
              "max_completion_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The maximum number of completion tokens specified to have been used over the course of the run.\n",
                "minimum": 256
              },
              "truncation_strategy": {
                "allOf": [
                  {
                    "type": "object",
                    "title": "Thread Truncation Controls",
                    "description": "Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.",
                        "enum": [
                          "auto",
                          "last_messages"
                        ]
                      },
                      "last_messages": {
                        "type": [
                          "integer",
                          "null"
                        ],
                        "description": "The number of most recent messages from the thread when constructing the context for the run.",
                        "minimum": 1
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {}
                ]
              },
              "tool_choice": {
                "allOf": [
                  {
                    "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools before responding to the user.\nSpecifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "`none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.\n",
                        "enum": [
                          "none",
                          "auto",
                          "required"
                        ]
                      },
                      {
                        "type": "object",
                        "description": "Specifies a tool the model should use. Use to force the model to call a specific tool.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "function",
                              "code_interpreter",
                              "file_search"
                            ],
                            "description": "The type of the tool. If type is `function`, the function name must be set"
                          },
                          "function": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the function to call."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      }
                    ]
                  },
                  {}
                ]
              },
              "parallel_tool_calls": {
                "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
                "type": "boolean",
                "default": true
              },
              "response_format": {
                "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                "oneOf": [
                  {
                    "type": "string",
                    "description": "`auto` is the default value\n",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "Text",
                    "description": "Default response format. Used to generate text responses.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `text`.",
                        "enum": [
                          "text"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON object",
                    "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_object`.",
                        "enum": [
                          "json_object"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON schema",
                    "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_schema`.",
                        "enum": [
                          "json_schema"
                        ]
                      },
                      "json_schema": {
                        "type": "object",
                        "title": "JSON schema",
                        "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                        "properties": {
                          "description": {
                            "type": "string",
                            "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                          },
                          "schema": {
                            "type": "object",
                            "title": "JSON schema",
                            "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                            "additionalProperties": true
                          },
                          "strict": {
                            "type": [
                              "boolean",
                              "null"
                            ],
                            "default": false,
                            "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "json_schema"
                    ]
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "thread_id",
              "assistant_id",
              "status",
              "required_action",
              "last_error",
              "expires_at",
              "started_at",
              "cancelled_at",
              "failed_at",
              "completed_at",
              "model",
              "instructions",
              "tools",
              "metadata",
              "usage",
              "incomplete_details",
              "max_prompt_tokens",
              "max_completion_tokens",
              "truncation_strategy",
              "tool_choice",
              "parallel_tool_calls",
              "response_format"
            ]
          }
        ]
      }
    },
    {
      "id": "get_threads__thread_id__runs__run_id_",
      "operationId": "getRun",
      "name": "Get Run",
      "description": "Retrieves a run.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_threads__thread_id__runs__run_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}/runs/{run_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id",
                "run_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the [thread](/docs/api-reference/threads) that was run."
                },
                "run_id": {
                  "type": "string",
                  "description": "The ID of the run to retrieve."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_threads__thread_id__runs__run_id_/output-200.schema.json",
            "type": "object",
            "title": "A run on a thread",
            "description": "Represents an execution run on a [thread](/docs/api-reference/threads).",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `thread.run`.",
                "type": "string",
                "enum": [
                  "thread.run"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the run was created.",
                "type": "integer"
              },
              "thread_id": {
                "description": "The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.",
                "type": "string"
              },
              "assistant_id": {
                "description": "The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.",
                "type": "string"
              },
              "status": {
                "description": "The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.",
                "type": "string",
                "enum": [
                  "queued",
                  "in_progress",
                  "requires_action",
                  "cancelling",
                  "cancelled",
                  "failed",
                  "completed",
                  "incomplete",
                  "expired"
                ]
              },
              "required_action": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Details on the action required to continue the run. Will be `null` if no action is required.",
                "properties": {
                  "type": {
                    "description": "For now, this is always `submit_tool_outputs`.",
                    "type": "string",
                    "enum": [
                      "submit_tool_outputs"
                    ]
                  },
                  "submit_tool_outputs": {
                    "type": "object",
                    "description": "Details on the tool outputs needed for this run to continue.",
                    "properties": {
                      "tool_calls": {
                        "type": "array",
                        "description": "A list of the relevant tool calls.",
                        "items": {
                          "type": "object",
                          "description": "Tool call objects",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint."
                            },
                            "type": {
                              "type": "string",
                              "description": "The type of tool call the output is required for. For now, this is always `function`.",
                              "enum": [
                                "function"
                              ]
                            },
                            "function": {
                              "type": "object",
                              "description": "The function definition.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the function."
                                },
                                "arguments": {
                                  "type": "string",
                                  "description": "The arguments that the model expects you to pass to the function."
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ]
                        }
                      }
                    },
                    "required": [
                      "tool_calls"
                    ]
                  }
                },
                "required": [
                  "type",
                  "submit_tool_outputs"
                ]
              },
              "last_error": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "The last error associated with this run. Will be `null` if there are no errors.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.",
                    "enum": [
                      "server_error",
                      "rate_limit_exceeded",
                      "invalid_prompt"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "A human-readable description of the error."
                  }
                },
                "required": [
                  "code",
                  "message"
                ]
              },
              "expires_at": {
                "description": "The Unix timestamp (in seconds) for when the run will expire.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "started_at": {
                "description": "The Unix timestamp (in seconds) for when the run was started.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "cancelled_at": {
                "description": "The Unix timestamp (in seconds) for when the run was cancelled.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "failed_at": {
                "description": "The Unix timestamp (in seconds) for when the run failed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "completed_at": {
                "description": "The Unix timestamp (in seconds) for when the run was completed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "incomplete_details": {
                "description": "Details on why the run is incomplete. Will be `null` if the run is not incomplete.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "reason": {
                    "description": "The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.",
                    "type": "string",
                    "enum": [
                      "max_completion_tokens",
                      "max_prompt_tokens"
                    ]
                  }
                }
              },
              "model": {
                "description": "The model that the [assistant](/docs/api-reference/assistants) used for this run.",
                "type": "string"
              },
              "instructions": {
                "description": "The instructions that the [assistant](/docs/api-reference/assistants) used for this run.",
                "type": "string"
              },
              "tools": {
                "description": "The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.",
                "default": [],
                "type": "array",
                "maxItems": 20,
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Code interpreter tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `code_interpreter`",
                          "enum": [
                            "code_interpreter"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "FileSearch tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `file_search`",
                          "enum": [
                            "file_search"
                          ]
                        },
                        "file_search": {
                          "type": "object",
                          "description": "Overrides for the file search tool.",
                          "properties": {
                            "max_num_results": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 50,
                              "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                            },
                            "ranking_options": {
                              "title": "File search tool call ranking options",
                              "type": "object",
                              "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                              "properties": {
                                "ranker": {
                                  "type": "string",
                                  "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                  "enum": [
                                    "auto",
                                    "default_2024_08_21"
                                  ]
                                },
                                "score_threshold": {
                                  "type": "number",
                                  "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                  "minimum": 0,
                                  "maximum": 1
                                }
                              },
                              "required": [
                                "score_threshold"
                              ]
                            }
                          }
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Function tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `function`",
                          "enum": [
                            "function"
                          ]
                        },
                        "function": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "description": "A description of what the function does, used by the model to choose when and how to call the function."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                            },
                            "parameters": {
                              "type": "object",
                              "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                              "additionalProperties": true
                            },
                            "strict": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "default": false,
                              "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "function"
                      ]
                    }
                  ]
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "usage": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
                "properties": {
                  "completion_tokens": {
                    "type": "integer",
                    "description": "Number of completion tokens used over the course of the run."
                  },
                  "prompt_tokens": {
                    "type": "integer",
                    "description": "Number of prompt tokens used over the course of the run."
                  },
                  "total_tokens": {
                    "type": "integer",
                    "description": "Total number of tokens used (prompt + completion)."
                  }
                },
                "required": [
                  "prompt_tokens",
                  "completion_tokens",
                  "total_tokens"
                ]
              },
              "temperature": {
                "description": "The sampling temperature used for this run. If not set, defaults to 1.",
                "type": [
                  "number",
                  "null"
                ]
              },
              "top_p": {
                "description": "The nucleus sampling value used for this run. If not set, defaults to 1.",
                "type": [
                  "number",
                  "null"
                ]
              },
              "max_prompt_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The maximum number of prompt tokens specified to have been used over the course of the run.\n",
                "minimum": 256
              },
              "max_completion_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The maximum number of completion tokens specified to have been used over the course of the run.\n",
                "minimum": 256
              },
              "truncation_strategy": {
                "allOf": [
                  {
                    "type": "object",
                    "title": "Thread Truncation Controls",
                    "description": "Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.",
                        "enum": [
                          "auto",
                          "last_messages"
                        ]
                      },
                      "last_messages": {
                        "type": [
                          "integer",
                          "null"
                        ],
                        "description": "The number of most recent messages from the thread when constructing the context for the run.",
                        "minimum": 1
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {}
                ]
              },
              "tool_choice": {
                "allOf": [
                  {
                    "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools before responding to the user.\nSpecifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "`none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.\n",
                        "enum": [
                          "none",
                          "auto",
                          "required"
                        ]
                      },
                      {
                        "type": "object",
                        "description": "Specifies a tool the model should use. Use to force the model to call a specific tool.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "function",
                              "code_interpreter",
                              "file_search"
                            ],
                            "description": "The type of the tool. If type is `function`, the function name must be set"
                          },
                          "function": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the function to call."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      }
                    ]
                  },
                  {}
                ]
              },
              "parallel_tool_calls": {
                "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
                "type": "boolean",
                "default": true
              },
              "response_format": {
                "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                "oneOf": [
                  {
                    "type": "string",
                    "description": "`auto` is the default value\n",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "Text",
                    "description": "Default response format. Used to generate text responses.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `text`.",
                        "enum": [
                          "text"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON object",
                    "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_object`.",
                        "enum": [
                          "json_object"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON schema",
                    "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_schema`.",
                        "enum": [
                          "json_schema"
                        ]
                      },
                      "json_schema": {
                        "type": "object",
                        "title": "JSON schema",
                        "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                        "properties": {
                          "description": {
                            "type": "string",
                            "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                          },
                          "schema": {
                            "type": "object",
                            "title": "JSON schema",
                            "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                            "additionalProperties": true
                          },
                          "strict": {
                            "type": [
                              "boolean",
                              "null"
                            ],
                            "default": false,
                            "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "json_schema"
                    ]
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "thread_id",
              "assistant_id",
              "status",
              "required_action",
              "last_error",
              "expires_at",
              "started_at",
              "cancelled_at",
              "failed_at",
              "completed_at",
              "model",
              "instructions",
              "tools",
              "metadata",
              "usage",
              "incomplete_details",
              "max_prompt_tokens",
              "max_completion_tokens",
              "truncation_strategy",
              "tool_choice",
              "parallel_tool_calls",
              "response_format"
            ]
          }
        ]
      }
    },
    {
      "id": "post_threads__thread_id__runs__run_id_",
      "operationId": "modifyRun",
      "name": "Modify Run",
      "description": "Modifies a run.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_threads__thread_id__runs__run_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}/runs/{run_id}"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id",
                "run_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the [thread](/docs/api-reference/threads) that was run."
                },
                "run_id": {
                  "type": "string",
                  "description": "The ID of the run to modify."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "metadata": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_threads__thread_id__runs__run_id_/output-200.schema.json",
            "type": "object",
            "title": "A run on a thread",
            "description": "Represents an execution run on a [thread](/docs/api-reference/threads).",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `thread.run`.",
                "type": "string",
                "enum": [
                  "thread.run"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the run was created.",
                "type": "integer"
              },
              "thread_id": {
                "description": "The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.",
                "type": "string"
              },
              "assistant_id": {
                "description": "The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.",
                "type": "string"
              },
              "status": {
                "description": "The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.",
                "type": "string",
                "enum": [
                  "queued",
                  "in_progress",
                  "requires_action",
                  "cancelling",
                  "cancelled",
                  "failed",
                  "completed",
                  "incomplete",
                  "expired"
                ]
              },
              "required_action": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Details on the action required to continue the run. Will be `null` if no action is required.",
                "properties": {
                  "type": {
                    "description": "For now, this is always `submit_tool_outputs`.",
                    "type": "string",
                    "enum": [
                      "submit_tool_outputs"
                    ]
                  },
                  "submit_tool_outputs": {
                    "type": "object",
                    "description": "Details on the tool outputs needed for this run to continue.",
                    "properties": {
                      "tool_calls": {
                        "type": "array",
                        "description": "A list of the relevant tool calls.",
                        "items": {
                          "type": "object",
                          "description": "Tool call objects",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint."
                            },
                            "type": {
                              "type": "string",
                              "description": "The type of tool call the output is required for. For now, this is always `function`.",
                              "enum": [
                                "function"
                              ]
                            },
                            "function": {
                              "type": "object",
                              "description": "The function definition.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the function."
                                },
                                "arguments": {
                                  "type": "string",
                                  "description": "The arguments that the model expects you to pass to the function."
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ]
                        }
                      }
                    },
                    "required": [
                      "tool_calls"
                    ]
                  }
                },
                "required": [
                  "type",
                  "submit_tool_outputs"
                ]
              },
              "last_error": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "The last error associated with this run. Will be `null` if there are no errors.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.",
                    "enum": [
                      "server_error",
                      "rate_limit_exceeded",
                      "invalid_prompt"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "A human-readable description of the error."
                  }
                },
                "required": [
                  "code",
                  "message"
                ]
              },
              "expires_at": {
                "description": "The Unix timestamp (in seconds) for when the run will expire.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "started_at": {
                "description": "The Unix timestamp (in seconds) for when the run was started.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "cancelled_at": {
                "description": "The Unix timestamp (in seconds) for when the run was cancelled.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "failed_at": {
                "description": "The Unix timestamp (in seconds) for when the run failed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "completed_at": {
                "description": "The Unix timestamp (in seconds) for when the run was completed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "incomplete_details": {
                "description": "Details on why the run is incomplete. Will be `null` if the run is not incomplete.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "reason": {
                    "description": "The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.",
                    "type": "string",
                    "enum": [
                      "max_completion_tokens",
                      "max_prompt_tokens"
                    ]
                  }
                }
              },
              "model": {
                "description": "The model that the [assistant](/docs/api-reference/assistants) used for this run.",
                "type": "string"
              },
              "instructions": {
                "description": "The instructions that the [assistant](/docs/api-reference/assistants) used for this run.",
                "type": "string"
              },
              "tools": {
                "description": "The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.",
                "default": [],
                "type": "array",
                "maxItems": 20,
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Code interpreter tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `code_interpreter`",
                          "enum": [
                            "code_interpreter"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "FileSearch tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `file_search`",
                          "enum": [
                            "file_search"
                          ]
                        },
                        "file_search": {
                          "type": "object",
                          "description": "Overrides for the file search tool.",
                          "properties": {
                            "max_num_results": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 50,
                              "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                            },
                            "ranking_options": {
                              "title": "File search tool call ranking options",
                              "type": "object",
                              "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                              "properties": {
                                "ranker": {
                                  "type": "string",
                                  "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                  "enum": [
                                    "auto",
                                    "default_2024_08_21"
                                  ]
                                },
                                "score_threshold": {
                                  "type": "number",
                                  "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                  "minimum": 0,
                                  "maximum": 1
                                }
                              },
                              "required": [
                                "score_threshold"
                              ]
                            }
                          }
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Function tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `function`",
                          "enum": [
                            "function"
                          ]
                        },
                        "function": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "description": "A description of what the function does, used by the model to choose when and how to call the function."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                            },
                            "parameters": {
                              "type": "object",
                              "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                              "additionalProperties": true
                            },
                            "strict": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "default": false,
                              "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "function"
                      ]
                    }
                  ]
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "usage": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
                "properties": {
                  "completion_tokens": {
                    "type": "integer",
                    "description": "Number of completion tokens used over the course of the run."
                  },
                  "prompt_tokens": {
                    "type": "integer",
                    "description": "Number of prompt tokens used over the course of the run."
                  },
                  "total_tokens": {
                    "type": "integer",
                    "description": "Total number of tokens used (prompt + completion)."
                  }
                },
                "required": [
                  "prompt_tokens",
                  "completion_tokens",
                  "total_tokens"
                ]
              },
              "temperature": {
                "description": "The sampling temperature used for this run. If not set, defaults to 1.",
                "type": [
                  "number",
                  "null"
                ]
              },
              "top_p": {
                "description": "The nucleus sampling value used for this run. If not set, defaults to 1.",
                "type": [
                  "number",
                  "null"
                ]
              },
              "max_prompt_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The maximum number of prompt tokens specified to have been used over the course of the run.\n",
                "minimum": 256
              },
              "max_completion_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The maximum number of completion tokens specified to have been used over the course of the run.\n",
                "minimum": 256
              },
              "truncation_strategy": {
                "allOf": [
                  {
                    "type": "object",
                    "title": "Thread Truncation Controls",
                    "description": "Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.",
                        "enum": [
                          "auto",
                          "last_messages"
                        ]
                      },
                      "last_messages": {
                        "type": [
                          "integer",
                          "null"
                        ],
                        "description": "The number of most recent messages from the thread when constructing the context for the run.",
                        "minimum": 1
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {}
                ]
              },
              "tool_choice": {
                "allOf": [
                  {
                    "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools before responding to the user.\nSpecifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "`none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.\n",
                        "enum": [
                          "none",
                          "auto",
                          "required"
                        ]
                      },
                      {
                        "type": "object",
                        "description": "Specifies a tool the model should use. Use to force the model to call a specific tool.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "function",
                              "code_interpreter",
                              "file_search"
                            ],
                            "description": "The type of the tool. If type is `function`, the function name must be set"
                          },
                          "function": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the function to call."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      }
                    ]
                  },
                  {}
                ]
              },
              "parallel_tool_calls": {
                "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
                "type": "boolean",
                "default": true
              },
              "response_format": {
                "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                "oneOf": [
                  {
                    "type": "string",
                    "description": "`auto` is the default value\n",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "Text",
                    "description": "Default response format. Used to generate text responses.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `text`.",
                        "enum": [
                          "text"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON object",
                    "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_object`.",
                        "enum": [
                          "json_object"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON schema",
                    "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_schema`.",
                        "enum": [
                          "json_schema"
                        ]
                      },
                      "json_schema": {
                        "type": "object",
                        "title": "JSON schema",
                        "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                        "properties": {
                          "description": {
                            "type": "string",
                            "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                          },
                          "schema": {
                            "type": "object",
                            "title": "JSON schema",
                            "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                            "additionalProperties": true
                          },
                          "strict": {
                            "type": [
                              "boolean",
                              "null"
                            ],
                            "default": false,
                            "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "json_schema"
                    ]
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "thread_id",
              "assistant_id",
              "status",
              "required_action",
              "last_error",
              "expires_at",
              "started_at",
              "cancelled_at",
              "failed_at",
              "completed_at",
              "model",
              "instructions",
              "tools",
              "metadata",
              "usage",
              "incomplete_details",
              "max_prompt_tokens",
              "max_completion_tokens",
              "truncation_strategy",
              "tool_choice",
              "parallel_tool_calls",
              "response_format"
            ]
          }
        ]
      }
    },
    {
      "id": "post_threads__thread_id__runs__run_id__cancel",
      "operationId": "cancelRun",
      "name": "Cancel Run",
      "description": "Cancels a run that is `in_progress`.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_threads__thread_id__runs__run_id__cancel/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}/runs/{run_id}/cancel"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id",
                "run_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the thread to which this run belongs."
                },
                "run_id": {
                  "type": "string",
                  "description": "The ID of the run to cancel."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_threads__thread_id__runs__run_id__cancel/output-200.schema.json",
            "type": "object",
            "title": "A run on a thread",
            "description": "Represents an execution run on a [thread](/docs/api-reference/threads).",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `thread.run`.",
                "type": "string",
                "enum": [
                  "thread.run"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the run was created.",
                "type": "integer"
              },
              "thread_id": {
                "description": "The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.",
                "type": "string"
              },
              "assistant_id": {
                "description": "The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.",
                "type": "string"
              },
              "status": {
                "description": "The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.",
                "type": "string",
                "enum": [
                  "queued",
                  "in_progress",
                  "requires_action",
                  "cancelling",
                  "cancelled",
                  "failed",
                  "completed",
                  "incomplete",
                  "expired"
                ]
              },
              "required_action": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Details on the action required to continue the run. Will be `null` if no action is required.",
                "properties": {
                  "type": {
                    "description": "For now, this is always `submit_tool_outputs`.",
                    "type": "string",
                    "enum": [
                      "submit_tool_outputs"
                    ]
                  },
                  "submit_tool_outputs": {
                    "type": "object",
                    "description": "Details on the tool outputs needed for this run to continue.",
                    "properties": {
                      "tool_calls": {
                        "type": "array",
                        "description": "A list of the relevant tool calls.",
                        "items": {
                          "type": "object",
                          "description": "Tool call objects",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint."
                            },
                            "type": {
                              "type": "string",
                              "description": "The type of tool call the output is required for. For now, this is always `function`.",
                              "enum": [
                                "function"
                              ]
                            },
                            "function": {
                              "type": "object",
                              "description": "The function definition.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the function."
                                },
                                "arguments": {
                                  "type": "string",
                                  "description": "The arguments that the model expects you to pass to the function."
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ]
                        }
                      }
                    },
                    "required": [
                      "tool_calls"
                    ]
                  }
                },
                "required": [
                  "type",
                  "submit_tool_outputs"
                ]
              },
              "last_error": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "The last error associated with this run. Will be `null` if there are no errors.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.",
                    "enum": [
                      "server_error",
                      "rate_limit_exceeded",
                      "invalid_prompt"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "A human-readable description of the error."
                  }
                },
                "required": [
                  "code",
                  "message"
                ]
              },
              "expires_at": {
                "description": "The Unix timestamp (in seconds) for when the run will expire.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "started_at": {
                "description": "The Unix timestamp (in seconds) for when the run was started.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "cancelled_at": {
                "description": "The Unix timestamp (in seconds) for when the run was cancelled.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "failed_at": {
                "description": "The Unix timestamp (in seconds) for when the run failed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "completed_at": {
                "description": "The Unix timestamp (in seconds) for when the run was completed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "incomplete_details": {
                "description": "Details on why the run is incomplete. Will be `null` if the run is not incomplete.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "reason": {
                    "description": "The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.",
                    "type": "string",
                    "enum": [
                      "max_completion_tokens",
                      "max_prompt_tokens"
                    ]
                  }
                }
              },
              "model": {
                "description": "The model that the [assistant](/docs/api-reference/assistants) used for this run.",
                "type": "string"
              },
              "instructions": {
                "description": "The instructions that the [assistant](/docs/api-reference/assistants) used for this run.",
                "type": "string"
              },
              "tools": {
                "description": "The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.",
                "default": [],
                "type": "array",
                "maxItems": 20,
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Code interpreter tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `code_interpreter`",
                          "enum": [
                            "code_interpreter"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "FileSearch tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `file_search`",
                          "enum": [
                            "file_search"
                          ]
                        },
                        "file_search": {
                          "type": "object",
                          "description": "Overrides for the file search tool.",
                          "properties": {
                            "max_num_results": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 50,
                              "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                            },
                            "ranking_options": {
                              "title": "File search tool call ranking options",
                              "type": "object",
                              "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                              "properties": {
                                "ranker": {
                                  "type": "string",
                                  "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                  "enum": [
                                    "auto",
                                    "default_2024_08_21"
                                  ]
                                },
                                "score_threshold": {
                                  "type": "number",
                                  "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                  "minimum": 0,
                                  "maximum": 1
                                }
                              },
                              "required": [
                                "score_threshold"
                              ]
                            }
                          }
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Function tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `function`",
                          "enum": [
                            "function"
                          ]
                        },
                        "function": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "description": "A description of what the function does, used by the model to choose when and how to call the function."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                            },
                            "parameters": {
                              "type": "object",
                              "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                              "additionalProperties": true
                            },
                            "strict": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "default": false,
                              "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "function"
                      ]
                    }
                  ]
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "usage": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
                "properties": {
                  "completion_tokens": {
                    "type": "integer",
                    "description": "Number of completion tokens used over the course of the run."
                  },
                  "prompt_tokens": {
                    "type": "integer",
                    "description": "Number of prompt tokens used over the course of the run."
                  },
                  "total_tokens": {
                    "type": "integer",
                    "description": "Total number of tokens used (prompt + completion)."
                  }
                },
                "required": [
                  "prompt_tokens",
                  "completion_tokens",
                  "total_tokens"
                ]
              },
              "temperature": {
                "description": "The sampling temperature used for this run. If not set, defaults to 1.",
                "type": [
                  "number",
                  "null"
                ]
              },
              "top_p": {
                "description": "The nucleus sampling value used for this run. If not set, defaults to 1.",
                "type": [
                  "number",
                  "null"
                ]
              },
              "max_prompt_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The maximum number of prompt tokens specified to have been used over the course of the run.\n",
                "minimum": 256
              },
              "max_completion_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The maximum number of completion tokens specified to have been used over the course of the run.\n",
                "minimum": 256
              },
              "truncation_strategy": {
                "allOf": [
                  {
                    "type": "object",
                    "title": "Thread Truncation Controls",
                    "description": "Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.",
                        "enum": [
                          "auto",
                          "last_messages"
                        ]
                      },
                      "last_messages": {
                        "type": [
                          "integer",
                          "null"
                        ],
                        "description": "The number of most recent messages from the thread when constructing the context for the run.",
                        "minimum": 1
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {}
                ]
              },
              "tool_choice": {
                "allOf": [
                  {
                    "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools before responding to the user.\nSpecifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "`none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.\n",
                        "enum": [
                          "none",
                          "auto",
                          "required"
                        ]
                      },
                      {
                        "type": "object",
                        "description": "Specifies a tool the model should use. Use to force the model to call a specific tool.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "function",
                              "code_interpreter",
                              "file_search"
                            ],
                            "description": "The type of the tool. If type is `function`, the function name must be set"
                          },
                          "function": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the function to call."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      }
                    ]
                  },
                  {}
                ]
              },
              "parallel_tool_calls": {
                "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
                "type": "boolean",
                "default": true
              },
              "response_format": {
                "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                "oneOf": [
                  {
                    "type": "string",
                    "description": "`auto` is the default value\n",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "Text",
                    "description": "Default response format. Used to generate text responses.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `text`.",
                        "enum": [
                          "text"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON object",
                    "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_object`.",
                        "enum": [
                          "json_object"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON schema",
                    "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_schema`.",
                        "enum": [
                          "json_schema"
                        ]
                      },
                      "json_schema": {
                        "type": "object",
                        "title": "JSON schema",
                        "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                        "properties": {
                          "description": {
                            "type": "string",
                            "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                          },
                          "schema": {
                            "type": "object",
                            "title": "JSON schema",
                            "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                            "additionalProperties": true
                          },
                          "strict": {
                            "type": [
                              "boolean",
                              "null"
                            ],
                            "default": false,
                            "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "json_schema"
                    ]
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "thread_id",
              "assistant_id",
              "status",
              "required_action",
              "last_error",
              "expires_at",
              "started_at",
              "cancelled_at",
              "failed_at",
              "completed_at",
              "model",
              "instructions",
              "tools",
              "metadata",
              "usage",
              "incomplete_details",
              "max_prompt_tokens",
              "max_completion_tokens",
              "truncation_strategy",
              "tool_choice",
              "parallel_tool_calls",
              "response_format"
            ]
          }
        ]
      }
    },
    {
      "id": "get_threads__thread_id__runs__run_id__steps",
      "operationId": "listRunSteps",
      "name": "List Run Steps",
      "description": "Returns a list of run steps belonging to a run.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_threads__thread_id__runs__run_id__steps/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}/runs/{run_id}/steps"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                },
                "order": {
                  "type": "string",
                  "default": "desc",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                },
                "before": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
                },
                "include[]": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "step_details.tool_calls[*].file_search.results[*].content"
                    ]
                  },
                  "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id",
                "run_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the thread the run and run steps belong to."
                },
                "run_id": {
                  "type": "string",
                  "description": "The ID of the run the run steps belong to."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_threads__thread_id__runs__run_id__steps/output-200.schema.json",
            "type": "any",
            "properties": {
              "object": {
                "type": "string",
                "example": "list"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "Run steps",
                  "description": "Represents a step in execution of a run.\n",
                  "properties": {
                    "id": {
                      "description": "The identifier of the run step, which can be referenced in API endpoints.",
                      "type": "string"
                    },
                    "object": {
                      "description": "The object type, which is always `thread.run.step`.",
                      "type": "string",
                      "enum": [
                        "thread.run.step"
                      ]
                    },
                    "created_at": {
                      "description": "The Unix timestamp (in seconds) for when the run step was created.",
                      "type": "integer"
                    },
                    "assistant_id": {
                      "description": "The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.",
                      "type": "string"
                    },
                    "thread_id": {
                      "description": "The ID of the [thread](/docs/api-reference/threads) that was run.",
                      "type": "string"
                    },
                    "run_id": {
                      "description": "The ID of the [run](/docs/api-reference/runs) that this run step is a part of.",
                      "type": "string"
                    },
                    "type": {
                      "description": "The type of run step, which can be either `message_creation` or `tool_calls`.",
                      "type": "string",
                      "enum": [
                        "message_creation",
                        "tool_calls"
                      ]
                    },
                    "status": {
                      "description": "The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.",
                      "type": "string",
                      "enum": [
                        "in_progress",
                        "cancelled",
                        "failed",
                        "completed",
                        "expired"
                      ]
                    },
                    "step_details": {
                      "type": "object",
                      "description": "The details of the run step.",
                      "oneOf": [
                        {
                          "title": "Message creation",
                          "type": "object",
                          "description": "Details of the message creation by the run step.",
                          "properties": {
                            "type": {
                              "description": "Always `message_creation`.",
                              "type": "string",
                              "enum": [
                                "message_creation"
                              ]
                            },
                            "message_creation": {
                              "type": "object",
                              "properties": {
                                "message_id": {
                                  "type": "string",
                                  "description": "The ID of the message that was created by this run step."
                                }
                              },
                              "required": [
                                "message_id"
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "message_creation"
                          ]
                        },
                        {
                          "title": "Tool calls",
                          "type": "object",
                          "description": "Details of the tool call.",
                          "properties": {
                            "type": {
                              "description": "Always `tool_calls`.",
                              "type": "string",
                              "enum": [
                                "tool_calls"
                              ]
                            },
                            "tool_calls": {
                              "type": "array",
                              "description": "An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.\n",
                              "items": {
                                "oneOf": [
                                  {
                                    "title": "Code Interpreter tool call",
                                    "type": "object",
                                    "description": "Details of the Code Interpreter tool call the run step was involved in.",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID of the tool call."
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "The type of tool call. This is always going to be `code_interpreter` for this type of tool call.",
                                        "enum": [
                                          "code_interpreter"
                                        ]
                                      },
                                      "code_interpreter": {
                                        "type": "object",
                                        "description": "The Code Interpreter tool call definition.",
                                        "required": [
                                          "input",
                                          "outputs"
                                        ],
                                        "properties": {
                                          "input": {
                                            "type": "string",
                                            "description": "The input to the Code Interpreter tool call."
                                          },
                                          "outputs": {
                                            "type": "array",
                                            "description": "The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.",
                                            "items": {
                                              "type": "object",
                                              "oneOf": [
                                                {
                                                  "title": "Code Interpreter log output",
                                                  "type": "object",
                                                  "description": "Text output from the Code Interpreter tool call as part of a run step.",
                                                  "properties": {
                                                    "type": {
                                                      "description": "Always `logs`.",
                                                      "type": "string",
                                                      "enum": [
                                                        "logs"
                                                      ]
                                                    },
                                                    "logs": {
                                                      "type": "string",
                                                      "description": "The text output from the Code Interpreter tool call."
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "logs"
                                                  ]
                                                },
                                                {
                                                  "title": "Code Interpreter image output",
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "description": "Always `image`.",
                                                      "type": "string",
                                                      "enum": [
                                                        "image"
                                                      ]
                                                    },
                                                    "image": {
                                                      "type": "object",
                                                      "properties": {
                                                        "file_id": {
                                                          "description": "The [file](/docs/api-reference/files) ID of the image.",
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "file_id"
                                                      ]
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "image"
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type",
                                      "code_interpreter"
                                    ]
                                  },
                                  {
                                    "title": "File search tool call",
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID of the tool call object."
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "The type of tool call. This is always going to be `file_search` for this type of tool call.",
                                        "enum": [
                                          "file_search"
                                        ]
                                      },
                                      "file_search": {
                                        "type": "object",
                                        "description": "For now, this is always going to be an empty object.",
                                        "properties": {
                                          "ranking_options": {
                                            "title": "File search tool call ranking options",
                                            "type": "object",
                                            "description": "The ranking options for the file search.",
                                            "properties": {
                                              "ranker": {
                                                "type": "string",
                                                "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                                "enum": [
                                                  "auto",
                                                  "default_2024_08_21"
                                                ]
                                              },
                                              "score_threshold": {
                                                "type": "number",
                                                "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                                "minimum": 0,
                                                "maximum": 1
                                              }
                                            },
                                            "required": [
                                              "ranker",
                                              "score_threshold"
                                            ]
                                          },
                                          "results": {
                                            "type": "array",
                                            "description": "The results of the file search.",
                                            "items": {
                                              "title": "File search tool call result",
                                              "type": "object",
                                              "description": "A result instance of the file search.",
                                              "properties": {
                                                "file_id": {
                                                  "type": "string",
                                                  "description": "The ID of the file that result was found in."
                                                },
                                                "file_name": {
                                                  "type": "string",
                                                  "description": "The name of the file that result was found in."
                                                },
                                                "score": {
                                                  "type": "number",
                                                  "description": "The score of the result. All values must be a floating point number between 0 and 1.",
                                                  "minimum": 0,
                                                  "maximum": 1
                                                },
                                                "content": {
                                                  "type": "array",
                                                  "description": "The content of the result that was found. The content is only included if requested via the include query parameter.",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "type": {
                                                        "type": "string",
                                                        "description": "The type of the content.",
                                                        "enum": [
                                                          "text"
                                                        ]
                                                      },
                                                      "text": {
                                                        "type": "string",
                                                        "description": "The text content of the file."
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "required": [
                                                "file_id",
                                                "file_name",
                                                "score"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type",
                                      "file_search"
                                    ]
                                  },
                                  {
                                    "type": "object",
                                    "title": "Function tool call",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "The ID of the tool call object."
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "The type of tool call. This is always going to be `function` for this type of tool call.",
                                        "enum": [
                                          "function"
                                        ]
                                      },
                                      "function": {
                                        "type": "object",
                                        "description": "The definition of the function that was called.",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "The name of the function."
                                          },
                                          "arguments": {
                                            "type": "string",
                                            "description": "The arguments passed to the function."
                                          },
                                          "output": {
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "description": "The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet."
                                          }
                                        },
                                        "required": [
                                          "name",
                                          "arguments",
                                          "output"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type",
                                      "function"
                                    ]
                                  }
                                ]
                              }
                            }
                          },
                          "required": [
                            "type",
                            "tool_calls"
                          ]
                        }
                      ]
                    },
                    "last_error": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "The last error associated with this run step. Will be `null` if there are no errors.",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "One of `server_error` or `rate_limit_exceeded`.",
                          "enum": [
                            "server_error",
                            "rate_limit_exceeded"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "description": "A human-readable description of the error."
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ]
                    },
                    "expired_at": {
                      "description": "The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "cancelled_at": {
                      "description": "The Unix timestamp (in seconds) for when the run step was cancelled.",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "failed_at": {
                      "description": "The Unix timestamp (in seconds) for when the run step failed.",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "completed_at": {
                      "description": "The Unix timestamp (in seconds) for when the run step completed.",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "metadata": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "usage": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.",
                      "properties": {
                        "completion_tokens": {
                          "type": "integer",
                          "description": "Number of completion tokens used over the course of the run step."
                        },
                        "prompt_tokens": {
                          "type": "integer",
                          "description": "Number of prompt tokens used over the course of the run step."
                        },
                        "total_tokens": {
                          "type": "integer",
                          "description": "Total number of tokens used (prompt + completion)."
                        }
                      },
                      "required": [
                        "prompt_tokens",
                        "completion_tokens",
                        "total_tokens"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "object",
                    "created_at",
                    "assistant_id",
                    "thread_id",
                    "run_id",
                    "type",
                    "status",
                    "step_details",
                    "last_error",
                    "expired_at",
                    "cancelled_at",
                    "failed_at",
                    "completed_at",
                    "metadata",
                    "usage"
                  ]
                }
              },
              "first_id": {
                "type": "string",
                "example": "step_abc123"
              },
              "last_id": {
                "type": "string",
                "example": "step_abc456"
              },
              "has_more": {
                "type": "boolean",
                "example": false
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "get_threads__thread_id__runs__run_id__steps__step_id_",
      "operationId": "getRunStep",
      "name": "Get Run Step",
      "description": "Retrieves a run step.",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_threads__thread_id__runs__run_id__steps__step_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}/runs/{run_id}/steps/{step_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "include[]": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "step_details.tool_calls[*].file_search.results[*].content"
                    ]
                  },
                  "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id",
                "run_id",
                "step_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the thread to which the run and run step belongs."
                },
                "run_id": {
                  "type": "string",
                  "description": "The ID of the run to which the run step belongs."
                },
                "step_id": {
                  "type": "string",
                  "description": "The ID of the run step to retrieve."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_threads__thread_id__runs__run_id__steps__step_id_/output-200.schema.json",
            "type": "object",
            "title": "Run steps",
            "description": "Represents a step in execution of a run.\n",
            "properties": {
              "id": {
                "description": "The identifier of the run step, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `thread.run.step`.",
                "type": "string",
                "enum": [
                  "thread.run.step"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the run step was created.",
                "type": "integer"
              },
              "assistant_id": {
                "description": "The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.",
                "type": "string"
              },
              "thread_id": {
                "description": "The ID of the [thread](/docs/api-reference/threads) that was run.",
                "type": "string"
              },
              "run_id": {
                "description": "The ID of the [run](/docs/api-reference/runs) that this run step is a part of.",
                "type": "string"
              },
              "type": {
                "description": "The type of run step, which can be either `message_creation` or `tool_calls`.",
                "type": "string",
                "enum": [
                  "message_creation",
                  "tool_calls"
                ]
              },
              "status": {
                "description": "The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.",
                "type": "string",
                "enum": [
                  "in_progress",
                  "cancelled",
                  "failed",
                  "completed",
                  "expired"
                ]
              },
              "step_details": {
                "type": "object",
                "description": "The details of the run step.",
                "oneOf": [
                  {
                    "title": "Message creation",
                    "type": "object",
                    "description": "Details of the message creation by the run step.",
                    "properties": {
                      "type": {
                        "description": "Always `message_creation`.",
                        "type": "string",
                        "enum": [
                          "message_creation"
                        ]
                      },
                      "message_creation": {
                        "type": "object",
                        "properties": {
                          "message_id": {
                            "type": "string",
                            "description": "The ID of the message that was created by this run step."
                          }
                        },
                        "required": [
                          "message_id"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "message_creation"
                    ]
                  },
                  {
                    "title": "Tool calls",
                    "type": "object",
                    "description": "Details of the tool call.",
                    "properties": {
                      "type": {
                        "description": "Always `tool_calls`.",
                        "type": "string",
                        "enum": [
                          "tool_calls"
                        ]
                      },
                      "tool_calls": {
                        "type": "array",
                        "description": "An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.\n",
                        "items": {
                          "oneOf": [
                            {
                              "title": "Code Interpreter tool call",
                              "type": "object",
                              "description": "Details of the Code Interpreter tool call the run step was involved in.",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The ID of the tool call."
                                },
                                "type": {
                                  "type": "string",
                                  "description": "The type of tool call. This is always going to be `code_interpreter` for this type of tool call.",
                                  "enum": [
                                    "code_interpreter"
                                  ]
                                },
                                "code_interpreter": {
                                  "type": "object",
                                  "description": "The Code Interpreter tool call definition.",
                                  "required": [
                                    "input",
                                    "outputs"
                                  ],
                                  "properties": {
                                    "input": {
                                      "type": "string",
                                      "description": "The input to the Code Interpreter tool call."
                                    },
                                    "outputs": {
                                      "type": "array",
                                      "description": "The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.",
                                      "items": {
                                        "type": "object",
                                        "oneOf": [
                                          {
                                            "title": "Code Interpreter log output",
                                            "type": "object",
                                            "description": "Text output from the Code Interpreter tool call as part of a run step.",
                                            "properties": {
                                              "type": {
                                                "description": "Always `logs`.",
                                                "type": "string",
                                                "enum": [
                                                  "logs"
                                                ]
                                              },
                                              "logs": {
                                                "type": "string",
                                                "description": "The text output from the Code Interpreter tool call."
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "logs"
                                            ]
                                          },
                                          {
                                            "title": "Code Interpreter image output",
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "description": "Always `image`.",
                                                "type": "string",
                                                "enum": [
                                                  "image"
                                                ]
                                              },
                                              "image": {
                                                "type": "object",
                                                "properties": {
                                                  "file_id": {
                                                    "description": "The [file](/docs/api-reference/files) ID of the image.",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "file_id"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "image"
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "required": [
                                "id",
                                "type",
                                "code_interpreter"
                              ]
                            },
                            {
                              "title": "File search tool call",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The ID of the tool call object."
                                },
                                "type": {
                                  "type": "string",
                                  "description": "The type of tool call. This is always going to be `file_search` for this type of tool call.",
                                  "enum": [
                                    "file_search"
                                  ]
                                },
                                "file_search": {
                                  "type": "object",
                                  "description": "For now, this is always going to be an empty object.",
                                  "properties": {
                                    "ranking_options": {
                                      "title": "File search tool call ranking options",
                                      "type": "object",
                                      "description": "The ranking options for the file search.",
                                      "properties": {
                                        "ranker": {
                                          "type": "string",
                                          "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                          "enum": [
                                            "auto",
                                            "default_2024_08_21"
                                          ]
                                        },
                                        "score_threshold": {
                                          "type": "number",
                                          "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                          "minimum": 0,
                                          "maximum": 1
                                        }
                                      },
                                      "required": [
                                        "ranker",
                                        "score_threshold"
                                      ]
                                    },
                                    "results": {
                                      "type": "array",
                                      "description": "The results of the file search.",
                                      "items": {
                                        "title": "File search tool call result",
                                        "type": "object",
                                        "description": "A result instance of the file search.",
                                        "properties": {
                                          "file_id": {
                                            "type": "string",
                                            "description": "The ID of the file that result was found in."
                                          },
                                          "file_name": {
                                            "type": "string",
                                            "description": "The name of the file that result was found in."
                                          },
                                          "score": {
                                            "type": "number",
                                            "description": "The score of the result. All values must be a floating point number between 0 and 1.",
                                            "minimum": 0,
                                            "maximum": 1
                                          },
                                          "content": {
                                            "type": "array",
                                            "description": "The content of the result that was found. The content is only included if requested via the include query parameter.",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "description": "The type of the content.",
                                                  "enum": [
                                                    "text"
                                                  ]
                                                },
                                                "text": {
                                                  "type": "string",
                                                  "description": "The text content of the file."
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "required": [
                                          "file_id",
                                          "file_name",
                                          "score"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "required": [
                                "id",
                                "type",
                                "file_search"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "Function tool call",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The ID of the tool call object."
                                },
                                "type": {
                                  "type": "string",
                                  "description": "The type of tool call. This is always going to be `function` for this type of tool call.",
                                  "enum": [
                                    "function"
                                  ]
                                },
                                "function": {
                                  "type": "object",
                                  "description": "The definition of the function that was called.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the function."
                                    },
                                    "arguments": {
                                      "type": "string",
                                      "description": "The arguments passed to the function."
                                    },
                                    "output": {
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "description": "The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet."
                                    }
                                  },
                                  "required": [
                                    "name",
                                    "arguments",
                                    "output"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type",
                                "function"
                              ]
                            }
                          ]
                        }
                      }
                    },
                    "required": [
                      "type",
                      "tool_calls"
                    ]
                  }
                ]
              },
              "last_error": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "The last error associated with this run step. Will be `null` if there are no errors.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "One of `server_error` or `rate_limit_exceeded`.",
                    "enum": [
                      "server_error",
                      "rate_limit_exceeded"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "A human-readable description of the error."
                  }
                },
                "required": [
                  "code",
                  "message"
                ]
              },
              "expired_at": {
                "description": "The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "cancelled_at": {
                "description": "The Unix timestamp (in seconds) for when the run step was cancelled.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "failed_at": {
                "description": "The Unix timestamp (in seconds) for when the run step failed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "completed_at": {
                "description": "The Unix timestamp (in seconds) for when the run step completed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "usage": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.",
                "properties": {
                  "completion_tokens": {
                    "type": "integer",
                    "description": "Number of completion tokens used over the course of the run step."
                  },
                  "prompt_tokens": {
                    "type": "integer",
                    "description": "Number of prompt tokens used over the course of the run step."
                  },
                  "total_tokens": {
                    "type": "integer",
                    "description": "Total number of tokens used (prompt + completion)."
                  }
                },
                "required": [
                  "prompt_tokens",
                  "completion_tokens",
                  "total_tokens"
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "assistant_id",
              "thread_id",
              "run_id",
              "type",
              "status",
              "step_details",
              "last_error",
              "expired_at",
              "cancelled_at",
              "failed_at",
              "completed_at",
              "metadata",
              "usage"
            ]
          }
        ]
      }
    },
    {
      "id": "post_threads__thread_id__runs__run_id__submit_tool_outputs",
      "operationId": "submitToolOuputsToRun",
      "name": "Submit Tool Ouputs To Run",
      "description": "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.\n",
      "schema": {
        "tags": [
          "Assistants"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_threads__thread_id__runs__run_id__submit_tool_outputs/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "thread_id",
                "run_id"
              ],
              "properties": {
                "thread_id": {
                  "type": "string",
                  "description": "The ID of the [thread](/docs/api-reference/threads) to which this run belongs."
                },
                "run_id": {
                  "type": "string",
                  "description": "The ID of the run that requires the tool output submission."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "tool_outputs": {
                    "description": "A list of tools for which the outputs are being submitted.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "tool_call_id": {
                          "type": "string",
                          "description": "The ID of the tool call in the `required_action` object within the run object the output is being submitted for."
                        },
                        "output": {
                          "type": "string",
                          "description": "The output of the tool call to be submitted to continue the run."
                        }
                      }
                    }
                  },
                  "stream": {
                    "type": [
                      "boolean",
                      "null"
                    ],
                    "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n"
                  }
                },
                "required": [
                  "tool_outputs"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_threads__thread_id__runs__run_id__submit_tool_outputs/output-200.schema.json",
            "type": "object",
            "title": "A run on a thread",
            "description": "Represents an execution run on a [thread](/docs/api-reference/threads).",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `thread.run`.",
                "type": "string",
                "enum": [
                  "thread.run"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the run was created.",
                "type": "integer"
              },
              "thread_id": {
                "description": "The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.",
                "type": "string"
              },
              "assistant_id": {
                "description": "The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.",
                "type": "string"
              },
              "status": {
                "description": "The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.",
                "type": "string",
                "enum": [
                  "queued",
                  "in_progress",
                  "requires_action",
                  "cancelling",
                  "cancelled",
                  "failed",
                  "completed",
                  "incomplete",
                  "expired"
                ]
              },
              "required_action": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Details on the action required to continue the run. Will be `null` if no action is required.",
                "properties": {
                  "type": {
                    "description": "For now, this is always `submit_tool_outputs`.",
                    "type": "string",
                    "enum": [
                      "submit_tool_outputs"
                    ]
                  },
                  "submit_tool_outputs": {
                    "type": "object",
                    "description": "Details on the tool outputs needed for this run to continue.",
                    "properties": {
                      "tool_calls": {
                        "type": "array",
                        "description": "A list of the relevant tool calls.",
                        "items": {
                          "type": "object",
                          "description": "Tool call objects",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint."
                            },
                            "type": {
                              "type": "string",
                              "description": "The type of tool call the output is required for. For now, this is always `function`.",
                              "enum": [
                                "function"
                              ]
                            },
                            "function": {
                              "type": "object",
                              "description": "The function definition.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the function."
                                },
                                "arguments": {
                                  "type": "string",
                                  "description": "The arguments that the model expects you to pass to the function."
                                }
                              },
                              "required": [
                                "name",
                                "arguments"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type",
                            "function"
                          ]
                        }
                      }
                    },
                    "required": [
                      "tool_calls"
                    ]
                  }
                },
                "required": [
                  "type",
                  "submit_tool_outputs"
                ]
              },
              "last_error": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "The last error associated with this run. Will be `null` if there are no errors.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.",
                    "enum": [
                      "server_error",
                      "rate_limit_exceeded",
                      "invalid_prompt"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "A human-readable description of the error."
                  }
                },
                "required": [
                  "code",
                  "message"
                ]
              },
              "expires_at": {
                "description": "The Unix timestamp (in seconds) for when the run will expire.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "started_at": {
                "description": "The Unix timestamp (in seconds) for when the run was started.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "cancelled_at": {
                "description": "The Unix timestamp (in seconds) for when the run was cancelled.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "failed_at": {
                "description": "The Unix timestamp (in seconds) for when the run failed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "completed_at": {
                "description": "The Unix timestamp (in seconds) for when the run was completed.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "incomplete_details": {
                "description": "Details on why the run is incomplete. Will be `null` if the run is not incomplete.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "reason": {
                    "description": "The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.",
                    "type": "string",
                    "enum": [
                      "max_completion_tokens",
                      "max_prompt_tokens"
                    ]
                  }
                }
              },
              "model": {
                "description": "The model that the [assistant](/docs/api-reference/assistants) used for this run.",
                "type": "string"
              },
              "instructions": {
                "description": "The instructions that the [assistant](/docs/api-reference/assistants) used for this run.",
                "type": "string"
              },
              "tools": {
                "description": "The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.",
                "default": [],
                "type": "array",
                "maxItems": 20,
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Code interpreter tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `code_interpreter`",
                          "enum": [
                            "code_interpreter"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "FileSearch tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `file_search`",
                          "enum": [
                            "file_search"
                          ]
                        },
                        "file_search": {
                          "type": "object",
                          "description": "Overrides for the file search tool.",
                          "properties": {
                            "max_num_results": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 50,
                              "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                            },
                            "ranking_options": {
                              "title": "File search tool call ranking options",
                              "type": "object",
                              "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                              "properties": {
                                "ranker": {
                                  "type": "string",
                                  "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                                  "enum": [
                                    "auto",
                                    "default_2024_08_21"
                                  ]
                                },
                                "score_threshold": {
                                  "type": "number",
                                  "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
                                  "minimum": 0,
                                  "maximum": 1
                                }
                              },
                              "required": [
                                "score_threshold"
                              ]
                            }
                          }
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Function tool",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of tool being defined: `function`",
                          "enum": [
                            "function"
                          ]
                        },
                        "function": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "description": "A description of what the function does, used by the model to choose when and how to call the function."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                            },
                            "parameters": {
                              "type": "object",
                              "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
                              "additionalProperties": true
                            },
                            "strict": {
                              "type": [
                                "boolean",
                                "null"
                              ],
                              "default": false,
                              "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "function"
                      ]
                    }
                  ]
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "usage": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
                "properties": {
                  "completion_tokens": {
                    "type": "integer",
                    "description": "Number of completion tokens used over the course of the run."
                  },
                  "prompt_tokens": {
                    "type": "integer",
                    "description": "Number of prompt tokens used over the course of the run."
                  },
                  "total_tokens": {
                    "type": "integer",
                    "description": "Total number of tokens used (prompt + completion)."
                  }
                },
                "required": [
                  "prompt_tokens",
                  "completion_tokens",
                  "total_tokens"
                ]
              },
              "temperature": {
                "description": "The sampling temperature used for this run. If not set, defaults to 1.",
                "type": [
                  "number",
                  "null"
                ]
              },
              "top_p": {
                "description": "The nucleus sampling value used for this run. If not set, defaults to 1.",
                "type": [
                  "number",
                  "null"
                ]
              },
              "max_prompt_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The maximum number of prompt tokens specified to have been used over the course of the run.\n",
                "minimum": 256
              },
              "max_completion_tokens": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "The maximum number of completion tokens specified to have been used over the course of the run.\n",
                "minimum": 256
              },
              "truncation_strategy": {
                "allOf": [
                  {
                    "type": "object",
                    "title": "Thread Truncation Controls",
                    "description": "Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.",
                        "enum": [
                          "auto",
                          "last_messages"
                        ]
                      },
                      "last_messages": {
                        "type": [
                          "integer",
                          "null"
                        ],
                        "description": "The number of most recent messages from the thread when constructing the context for the run.",
                        "minimum": 1
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {}
                ]
              },
              "tool_choice": {
                "allOf": [
                  {
                    "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools before responding to the user.\nSpecifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "`none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.\n",
                        "enum": [
                          "none",
                          "auto",
                          "required"
                        ]
                      },
                      {
                        "type": "object",
                        "description": "Specifies a tool the model should use. Use to force the model to call a specific tool.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "function",
                              "code_interpreter",
                              "file_search"
                            ],
                            "description": "The type of the tool. If type is `function`, the function name must be set"
                          },
                          "function": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the function to call."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      }
                    ]
                  },
                  {}
                ]
              },
              "parallel_tool_calls": {
                "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
                "type": "boolean",
                "default": true
              },
              "response_format": {
                "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                "oneOf": [
                  {
                    "type": "string",
                    "description": "`auto` is the default value\n",
                    "enum": [
                      "auto"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "Text",
                    "description": "Default response format. Used to generate text responses.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `text`.",
                        "enum": [
                          "text"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON object",
                    "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_object`.",
                        "enum": [
                          "json_object"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "JSON schema",
                    "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_schema`.",
                        "enum": [
                          "json_schema"
                        ]
                      },
                      "json_schema": {
                        "type": "object",
                        "title": "JSON schema",
                        "description": "Structured Outputs configuration options, including a JSON Schema.\n",
                        "properties": {
                          "description": {
                            "type": "string",
                            "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                          },
                          "schema": {
                            "type": "object",
                            "title": "JSON schema",
                            "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
                            "additionalProperties": true
                          },
                          "strict": {
                            "type": [
                              "boolean",
                              "null"
                            ],
                            "default": false,
                            "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "json_schema"
                    ]
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "thread_id",
              "assistant_id",
              "status",
              "required_action",
              "last_error",
              "expires_at",
              "started_at",
              "cancelled_at",
              "failed_at",
              "completed_at",
              "model",
              "instructions",
              "tools",
              "metadata",
              "usage",
              "incomplete_details",
              "max_prompt_tokens",
              "max_completion_tokens",
              "truncation_strategy",
              "tool_choice",
              "parallel_tool_calls",
              "response_format"
            ]
          }
        ]
      }
    },
    {
      "id": "post_uploads",
      "operationId": "createUpload",
      "name": "Create Upload",
      "description": "Creates an intermediate [Upload](/docs/api-reference/uploads/object) object\nthat you can add [Parts](/docs/api-reference/uploads/part-object) to.\nCurrently, an Upload can accept at most 8 GB in total and expires after an\nhour after you create it.\n\nOnce you complete the Upload, we will create a\n[File](/docs/api-reference/files/object) object that contains all the parts\nyou uploaded. This File is usable in the rest of our platform as a regular\nFile object.\n\nFor certain `purpose` values, the correct `mime_type` must be specified. \nPlease refer to documentation for the \n[supported MIME types for your use case](/docs/assistants/tools/file-search#supported-files).\n\nFor guidance on the proper filename extensions for each purpose, please\nfollow the documentation on [creating a\nFile](/docs/api-reference/files/create).\n",
      "schema": {
        "tags": [
          "Uploads"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_uploads/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/uploads"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "filename": {
                    "description": "The name of the file to upload.\n",
                    "type": "string"
                  },
                  "purpose": {
                    "description": "The intended purpose of the uploaded file.\n\nSee the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).\n",
                    "type": "string",
                    "enum": [
                      "assistants",
                      "batch",
                      "fine-tune",
                      "vision"
                    ]
                  },
                  "bytes": {
                    "description": "The number of bytes in the file you are uploading.\n",
                    "type": "integer"
                  },
                  "mime_type": {
                    "description": "The MIME type of the file.\n\nThis must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "filename",
                  "purpose",
                  "bytes",
                  "mime_type"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_uploads/output-200.schema.json",
            "type": "object",
            "title": "Upload",
            "description": "The Upload object can accept byte chunks in the form of Parts.\n",
            "properties": {
              "id": {
                "type": "string",
                "description": "The Upload unique identifier, which can be referenced in API endpoints."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the Upload was created."
              },
              "filename": {
                "type": "string",
                "description": "The name of the file to be uploaded."
              },
              "bytes": {
                "type": "integer",
                "description": "The intended number of bytes to be uploaded."
              },
              "purpose": {
                "type": "string",
                "description": "The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values."
              },
              "status": {
                "type": "string",
                "description": "The status of the Upload.",
                "enum": [
                  "pending",
                  "completed",
                  "cancelled",
                  "expired"
                ]
              },
              "expires_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the Upload will expire."
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always \"upload\".",
                "enum": [
                  "upload"
                ]
              },
              "file": {
                "allOf": [
                  {
                    "title": "OpenAIFile",
                    "description": "The `File` object represents a document that has been uploaded to OpenAI.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The file identifier, which can be referenced in the API endpoints."
                      },
                      "bytes": {
                        "type": "integer",
                        "description": "The size of the file, in bytes."
                      },
                      "created_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the file was created."
                      },
                      "expires_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the file will expire."
                      },
                      "filename": {
                        "type": "string",
                        "description": "The name of the file."
                      },
                      "object": {
                        "type": "string",
                        "description": "The object type, which is always `file`.",
                        "enum": [
                          "file"
                        ]
                      },
                      "purpose": {
                        "type": "string",
                        "description": "The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.",
                        "enum": [
                          "assistants",
                          "assistants_output",
                          "batch",
                          "batch_output",
                          "fine-tune",
                          "fine-tune-results",
                          "vision"
                        ]
                      },
                      "status": {
                        "type": "string",
                        "deprecated": true,
                        "description": "Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.",
                        "enum": [
                          "uploaded",
                          "processed",
                          "error"
                        ]
                      },
                      "status_details": {
                        "type": "string",
                        "deprecated": true,
                        "description": "Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`."
                      }
                    },
                    "required": [
                      "id",
                      "object",
                      "bytes",
                      "created_at",
                      "filename",
                      "purpose",
                      "status"
                    ]
                  },
                  {
                    "description": "The ready File object after the Upload is completed."
                  }
                ]
              }
            },
            "required": [
              "bytes",
              "created_at",
              "expires_at",
              "filename",
              "id",
              "purpose",
              "status"
            ]
          }
        ]
      }
    },
    {
      "id": "post_uploads__upload_id__cancel",
      "operationId": "cancelUpload",
      "name": "Cancel Upload",
      "description": "Cancels the Upload. No Parts may be added after an Upload is cancelled.\n",
      "schema": {
        "tags": [
          "Uploads"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_uploads__upload_id__cancel/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/uploads/{upload_id}/cancel"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "upload_id"
              ],
              "properties": {
                "upload_id": {
                  "type": "string",
                  "example": "upload_abc123",
                  "description": "The ID of the Upload.\n"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_uploads__upload_id__cancel/output-200.schema.json",
            "type": "object",
            "title": "Upload",
            "description": "The Upload object can accept byte chunks in the form of Parts.\n",
            "properties": {
              "id": {
                "type": "string",
                "description": "The Upload unique identifier, which can be referenced in API endpoints."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the Upload was created."
              },
              "filename": {
                "type": "string",
                "description": "The name of the file to be uploaded."
              },
              "bytes": {
                "type": "integer",
                "description": "The intended number of bytes to be uploaded."
              },
              "purpose": {
                "type": "string",
                "description": "The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values."
              },
              "status": {
                "type": "string",
                "description": "The status of the Upload.",
                "enum": [
                  "pending",
                  "completed",
                  "cancelled",
                  "expired"
                ]
              },
              "expires_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the Upload will expire."
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always \"upload\".",
                "enum": [
                  "upload"
                ]
              },
              "file": {
                "allOf": [
                  {
                    "title": "OpenAIFile",
                    "description": "The `File` object represents a document that has been uploaded to OpenAI.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The file identifier, which can be referenced in the API endpoints."
                      },
                      "bytes": {
                        "type": "integer",
                        "description": "The size of the file, in bytes."
                      },
                      "created_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the file was created."
                      },
                      "expires_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the file will expire."
                      },
                      "filename": {
                        "type": "string",
                        "description": "The name of the file."
                      },
                      "object": {
                        "type": "string",
                        "description": "The object type, which is always `file`.",
                        "enum": [
                          "file"
                        ]
                      },
                      "purpose": {
                        "type": "string",
                        "description": "The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.",
                        "enum": [
                          "assistants",
                          "assistants_output",
                          "batch",
                          "batch_output",
                          "fine-tune",
                          "fine-tune-results",
                          "vision"
                        ]
                      },
                      "status": {
                        "type": "string",
                        "deprecated": true,
                        "description": "Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.",
                        "enum": [
                          "uploaded",
                          "processed",
                          "error"
                        ]
                      },
                      "status_details": {
                        "type": "string",
                        "deprecated": true,
                        "description": "Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`."
                      }
                    },
                    "required": [
                      "id",
                      "object",
                      "bytes",
                      "created_at",
                      "filename",
                      "purpose",
                      "status"
                    ]
                  },
                  {
                    "description": "The ready File object after the Upload is completed."
                  }
                ]
              }
            },
            "required": [
              "bytes",
              "created_at",
              "expires_at",
              "filename",
              "id",
              "purpose",
              "status"
            ]
          }
        ]
      }
    },
    {
      "id": "post_uploads__upload_id__complete",
      "operationId": "completeUpload",
      "name": "Complete Upload",
      "description": "Completes the [Upload](/docs/api-reference/uploads/object). \n\nWithin the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is ready to use in the rest of the platform.\n\nYou can specify the order of the Parts by passing in an ordered list of the Part IDs.\n\nThe number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed.\n",
      "schema": {
        "tags": [
          "Uploads"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_uploads__upload_id__complete/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/uploads/{upload_id}/complete"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "upload_id"
              ],
              "properties": {
                "upload_id": {
                  "type": "string",
                  "example": "upload_abc123",
                  "description": "The ID of the Upload.\n"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "part_ids": {
                    "type": "array",
                    "description": "The ordered list of Part IDs.\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "md5": {
                    "description": "The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "part_ids"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_uploads__upload_id__complete/output-200.schema.json",
            "type": "object",
            "title": "Upload",
            "description": "The Upload object can accept byte chunks in the form of Parts.\n",
            "properties": {
              "id": {
                "type": "string",
                "description": "The Upload unique identifier, which can be referenced in API endpoints."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the Upload was created."
              },
              "filename": {
                "type": "string",
                "description": "The name of the file to be uploaded."
              },
              "bytes": {
                "type": "integer",
                "description": "The intended number of bytes to be uploaded."
              },
              "purpose": {
                "type": "string",
                "description": "The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values."
              },
              "status": {
                "type": "string",
                "description": "The status of the Upload.",
                "enum": [
                  "pending",
                  "completed",
                  "cancelled",
                  "expired"
                ]
              },
              "expires_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the Upload will expire."
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always \"upload\".",
                "enum": [
                  "upload"
                ]
              },
              "file": {
                "allOf": [
                  {
                    "title": "OpenAIFile",
                    "description": "The `File` object represents a document that has been uploaded to OpenAI.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The file identifier, which can be referenced in the API endpoints."
                      },
                      "bytes": {
                        "type": "integer",
                        "description": "The size of the file, in bytes."
                      },
                      "created_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the file was created."
                      },
                      "expires_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the file will expire."
                      },
                      "filename": {
                        "type": "string",
                        "description": "The name of the file."
                      },
                      "object": {
                        "type": "string",
                        "description": "The object type, which is always `file`.",
                        "enum": [
                          "file"
                        ]
                      },
                      "purpose": {
                        "type": "string",
                        "description": "The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.",
                        "enum": [
                          "assistants",
                          "assistants_output",
                          "batch",
                          "batch_output",
                          "fine-tune",
                          "fine-tune-results",
                          "vision"
                        ]
                      },
                      "status": {
                        "type": "string",
                        "deprecated": true,
                        "description": "Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.",
                        "enum": [
                          "uploaded",
                          "processed",
                          "error"
                        ]
                      },
                      "status_details": {
                        "type": "string",
                        "deprecated": true,
                        "description": "Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`."
                      }
                    },
                    "required": [
                      "id",
                      "object",
                      "bytes",
                      "created_at",
                      "filename",
                      "purpose",
                      "status"
                    ]
                  },
                  {
                    "description": "The ready File object after the Upload is completed."
                  }
                ]
              }
            },
            "required": [
              "bytes",
              "created_at",
              "expires_at",
              "filename",
              "id",
              "purpose",
              "status"
            ]
          }
        ]
      }
    },
    {
      "id": "post_uploads__upload_id__parts",
      "operationId": "addUploadPart",
      "name": "Add Upload Part",
      "description": "Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload. \n\nEach Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.\n\nIt is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](/docs/api-reference/uploads/complete).\n",
      "schema": {
        "tags": [
          "Uploads"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_uploads__upload_id__parts/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/uploads/{upload_id}/parts"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "upload_id"
              ],
              "properties": {
                "upload_id": {
                  "type": "string",
                  "example": "upload_abc123",
                  "description": "The ID of the Upload.\n"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "multipart/form-data"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "data": {
                    "description": "The chunk of bytes for this Part.\n",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "data"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_uploads__upload_id__parts/output-200.schema.json",
            "type": "object",
            "title": "UploadPart",
            "description": "The upload Part represents a chunk of bytes we can add to an Upload object.\n",
            "properties": {
              "id": {
                "type": "string",
                "description": "The upload Part unique identifier, which can be referenced in API endpoints."
              },
              "created_at": {
                "type": "integer",
                "description": "The Unix timestamp (in seconds) for when the Part was created."
              },
              "upload_id": {
                "type": "string",
                "description": "The ID of the Upload object that this Part was added to."
              },
              "object": {
                "type": "string",
                "description": "The object type, which is always `upload.part`.",
                "enum": [
                  "upload.part"
                ]
              }
            },
            "required": [
              "created_at",
              "id",
              "object",
              "upload_id"
            ]
          }
        ]
      }
    },
    {
      "id": "get_vector_stores",
      "operationId": "listVectorStores",
      "name": "List Vector Stores",
      "description": "Returns a list of vector stores.",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_vector_stores/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                },
                "order": {
                  "type": "string",
                  "default": "desc",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                },
                "before": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_vector_stores/output-200.schema.json",
            "type": "any",
            "properties": {
              "object": {
                "type": "string",
                "example": "list"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "Vector store",
                  "description": "A vector store is a collection of processed files can be used by the `file_search` tool.",
                  "properties": {
                    "id": {
                      "description": "The identifier, which can be referenced in API endpoints.",
                      "type": "string"
                    },
                    "object": {
                      "description": "The object type, which is always `vector_store`.",
                      "type": "string",
                      "enum": [
                        "vector_store"
                      ]
                    },
                    "created_at": {
                      "description": "The Unix timestamp (in seconds) for when the vector store was created.",
                      "type": "integer"
                    },
                    "name": {
                      "description": "The name of the vector store.",
                      "type": "string"
                    },
                    "usage_bytes": {
                      "description": "The total number of bytes used by the files in the vector store.",
                      "type": "integer"
                    },
                    "file_counts": {
                      "type": "object",
                      "properties": {
                        "in_progress": {
                          "description": "The number of files that are currently being processed.",
                          "type": "integer"
                        },
                        "completed": {
                          "description": "The number of files that have been successfully processed.",
                          "type": "integer"
                        },
                        "failed": {
                          "description": "The number of files that have failed to process.",
                          "type": "integer"
                        },
                        "cancelled": {
                          "description": "The number of files that were cancelled.",
                          "type": "integer"
                        },
                        "total": {
                          "description": "The total number of files.",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "in_progress",
                        "completed",
                        "failed",
                        "cancelled",
                        "total"
                      ]
                    },
                    "status": {
                      "description": "The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.",
                      "type": "string",
                      "enum": [
                        "expired",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "expires_after": {
                      "type": "object",
                      "title": "Vector store expiration policy",
                      "description": "The expiration policy for a vector store.",
                      "properties": {
                        "anchor": {
                          "description": "Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.",
                          "type": "string",
                          "enum": [
                            "last_active_at"
                          ]
                        },
                        "days": {
                          "description": "The number of days after the anchor time that the vector store will expire.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 365
                        }
                      },
                      "required": [
                        "anchor",
                        "days"
                      ]
                    },
                    "expires_at": {
                      "description": "The Unix timestamp (in seconds) for when the vector store will expire.",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "last_active_at": {
                      "description": "The Unix timestamp (in seconds) for when the vector store was last active.",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "metadata": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "id",
                    "object",
                    "usage_bytes",
                    "created_at",
                    "status",
                    "last_active_at",
                    "name",
                    "file_counts",
                    "metadata"
                  ]
                }
              },
              "first_id": {
                "type": "string",
                "example": "vs_abc123"
              },
              "last_id": {
                "type": "string",
                "example": "vs_abc456"
              },
              "has_more": {
                "type": "boolean",
                "example": false
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "post_vector_stores",
      "operationId": "createVectorStore",
      "name": "Create Vector Store",
      "description": "Create a vector store.",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_vector_stores/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "properties": {}
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "file_ids": {
                    "description": "A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.",
                    "type": "array",
                    "maxItems": 500,
                    "items": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "description": "The name of the vector store.",
                    "type": "string"
                  },
                  "expires_after": {
                    "type": "object",
                    "title": "Vector store expiration policy",
                    "description": "The expiration policy for a vector store.",
                    "properties": {
                      "anchor": {
                        "description": "Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.",
                        "type": "string",
                        "enum": [
                          "last_active_at"
                        ]
                      },
                      "days": {
                        "description": "The number of days after the anchor time that the vector store will expire.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 365
                      }
                    },
                    "required": [
                      "anchor",
                      "days"
                    ]
                  },
                  "chunking_strategy": {
                    "type": "object",
                    "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "Auto Chunking Strategy",
                        "description": "The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Always `auto`.",
                            "enum": [
                              "auto"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "type": "object",
                        "title": "Static Chunking Strategy",
                        "description": "Customize your own chunking strategy by setting chunk size and chunk overlap.",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Always `static`.",
                            "enum": [
                              "static"
                            ]
                          },
                          "static": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "max_chunk_size_tokens": {
                                "type": "integer",
                                "minimum": 100,
                                "maximum": 4096,
                                "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                              },
                              "chunk_overlap_tokens": {
                                "type": "integer",
                                "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                              }
                            },
                            "required": [
                              "max_chunk_size_tokens",
                              "chunk_overlap_tokens"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "static"
                        ]
                      }
                    ]
                  },
                  "metadata": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_vector_stores/output-200.schema.json",
            "type": "object",
            "title": "Vector store",
            "description": "A vector store is a collection of processed files can be used by the `file_search` tool.",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `vector_store`.",
                "type": "string",
                "enum": [
                  "vector_store"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the vector store was created.",
                "type": "integer"
              },
              "name": {
                "description": "The name of the vector store.",
                "type": "string"
              },
              "usage_bytes": {
                "description": "The total number of bytes used by the files in the vector store.",
                "type": "integer"
              },
              "file_counts": {
                "type": "object",
                "properties": {
                  "in_progress": {
                    "description": "The number of files that are currently being processed.",
                    "type": "integer"
                  },
                  "completed": {
                    "description": "The number of files that have been successfully processed.",
                    "type": "integer"
                  },
                  "failed": {
                    "description": "The number of files that have failed to process.",
                    "type": "integer"
                  },
                  "cancelled": {
                    "description": "The number of files that were cancelled.",
                    "type": "integer"
                  },
                  "total": {
                    "description": "The total number of files.",
                    "type": "integer"
                  }
                },
                "required": [
                  "in_progress",
                  "completed",
                  "failed",
                  "cancelled",
                  "total"
                ]
              },
              "status": {
                "description": "The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.",
                "type": "string",
                "enum": [
                  "expired",
                  "in_progress",
                  "completed"
                ]
              },
              "expires_after": {
                "type": "object",
                "title": "Vector store expiration policy",
                "description": "The expiration policy for a vector store.",
                "properties": {
                  "anchor": {
                    "description": "Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.",
                    "type": "string",
                    "enum": [
                      "last_active_at"
                    ]
                  },
                  "days": {
                    "description": "The number of days after the anchor time that the vector store will expire.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 365
                  }
                },
                "required": [
                  "anchor",
                  "days"
                ]
              },
              "expires_at": {
                "description": "The Unix timestamp (in seconds) for when the vector store will expire.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "last_active_at": {
                "description": "The Unix timestamp (in seconds) for when the vector store was last active.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "id",
              "object",
              "usage_bytes",
              "created_at",
              "status",
              "last_active_at",
              "name",
              "file_counts",
              "metadata"
            ]
          }
        ]
      }
    },
    {
      "id": "get_vector_stores__vector_store_id_",
      "operationId": "getVectorStore",
      "name": "Get Vector Store",
      "description": "Retrieves a vector store.",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_vector_stores__vector_store_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores/{vector_store_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "vector_store_id"
              ],
              "properties": {
                "vector_store_id": {
                  "type": "string",
                  "description": "The ID of the vector store to retrieve."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_vector_stores__vector_store_id_/output-200.schema.json",
            "type": "object",
            "title": "Vector store",
            "description": "A vector store is a collection of processed files can be used by the `file_search` tool.",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `vector_store`.",
                "type": "string",
                "enum": [
                  "vector_store"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the vector store was created.",
                "type": "integer"
              },
              "name": {
                "description": "The name of the vector store.",
                "type": "string"
              },
              "usage_bytes": {
                "description": "The total number of bytes used by the files in the vector store.",
                "type": "integer"
              },
              "file_counts": {
                "type": "object",
                "properties": {
                  "in_progress": {
                    "description": "The number of files that are currently being processed.",
                    "type": "integer"
                  },
                  "completed": {
                    "description": "The number of files that have been successfully processed.",
                    "type": "integer"
                  },
                  "failed": {
                    "description": "The number of files that have failed to process.",
                    "type": "integer"
                  },
                  "cancelled": {
                    "description": "The number of files that were cancelled.",
                    "type": "integer"
                  },
                  "total": {
                    "description": "The total number of files.",
                    "type": "integer"
                  }
                },
                "required": [
                  "in_progress",
                  "completed",
                  "failed",
                  "cancelled",
                  "total"
                ]
              },
              "status": {
                "description": "The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.",
                "type": "string",
                "enum": [
                  "expired",
                  "in_progress",
                  "completed"
                ]
              },
              "expires_after": {
                "type": "object",
                "title": "Vector store expiration policy",
                "description": "The expiration policy for a vector store.",
                "properties": {
                  "anchor": {
                    "description": "Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.",
                    "type": "string",
                    "enum": [
                      "last_active_at"
                    ]
                  },
                  "days": {
                    "description": "The number of days after the anchor time that the vector store will expire.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 365
                  }
                },
                "required": [
                  "anchor",
                  "days"
                ]
              },
              "expires_at": {
                "description": "The Unix timestamp (in seconds) for when the vector store will expire.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "last_active_at": {
                "description": "The Unix timestamp (in seconds) for when the vector store was last active.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "id",
              "object",
              "usage_bytes",
              "created_at",
              "status",
              "last_active_at",
              "name",
              "file_counts",
              "metadata"
            ]
          }
        ]
      }
    },
    {
      "id": "post_vector_stores__vector_store_id_",
      "operationId": "modifyVectorStore",
      "name": "Modify Vector Store",
      "description": "Modifies a vector store.",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_vector_stores__vector_store_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores/{vector_store_id}"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "vector_store_id"
              ],
              "properties": {
                "vector_store_id": {
                  "type": "string",
                  "description": "The ID of the vector store to modify."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "description": "The name of the vector store.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "expires_after": {
                    "allOf": [
                      {
                        "type": "object",
                        "title": "Vector store expiration policy",
                        "description": "The expiration policy for a vector store.",
                        "properties": {
                          "anchor": {
                            "description": "Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.",
                            "type": "string",
                            "enum": [
                              "last_active_at"
                            ]
                          },
                          "days": {
                            "description": "The number of days after the anchor time that the vector store will expire.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 365
                          }
                        },
                        "required": [
                          "anchor",
                          "days"
                        ]
                      },
                      {}
                    ]
                  },
                  "metadata": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_vector_stores__vector_store_id_/output-200.schema.json",
            "type": "object",
            "title": "Vector store",
            "description": "A vector store is a collection of processed files can be used by the `file_search` tool.",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `vector_store`.",
                "type": "string",
                "enum": [
                  "vector_store"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the vector store was created.",
                "type": "integer"
              },
              "name": {
                "description": "The name of the vector store.",
                "type": "string"
              },
              "usage_bytes": {
                "description": "The total number of bytes used by the files in the vector store.",
                "type": "integer"
              },
              "file_counts": {
                "type": "object",
                "properties": {
                  "in_progress": {
                    "description": "The number of files that are currently being processed.",
                    "type": "integer"
                  },
                  "completed": {
                    "description": "The number of files that have been successfully processed.",
                    "type": "integer"
                  },
                  "failed": {
                    "description": "The number of files that have failed to process.",
                    "type": "integer"
                  },
                  "cancelled": {
                    "description": "The number of files that were cancelled.",
                    "type": "integer"
                  },
                  "total": {
                    "description": "The total number of files.",
                    "type": "integer"
                  }
                },
                "required": [
                  "in_progress",
                  "completed",
                  "failed",
                  "cancelled",
                  "total"
                ]
              },
              "status": {
                "description": "The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.",
                "type": "string",
                "enum": [
                  "expired",
                  "in_progress",
                  "completed"
                ]
              },
              "expires_after": {
                "type": "object",
                "title": "Vector store expiration policy",
                "description": "The expiration policy for a vector store.",
                "properties": {
                  "anchor": {
                    "description": "Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.",
                    "type": "string",
                    "enum": [
                      "last_active_at"
                    ]
                  },
                  "days": {
                    "description": "The number of days after the anchor time that the vector store will expire.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 365
                  }
                },
                "required": [
                  "anchor",
                  "days"
                ]
              },
              "expires_at": {
                "description": "The Unix timestamp (in seconds) for when the vector store will expire.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "last_active_at": {
                "description": "The Unix timestamp (in seconds) for when the vector store was last active.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "id",
              "object",
              "usage_bytes",
              "created_at",
              "status",
              "last_active_at",
              "name",
              "file_counts",
              "metadata"
            ]
          }
        ]
      }
    },
    {
      "id": "delete_vector_stores__vector_store_id_",
      "operationId": "deleteVectorStore",
      "name": "Delete Vector Store",
      "description": "Delete a vector store.",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_vector_stores__vector_store_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores/{vector_store_id}"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "vector_store_id"
              ],
              "properties": {
                "vector_store_id": {
                  "type": "string",
                  "description": "The ID of the vector store to delete."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_vector_stores__vector_store_id_/output-200.schema.json",
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              },
              "object": {
                "type": "string",
                "enum": [
                  "vector_store.deleted"
                ]
              }
            },
            "required": [
              "id",
              "object",
              "deleted"
            ]
          }
        ]
      }
    },
    {
      "id": "post_vector_stores__vector_store_id__file_batches",
      "operationId": "createVectorStoreFileBatch",
      "name": "Create Vector Store File Batch",
      "description": "Create a vector store file batch.",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_vector_stores__vector_store_id__file_batches/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores/{vector_store_id}/file_batches"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "vector_store_id"
              ],
              "properties": {
                "vector_store_id": {
                  "type": "string",
                  "example": "vs_abc123",
                  "description": "The ID of the vector store for which to create a File Batch.\n"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "file_ids": {
                    "description": "A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.",
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 500,
                    "items": {
                      "type": "string"
                    }
                  },
                  "chunking_strategy": {
                    "type": "object",
                    "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "Auto Chunking Strategy",
                        "description": "The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Always `auto`.",
                            "enum": [
                              "auto"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "type": "object",
                        "title": "Static Chunking Strategy",
                        "description": "Customize your own chunking strategy by setting chunk size and chunk overlap.",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Always `static`.",
                            "enum": [
                              "static"
                            ]
                          },
                          "static": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "max_chunk_size_tokens": {
                                "type": "integer",
                                "minimum": 100,
                                "maximum": 4096,
                                "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                              },
                              "chunk_overlap_tokens": {
                                "type": "integer",
                                "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                              }
                            },
                            "required": [
                              "max_chunk_size_tokens",
                              "chunk_overlap_tokens"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "static"
                        ]
                      }
                    ]
                  },
                  "attributes": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be \nuseful for storing additional information about the object in a structured \nformat, and querying for objects via API or the dashboard. Keys are strings \nwith a maximum length of 64 characters. Values are strings with a maximum \nlength of 512 characters, booleans, or numbers.\n",
                    "maxProperties": 16,
                    "additionalProperties": {
                      "oneOf": [
                        {
                          "type": "string",
                          "maxLength": 512
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "boolean"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "file_ids"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_vector_stores__vector_store_id__file_batches/output-200.schema.json",
            "type": "object",
            "title": "Vector store file batch",
            "description": "A batch of files attached to a vector store.",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `vector_store.file_batch`.",
                "type": "string",
                "enum": [
                  "vector_store.files_batch"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the vector store files batch was created.",
                "type": "integer"
              },
              "vector_store_id": {
                "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.",
                "type": "string"
              },
              "status": {
                "description": "The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.",
                "type": "string",
                "enum": [
                  "in_progress",
                  "completed",
                  "cancelled",
                  "failed"
                ]
              },
              "file_counts": {
                "type": "object",
                "properties": {
                  "in_progress": {
                    "description": "The number of files that are currently being processed.",
                    "type": "integer"
                  },
                  "completed": {
                    "description": "The number of files that have been processed.",
                    "type": "integer"
                  },
                  "failed": {
                    "description": "The number of files that have failed to process.",
                    "type": "integer"
                  },
                  "cancelled": {
                    "description": "The number of files that where cancelled.",
                    "type": "integer"
                  },
                  "total": {
                    "description": "The total number of files.",
                    "type": "integer"
                  }
                },
                "required": [
                  "in_progress",
                  "completed",
                  "cancelled",
                  "failed",
                  "total"
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "vector_store_id",
              "status",
              "file_counts"
            ]
          }
        ]
      }
    },
    {
      "id": "get_vector_stores__vector_store_id__file_batches__batch_id_",
      "operationId": "getVectorStoreFileBatch",
      "name": "Get Vector Store File Batch",
      "description": "Retrieves a vector store file batch.",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_vector_stores__vector_store_id__file_batches__batch_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores/{vector_store_id}/file_batches/{batch_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "vector_store_id",
                "batch_id"
              ],
              "properties": {
                "vector_store_id": {
                  "type": "string",
                  "example": "vs_abc123",
                  "description": "The ID of the vector store that the file batch belongs to."
                },
                "batch_id": {
                  "type": "string",
                  "example": "vsfb_abc123",
                  "description": "The ID of the file batch being retrieved."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_vector_stores__vector_store_id__file_batches__batch_id_/output-200.schema.json",
            "type": "object",
            "title": "Vector store file batch",
            "description": "A batch of files attached to a vector store.",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `vector_store.file_batch`.",
                "type": "string",
                "enum": [
                  "vector_store.files_batch"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the vector store files batch was created.",
                "type": "integer"
              },
              "vector_store_id": {
                "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.",
                "type": "string"
              },
              "status": {
                "description": "The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.",
                "type": "string",
                "enum": [
                  "in_progress",
                  "completed",
                  "cancelled",
                  "failed"
                ]
              },
              "file_counts": {
                "type": "object",
                "properties": {
                  "in_progress": {
                    "description": "The number of files that are currently being processed.",
                    "type": "integer"
                  },
                  "completed": {
                    "description": "The number of files that have been processed.",
                    "type": "integer"
                  },
                  "failed": {
                    "description": "The number of files that have failed to process.",
                    "type": "integer"
                  },
                  "cancelled": {
                    "description": "The number of files that where cancelled.",
                    "type": "integer"
                  },
                  "total": {
                    "description": "The total number of files.",
                    "type": "integer"
                  }
                },
                "required": [
                  "in_progress",
                  "completed",
                  "cancelled",
                  "failed",
                  "total"
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "vector_store_id",
              "status",
              "file_counts"
            ]
          }
        ]
      }
    },
    {
      "id": "post_vector_stores__vector_store_id__file_batches__batch_id__cancel",
      "operationId": "cancelVectorStoreFileBatch",
      "name": "Cancel Vector Store File Batch",
      "description": "Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_vector_stores__vector_store_id__file_batches__batch_id__cancel/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "vector_store_id",
                "batch_id"
              ],
              "properties": {
                "vector_store_id": {
                  "type": "string",
                  "description": "The ID of the vector store that the file batch belongs to."
                },
                "batch_id": {
                  "type": "string",
                  "description": "The ID of the file batch to cancel."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_vector_stores__vector_store_id__file_batches__batch_id__cancel/output-200.schema.json",
            "type": "object",
            "title": "Vector store file batch",
            "description": "A batch of files attached to a vector store.",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `vector_store.file_batch`.",
                "type": "string",
                "enum": [
                  "vector_store.files_batch"
                ]
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the vector store files batch was created.",
                "type": "integer"
              },
              "vector_store_id": {
                "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.",
                "type": "string"
              },
              "status": {
                "description": "The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.",
                "type": "string",
                "enum": [
                  "in_progress",
                  "completed",
                  "cancelled",
                  "failed"
                ]
              },
              "file_counts": {
                "type": "object",
                "properties": {
                  "in_progress": {
                    "description": "The number of files that are currently being processed.",
                    "type": "integer"
                  },
                  "completed": {
                    "description": "The number of files that have been processed.",
                    "type": "integer"
                  },
                  "failed": {
                    "description": "The number of files that have failed to process.",
                    "type": "integer"
                  },
                  "cancelled": {
                    "description": "The number of files that where cancelled.",
                    "type": "integer"
                  },
                  "total": {
                    "description": "The total number of files.",
                    "type": "integer"
                  }
                },
                "required": [
                  "in_progress",
                  "completed",
                  "cancelled",
                  "failed",
                  "total"
                ]
              }
            },
            "required": [
              "id",
              "object",
              "created_at",
              "vector_store_id",
              "status",
              "file_counts"
            ]
          }
        ]
      }
    },
    {
      "id": "get_vector_stores__vector_store_id__file_batches__batch_id__files",
      "operationId": "listFilesInVectorStoreBatch",
      "name": "List Files In Vector Store Batch",
      "description": "Returns a list of vector store files in a batch.",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_vector_stores__vector_store_id__file_batches__batch_id__files/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores/{vector_store_id}/file_batches/{batch_id}/files"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                },
                "order": {
                  "type": "string",
                  "default": "desc",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                },
                "before": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
                },
                "filter": {
                  "type": "string",
                  "enum": [
                    "in_progress",
                    "completed",
                    "failed",
                    "cancelled"
                  ],
                  "description": "Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "vector_store_id",
                "batch_id"
              ],
              "properties": {
                "vector_store_id": {
                  "type": "string",
                  "description": "The ID of the vector store that the files belong to."
                },
                "batch_id": {
                  "type": "string",
                  "description": "The ID of the file batch that the files belong to."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_vector_stores__vector_store_id__file_batches__batch_id__files/output-200.schema.json",
            "type": "any",
            "properties": {
              "object": {
                "type": "string",
                "example": "list"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "Vector store files",
                  "description": "A list of files attached to a vector store.",
                  "properties": {
                    "id": {
                      "description": "The identifier, which can be referenced in API endpoints.",
                      "type": "string"
                    },
                    "object": {
                      "description": "The object type, which is always `vector_store.file`.",
                      "type": "string",
                      "enum": [
                        "vector_store.file"
                      ]
                    },
                    "usage_bytes": {
                      "description": "The total vector store usage in bytes. Note that this may be different from the original file size.",
                      "type": "integer"
                    },
                    "created_at": {
                      "description": "The Unix timestamp (in seconds) for when the vector store file was created.",
                      "type": "integer"
                    },
                    "vector_store_id": {
                      "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.",
                      "type": "string"
                    },
                    "status": {
                      "description": "The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.",
                      "type": "string",
                      "enum": [
                        "in_progress",
                        "completed",
                        "cancelled",
                        "failed"
                      ]
                    },
                    "last_error": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "The last error associated with this vector store file. Will be `null` if there are no errors.",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "One of `server_error` or `rate_limit_exceeded`.",
                          "enum": [
                            "server_error",
                            "unsupported_file",
                            "invalid_file"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "description": "A human-readable description of the error."
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ]
                    },
                    "chunking_strategy": {
                      "type": "object",
                      "description": "The strategy used to chunk the file.",
                      "oneOf": [
                        {
                          "type": "object",
                          "title": "Static Chunking Strategy",
                          "additionalProperties": false,
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Always `static`.",
                              "enum": [
                                "static"
                              ]
                            },
                            "static": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "max_chunk_size_tokens": {
                                  "type": "integer",
                                  "minimum": 100,
                                  "maximum": 4096,
                                  "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                                },
                                "chunk_overlap_tokens": {
                                  "type": "integer",
                                  "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                                }
                              },
                              "required": [
                                "max_chunk_size_tokens",
                                "chunk_overlap_tokens"
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "static"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "Other Chunking Strategy",
                          "description": "This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API.",
                          "additionalProperties": false,
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Always `other`.",
                              "enum": [
                                "other"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        }
                      ]
                    },
                    "attributes": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "Set of 16 key-value pairs that can be attached to an object. This can be \nuseful for storing additional information about the object in a structured \nformat, and querying for objects via API or the dashboard. Keys are strings \nwith a maximum length of 64 characters. Values are strings with a maximum \nlength of 512 characters, booleans, or numbers.\n",
                      "maxProperties": 16,
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string",
                            "maxLength": 512
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "boolean"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "id",
                    "object",
                    "usage_bytes",
                    "created_at",
                    "vector_store_id",
                    "status",
                    "last_error"
                  ]
                }
              },
              "first_id": {
                "type": "string",
                "example": "file-abc123"
              },
              "last_id": {
                "type": "string",
                "example": "file-abc456"
              },
              "has_more": {
                "type": "boolean",
                "example": false
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "get_vector_stores__vector_store_id__files",
      "operationId": "listVectorStoreFiles",
      "name": "List Vector Store Files",
      "description": "Returns a list of vector store files.",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_vector_stores__vector_store_id__files/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores/{vector_store_id}/files"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {
                "limit": {
                  "type": "integer",
                  "default": 20,
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                },
                "order": {
                  "type": "string",
                  "default": "desc",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
                },
                "after": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                },
                "before": {
                  "type": "string",
                  "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
                },
                "filter": {
                  "type": "string",
                  "enum": [
                    "in_progress",
                    "completed",
                    "failed",
                    "cancelled"
                  ],
                  "description": "Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`."
                }
              }
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "vector_store_id"
              ],
              "properties": {
                "vector_store_id": {
                  "type": "string",
                  "description": "The ID of the vector store that the files belong to."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_vector_stores__vector_store_id__files/output-200.schema.json",
            "type": "any",
            "properties": {
              "object": {
                "type": "string",
                "example": "list"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "Vector store files",
                  "description": "A list of files attached to a vector store.",
                  "properties": {
                    "id": {
                      "description": "The identifier, which can be referenced in API endpoints.",
                      "type": "string"
                    },
                    "object": {
                      "description": "The object type, which is always `vector_store.file`.",
                      "type": "string",
                      "enum": [
                        "vector_store.file"
                      ]
                    },
                    "usage_bytes": {
                      "description": "The total vector store usage in bytes. Note that this may be different from the original file size.",
                      "type": "integer"
                    },
                    "created_at": {
                      "description": "The Unix timestamp (in seconds) for when the vector store file was created.",
                      "type": "integer"
                    },
                    "vector_store_id": {
                      "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.",
                      "type": "string"
                    },
                    "status": {
                      "description": "The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.",
                      "type": "string",
                      "enum": [
                        "in_progress",
                        "completed",
                        "cancelled",
                        "failed"
                      ]
                    },
                    "last_error": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "The last error associated with this vector store file. Will be `null` if there are no errors.",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "One of `server_error` or `rate_limit_exceeded`.",
                          "enum": [
                            "server_error",
                            "unsupported_file",
                            "invalid_file"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "description": "A human-readable description of the error."
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ]
                    },
                    "chunking_strategy": {
                      "type": "object",
                      "description": "The strategy used to chunk the file.",
                      "oneOf": [
                        {
                          "type": "object",
                          "title": "Static Chunking Strategy",
                          "additionalProperties": false,
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Always `static`.",
                              "enum": [
                                "static"
                              ]
                            },
                            "static": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "max_chunk_size_tokens": {
                                  "type": "integer",
                                  "minimum": 100,
                                  "maximum": 4096,
                                  "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                                },
                                "chunk_overlap_tokens": {
                                  "type": "integer",
                                  "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                                }
                              },
                              "required": [
                                "max_chunk_size_tokens",
                                "chunk_overlap_tokens"
                              ]
                            }
                          },
                          "required": [
                            "type",
                            "static"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "Other Chunking Strategy",
                          "description": "This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API.",
                          "additionalProperties": false,
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Always `other`.",
                              "enum": [
                                "other"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        }
                      ]
                    },
                    "attributes": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "Set of 16 key-value pairs that can be attached to an object. This can be \nuseful for storing additional information about the object in a structured \nformat, and querying for objects via API or the dashboard. Keys are strings \nwith a maximum length of 64 characters. Values are strings with a maximum \nlength of 512 characters, booleans, or numbers.\n",
                      "maxProperties": 16,
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string",
                            "maxLength": 512
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "boolean"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "id",
                    "object",
                    "usage_bytes",
                    "created_at",
                    "vector_store_id",
                    "status",
                    "last_error"
                  ]
                }
              },
              "first_id": {
                "type": "string",
                "example": "file-abc123"
              },
              "last_id": {
                "type": "string",
                "example": "file-abc456"
              },
              "has_more": {
                "type": "boolean",
                "example": false
              }
            },
            "required": [
              "object",
              "data",
              "first_id",
              "last_id",
              "has_more"
            ]
          }
        ]
      }
    },
    {
      "id": "post_vector_stores__vector_store_id__files",
      "operationId": "createVectorStoreFile",
      "name": "Create Vector Store File",
      "description": "Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_vector_stores__vector_store_id__files/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores/{vector_store_id}/files"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "vector_store_id"
              ],
              "properties": {
                "vector_store_id": {
                  "type": "string",
                  "example": "vs_abc123",
                  "description": "The ID of the vector store for which to create a File.\n"
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "file_id": {
                    "description": "A [File](/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files.",
                    "type": "string"
                  },
                  "chunking_strategy": {
                    "type": "object",
                    "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "Auto Chunking Strategy",
                        "description": "The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Always `auto`.",
                            "enum": [
                              "auto"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "type": "object",
                        "title": "Static Chunking Strategy",
                        "description": "Customize your own chunking strategy by setting chunk size and chunk overlap.",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Always `static`.",
                            "enum": [
                              "static"
                            ]
                          },
                          "static": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "max_chunk_size_tokens": {
                                "type": "integer",
                                "minimum": 100,
                                "maximum": 4096,
                                "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                              },
                              "chunk_overlap_tokens": {
                                "type": "integer",
                                "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                              }
                            },
                            "required": [
                              "max_chunk_size_tokens",
                              "chunk_overlap_tokens"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "static"
                        ]
                      }
                    ]
                  },
                  "attributes": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be \nuseful for storing additional information about the object in a structured \nformat, and querying for objects via API or the dashboard. Keys are strings \nwith a maximum length of 64 characters. Values are strings with a maximum \nlength of 512 characters, booleans, or numbers.\n",
                    "maxProperties": 16,
                    "additionalProperties": {
                      "oneOf": [
                        {
                          "type": "string",
                          "maxLength": 512
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "boolean"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "file_id"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_vector_stores__vector_store_id__files/output-200.schema.json",
            "type": "object",
            "title": "Vector store files",
            "description": "A list of files attached to a vector store.",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `vector_store.file`.",
                "type": "string",
                "enum": [
                  "vector_store.file"
                ]
              },
              "usage_bytes": {
                "description": "The total vector store usage in bytes. Note that this may be different from the original file size.",
                "type": "integer"
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the vector store file was created.",
                "type": "integer"
              },
              "vector_store_id": {
                "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.",
                "type": "string"
              },
              "status": {
                "description": "The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.",
                "type": "string",
                "enum": [
                  "in_progress",
                  "completed",
                  "cancelled",
                  "failed"
                ]
              },
              "last_error": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "The last error associated with this vector store file. Will be `null` if there are no errors.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "One of `server_error` or `rate_limit_exceeded`.",
                    "enum": [
                      "server_error",
                      "unsupported_file",
                      "invalid_file"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "A human-readable description of the error."
                  }
                },
                "required": [
                  "code",
                  "message"
                ]
              },
              "chunking_strategy": {
                "type": "object",
                "description": "The strategy used to chunk the file.",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Static Chunking Strategy",
                    "additionalProperties": false,
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Always `static`.",
                        "enum": [
                          "static"
                        ]
                      },
                      "static": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "max_chunk_size_tokens": {
                            "type": "integer",
                            "minimum": 100,
                            "maximum": 4096,
                            "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                          },
                          "chunk_overlap_tokens": {
                            "type": "integer",
                            "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                          }
                        },
                        "required": [
                          "max_chunk_size_tokens",
                          "chunk_overlap_tokens"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "static"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "Other Chunking Strategy",
                    "description": "This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API.",
                    "additionalProperties": false,
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Always `other`.",
                        "enum": [
                          "other"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ]
              },
              "attributes": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be \nuseful for storing additional information about the object in a structured \nformat, and querying for objects via API or the dashboard. Keys are strings \nwith a maximum length of 64 characters. Values are strings with a maximum \nlength of 512 characters, booleans, or numbers.\n",
                "maxProperties": 16,
                "additionalProperties": {
                  "oneOf": [
                    {
                      "type": "string",
                      "maxLength": 512
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                }
              }
            },
            "required": [
              "id",
              "object",
              "usage_bytes",
              "created_at",
              "vector_store_id",
              "status",
              "last_error"
            ]
          }
        ]
      }
    },
    {
      "id": "get_vector_stores__vector_store_id__files__file_id_",
      "operationId": "getVectorStoreFile",
      "name": "Get Vector Store File",
      "description": "Retrieves a vector store file.",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_vector_stores__vector_store_id__files__file_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores/{vector_store_id}/files/{file_id}"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "vector_store_id",
                "file_id"
              ],
              "properties": {
                "vector_store_id": {
                  "type": "string",
                  "example": "vs_abc123",
                  "description": "The ID of the vector store that the file belongs to."
                },
                "file_id": {
                  "type": "string",
                  "example": "file-abc123",
                  "description": "The ID of the file being retrieved."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_vector_stores__vector_store_id__files__file_id_/output-200.schema.json",
            "type": "object",
            "title": "Vector store files",
            "description": "A list of files attached to a vector store.",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `vector_store.file`.",
                "type": "string",
                "enum": [
                  "vector_store.file"
                ]
              },
              "usage_bytes": {
                "description": "The total vector store usage in bytes. Note that this may be different from the original file size.",
                "type": "integer"
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the vector store file was created.",
                "type": "integer"
              },
              "vector_store_id": {
                "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.",
                "type": "string"
              },
              "status": {
                "description": "The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.",
                "type": "string",
                "enum": [
                  "in_progress",
                  "completed",
                  "cancelled",
                  "failed"
                ]
              },
              "last_error": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "The last error associated with this vector store file. Will be `null` if there are no errors.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "One of `server_error` or `rate_limit_exceeded`.",
                    "enum": [
                      "server_error",
                      "unsupported_file",
                      "invalid_file"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "A human-readable description of the error."
                  }
                },
                "required": [
                  "code",
                  "message"
                ]
              },
              "chunking_strategy": {
                "type": "object",
                "description": "The strategy used to chunk the file.",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Static Chunking Strategy",
                    "additionalProperties": false,
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Always `static`.",
                        "enum": [
                          "static"
                        ]
                      },
                      "static": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "max_chunk_size_tokens": {
                            "type": "integer",
                            "minimum": 100,
                            "maximum": 4096,
                            "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                          },
                          "chunk_overlap_tokens": {
                            "type": "integer",
                            "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                          }
                        },
                        "required": [
                          "max_chunk_size_tokens",
                          "chunk_overlap_tokens"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "static"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "Other Chunking Strategy",
                    "description": "This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API.",
                    "additionalProperties": false,
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Always `other`.",
                        "enum": [
                          "other"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ]
              },
              "attributes": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be \nuseful for storing additional information about the object in a structured \nformat, and querying for objects via API or the dashboard. Keys are strings \nwith a maximum length of 64 characters. Values are strings with a maximum \nlength of 512 characters, booleans, or numbers.\n",
                "maxProperties": 16,
                "additionalProperties": {
                  "oneOf": [
                    {
                      "type": "string",
                      "maxLength": 512
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                }
              }
            },
            "required": [
              "id",
              "object",
              "usage_bytes",
              "created_at",
              "vector_store_id",
              "status",
              "last_error"
            ]
          }
        ]
      }
    },
    {
      "id": "post_vector_stores__vector_store_id__files__file_id_",
      "operationId": "updateVectorStoreFileAttributes",
      "name": "Update Vector Store File Attributes",
      "description": "Update attributes on a vector store file.",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_vector_stores__vector_store_id__files__file_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores/{vector_store_id}/files/{file_id}"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "vector_store_id",
                "file_id"
              ],
              "properties": {
                "vector_store_id": {
                  "type": "string",
                  "example": "vs_abc123",
                  "description": "The ID of the vector store the file belongs to."
                },
                "file_id": {
                  "type": "string",
                  "example": "file-abc123",
                  "description": "The ID of the file to update attributes."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "description": "Set of 16 key-value pairs that can be attached to an object. This can be \nuseful for storing additional information about the object in a structured \nformat, and querying for objects via API or the dashboard. Keys are strings \nwith a maximum length of 64 characters. Values are strings with a maximum \nlength of 512 characters, booleans, or numbers.\n",
                    "maxProperties": 16,
                    "additionalProperties": {
                      "oneOf": [
                        {
                          "type": "string",
                          "maxLength": 512
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "boolean"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "attributes"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_vector_stores__vector_store_id__files__file_id_/output-200.schema.json",
            "type": "object",
            "title": "Vector store files",
            "description": "A list of files attached to a vector store.",
            "properties": {
              "id": {
                "description": "The identifier, which can be referenced in API endpoints.",
                "type": "string"
              },
              "object": {
                "description": "The object type, which is always `vector_store.file`.",
                "type": "string",
                "enum": [
                  "vector_store.file"
                ]
              },
              "usage_bytes": {
                "description": "The total vector store usage in bytes. Note that this may be different from the original file size.",
                "type": "integer"
              },
              "created_at": {
                "description": "The Unix timestamp (in seconds) for when the vector store file was created.",
                "type": "integer"
              },
              "vector_store_id": {
                "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.",
                "type": "string"
              },
              "status": {
                "description": "The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.",
                "type": "string",
                "enum": [
                  "in_progress",
                  "completed",
                  "cancelled",
                  "failed"
                ]
              },
              "last_error": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "The last error associated with this vector store file. Will be `null` if there are no errors.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "One of `server_error` or `rate_limit_exceeded`.",
                    "enum": [
                      "server_error",
                      "unsupported_file",
                      "invalid_file"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "A human-readable description of the error."
                  }
                },
                "required": [
                  "code",
                  "message"
                ]
              },
              "chunking_strategy": {
                "type": "object",
                "description": "The strategy used to chunk the file.",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Static Chunking Strategy",
                    "additionalProperties": false,
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Always `static`.",
                        "enum": [
                          "static"
                        ]
                      },
                      "static": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "max_chunk_size_tokens": {
                            "type": "integer",
                            "minimum": 100,
                            "maximum": 4096,
                            "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                          },
                          "chunk_overlap_tokens": {
                            "type": "integer",
                            "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                          }
                        },
                        "required": [
                          "max_chunk_size_tokens",
                          "chunk_overlap_tokens"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "static"
                    ]
                  },
                  {
                    "type": "object",
                    "title": "Other Chunking Strategy",
                    "description": "This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API.",
                    "additionalProperties": false,
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Always `other`.",
                        "enum": [
                          "other"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                ]
              },
              "attributes": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be \nuseful for storing additional information about the object in a structured \nformat, and querying for objects via API or the dashboard. Keys are strings \nwith a maximum length of 64 characters. Values are strings with a maximum \nlength of 512 characters, booleans, or numbers.\n",
                "maxProperties": 16,
                "additionalProperties": {
                  "oneOf": [
                    {
                      "type": "string",
                      "maxLength": 512
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                }
              }
            },
            "required": [
              "id",
              "object",
              "usage_bytes",
              "created_at",
              "vector_store_id",
              "status",
              "last_error"
            ]
          }
        ]
      }
    },
    {
      "id": "delete_vector_stores__vector_store_id__files__file_id_",
      "operationId": "deleteVectorStoreFile",
      "name": "Delete Vector Store File",
      "description": "Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/delete_vector_stores__vector_store_id__files__file_id_/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores/{vector_store_id}/files/{file_id}"
            },
            "method": {
              "type": "string",
              "const": "delete"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "vector_store_id",
                "file_id"
              ],
              "properties": {
                "vector_store_id": {
                  "type": "string",
                  "description": "The ID of the vector store that the file belongs to."
                },
                "file_id": {
                  "type": "string",
                  "description": "The ID of the file to delete."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/delete_vector_stores__vector_store_id__files__file_id_/output-200.schema.json",
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              },
              "object": {
                "type": "string",
                "enum": [
                  "vector_store.file.deleted"
                ]
              }
            },
            "required": [
              "id",
              "object",
              "deleted"
            ]
          }
        ]
      }
    },
    {
      "id": "get_vector_stores__vector_store_id__files__file_id__content",
      "operationId": "retrieveVectorStoreFileContent",
      "name": "Retrieve Vector Store File Content",
      "description": "Retrieve the parsed contents of a vector store file.",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/get_vector_stores__vector_store_id__files__file_id__content/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores/{vector_store_id}/files/{file_id}/content"
            },
            "method": {
              "type": "string",
              "const": "get"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "vector_store_id",
                "file_id"
              ],
              "properties": {
                "vector_store_id": {
                  "type": "string",
                  "example": "vs_abc123",
                  "description": "The ID of the vector store."
                },
                "file_id": {
                  "type": "string",
                  "example": "file-abc123",
                  "description": "The ID of the file within the vector store."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {}
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {}
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/get_vector_stores__vector_store_id__files__file_id__content/output-200.schema.json",
            "type": "object",
            "description": "Represents the parsed content of a vector store file.",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "vector_store.file_content.page"
                ],
                "description": "The object type, which is always `vector_store.file_content.page`"
              },
              "data": {
                "type": "array",
                "description": "Parsed content of the file.",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The content type (currently only `\"text\"`)"
                    },
                    "text": {
                      "type": "string",
                      "description": "The text content"
                    }
                  }
                }
              },
              "has_more": {
                "type": "boolean",
                "description": "Indicates if there are more content pages to fetch."
              },
              "next_page": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The token for the next page, if any."
              }
            },
            "required": [
              "object",
              "data",
              "has_more",
              "next_page"
            ]
          }
        ]
      }
    },
    {
      "id": "post_vector_stores__vector_store_id__search",
      "operationId": "searchVectorStore",
      "name": "Search Vector Store",
      "description": "Search a vector store for relevant chunks based on a query and file attributes filter.",
      "schema": {
        "tags": [
          "Vector stores"
        ],
        "input": {
          "$schema": "$ref:schema",
          "$id": "https://datahub.com/integration/OpenAI-API/post_vector_stores__vector_store_id__search/input.schema.json",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "const": "/vector_stores/{vector_store_id}/search"
            },
            "method": {
              "type": "string",
              "const": "post"
            },
            "query": {
              "type": "object",
              "description": "$ref:queryDesc",
              "properties": {}
            },
            "params": {
              "type": "object",
              "description": "$ref:paramDesc",
              "required": [
                "vector_store_id"
              ],
              "properties": {
                "vector_store_id": {
                  "type": "string",
                  "example": "vs_abc123",
                  "description": "The ID of the vector store to search."
                }
              }
            },
            "headers": {
              "type": "object",
              "description": "$ref:headerDesc",
              "properties": {
                "Content-Type": {
                  "type": "string",
                  "const": "application/json"
                }
              }
            },
            "data": {
              "description": "$ref:dataDesc",
              "properties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "query": {
                    "description": "A query string for a search",
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "A list of queries to search for.",
                          "minItems": 1
                        }
                      }
                    ]
                  },
                  "rewrite_query": {
                    "description": "Whether to rewrite the natural language query for vector search.",
                    "type": "boolean",
                    "default": false
                  },
                  "max_num_results": {
                    "description": "The maximum number of results to return. This number should be between 1 and 50 inclusive.",
                    "type": "integer",
                    "default": 10,
                    "minimum": 1,
                    "maximum": 50
                  },
                  "filters": {
                    "description": "A filter to apply based on file attributes.",
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "title": "Comparison Filter",
                        "description": "A filter used to compare a specified attribute key to a given value using a defined comparison operation.\n",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "eq",
                            "enum": [
                              "eq",
                              "ne",
                              "gt",
                              "gte",
                              "lt",
                              "lte"
                            ],
                            "description": "Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.\n- `eq`: equals\n- `ne`: not equal\n- `gt`: greater than\n- `gte`: greater than or equal\n- `lt`: less than\n- `lte`: less than or equal\n"
                          },
                          "key": {
                            "type": "string",
                            "description": "The key to compare against the value."
                          },
                          "value": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              },
                              {
                                "type": "boolean"
                              }
                            ],
                            "description": "The value to compare against the attribute key; supports string, number, or boolean types."
                          }
                        },
                        "required": [
                          "type",
                          "key",
                          "value"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "title": "Compound Filter",
                        "description": "Combine multiple filters using `and` or `or`.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Type of operation: `and` or `or`.",
                            "enum": [
                              "and",
                              "or"
                            ]
                          },
                          "filters": {
                            "type": "array",
                            "description": "Array of filters to combine. Items can be `ComparisonFilter` or `CompoundFilter`.",
                            "items": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "title": "Comparison Filter",
                                  "description": "A filter used to compare a specified attribute key to a given value using a defined comparison operation.\n",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "default": "eq",
                                      "enum": [
                                        "eq",
                                        "ne",
                                        "gt",
                                        "gte",
                                        "lt",
                                        "lte"
                                      ],
                                      "description": "Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.\n- `eq`: equals\n- `ne`: not equal\n- `gt`: greater than\n- `gte`: greater than or equal\n- `lt`: less than\n- `lte`: less than or equal\n"
                                    },
                                    "key": {
                                      "type": "string",
                                      "description": "The key to compare against the value."
                                    },
                                    "value": {
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "number"
                                        },
                                        {
                                          "type": "boolean"
                                        }
                                      ],
                                      "description": "The value to compare against the attribute key; supports string, number, or boolean types."
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "key",
                                    "value"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": true
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "type",
                          "filters"
                        ]
                      }
                    ]
                  },
                  "ranking_options": {
                    "description": "Ranking options for search.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "ranker": {
                        "type": "string",
                        "enum": [
                          "auto",
                          "default-2024-11-15"
                        ],
                        "default": "auto"
                      },
                      "score_threshold": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0
                      }
                    }
                  }
                },
                "required": [
                  "query"
                ]
              }
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout specifies the number of milliseconds before the request times out. If the request takes longer than timeout, the request will be aborted.",
              "minimum": 0,
              "default": 0
            },
            "baseURL": "$ref:baseURL"
          },
          "required": [
            "url",
            "method"
          ]
        },
        "output": [
          {
            "$schema": "$ref:schema",
            "$id": "https://datahub.com/integration/OpenAI-API/post_vector_stores__vector_store_id__search/output-200.schema.json",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "vector_store.search_results.page"
                ],
                "description": "The object type, which is always `vector_store.search_results.page`"
              },
              "search_query": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The query used for this search.",
                  "minItems": 1
                }
              },
              "data": {
                "type": "array",
                "description": "The list of search result items.",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "file_id": {
                      "type": "string",
                      "description": "The ID of the vector store file."
                    },
                    "filename": {
                      "type": "string",
                      "description": "The name of the vector store file."
                    },
                    "score": {
                      "type": "number",
                      "description": "The similarity score for the result.",
                      "minimum": 0,
                      "maximum": 1
                    },
                    "attributes": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "Set of 16 key-value pairs that can be attached to an object. This can be \nuseful for storing additional information about the object in a structured \nformat, and querying for objects via API or the dashboard. Keys are strings \nwith a maximum length of 64 characters. Values are strings with a maximum \nlength of 512 characters, booleans, or numbers.\n",
                      "maxProperties": 16,
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string",
                            "maxLength": 512
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "boolean"
                          }
                        ]
                      }
                    },
                    "content": {
                      "type": "array",
                      "description": "Content chunks from the file.",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "description": "The type of content.",
                            "type": "string",
                            "enum": [
                              "text"
                            ]
                          },
                          "text": {
                            "description": "The text content returned from search.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "text"
                        ]
                      }
                    }
                  },
                  "required": [
                    "file_id",
                    "filename",
                    "score",
                    "attributes",
                    "content"
                  ]
                }
              },
              "has_more": {
                "type": "boolean",
                "description": "Indicates if there are more results to fetch."
              },
              "next_page": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The token for the next page, if any."
              }
            },
            "required": [
              "object",
              "search_query",
              "data",
              "has_more",
              "next_page"
            ]
          }
        ]
      }
    }
  ],
  "references": {
    "baseURL": {
      "type": "string",
      "enum": [
        "https://api.openai.com/v1"
      ]
    },
    "queryDesc": "Query parameters sent with the request",
    "paramDesc": "URL parameters sent with the request",
    "headerDesc": "HTTP headers sent when making the request",
    "dataDesc": "Data sent with the request",
    "schema": "https://json-schema.org/draft/2020-12/schema"
  }
}